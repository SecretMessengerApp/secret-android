/**
 * Wire
 * Copyright (C) 2019 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.waz.zclient.paintcode;

import android.graphics.Paint;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Path;
import java.util.Stack;



/**
 * Created by Wire Design Team on 26. Feb 2019.
 * Copyright Â© 2019 Wire Swiss GmbH. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Wire Design Team
 */
public class WireStyleKit {


    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }

    // Canvas Drawings
    // Icons

    private static class CacheForAvailableIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF availableRect = new RectF();
        private static Path availablePath = new Path();
    }

    public static void drawAvailableIcon(Canvas canvas, int color) {
        WireStyleKit.drawAvailableIcon(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawAvailableIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForAvailableIcon.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAvailableIcon.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForAvailableIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Available
        RectF availableRect = CacheForAvailableIcon.availableRect;
        availableRect.set(0f, 0f, 64f, 64f);
        Path availablePath = CacheForAvailableIcon.availablePath;
        availablePath.reset();
        availablePath.moveTo(32f, 64f);
        availablePath.cubicTo(49.67f, 64f, 64f, 49.67f, 64f, 32f);
        availablePath.cubicTo(64f, 14.33f, 49.67f, 0f, 32f, 0f);
        availablePath.cubicTo(14.33f, 0f, 0f, 14.33f, 0f, 32f);
        availablePath.cubicTo(0f, 49.67f, 14.33f, 64f, 32f, 64f);
        availablePath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        availablePath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(availablePath, paint);

        canvas.restore();
    }

    private static class CacheForAwayIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF awayRect = new RectF();
        private static Path awayPath = new Path();
    }

    public static void drawAwayIcon(Canvas canvas, int color) {
        WireStyleKit.drawAwayIcon(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawAwayIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForAwayIcon.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAwayIcon.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForAwayIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Away
        RectF awayRect = CacheForAwayIcon.awayRect;
        awayRect.set(0f, 0f, 64f, 64f);
        Path awayPath = CacheForAwayIcon.awayPath;
        awayPath.reset();
        awayPath.moveTo(32f, 64f);
        awayPath.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
        awayPath.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
        awayPath.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
        awayPath.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
        awayPath.close();
        awayPath.moveTo(32f, 51.2f);
        awayPath.cubicTo(42.6f, 51.2f, 51.2f, 42.6f, 51.2f, 32f);
        awayPath.cubicTo(51.2f, 21.4f, 42.6f, 12.8f, 32f, 12.8f);
        awayPath.cubicTo(21.4f, 12.8f, 12.8f, 21.4f, 12.8f, 32f);
        awayPath.cubicTo(12.8f, 42.6f, 21.4f, 51.2f, 32f, 51.2f);
        awayPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        awayPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(awayPath, paint);

        canvas.restore();
    }

    private static class CacheForDownArrow {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF downArrowRect = new RectF();
        private static Path downArrowPath = new Path();
    }

    public static void drawDownArrow(Canvas canvas, int color) {
        WireStyleKit.drawDownArrow(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawDownArrow(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForDownArrow.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDownArrow.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForDownArrow.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // DownArrow
        RectF downArrowRect = CacheForDownArrow.downArrowRect;
        downArrowRect.set(23f, 0f, 42f, 63f);
        Path downArrowPath = CacheForDownArrow.downArrowPath;
        downArrowPath.reset();
        downArrowPath.moveTo(40.25f, 52.03f);
        downArrowPath.lineTo(42f, 53.74f);
        downArrowPath.lineTo(32.5f, 63f);
        downArrowPath.lineTo(23f, 53.74f);
        downArrowPath.lineTo(24.75f, 52.03f);
        downArrowPath.lineTo(31.26f, 58.36f);
        downArrowPath.lineTo(31.26f, 0f);
        downArrowPath.lineTo(33.74f, 0f);
        downArrowPath.lineTo(33.74f, 58.37f);
        downArrowPath.lineTo(40.25f, 52.03f);
        downArrowPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        downArrowPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(downArrowPath, paint);

        canvas.restore();
    }

    private static class CacheForServiceIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF serviceRect = new RectF();
        private static Path servicePath = new Path();
    }

    public static void drawServiceIcon(Canvas canvas, int color) {
        WireStyleKit.drawServiceIcon(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawServiceIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForServiceIcon.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForServiceIcon.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForServiceIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Service
        RectF serviceRect = CacheForServiceIcon.serviceRect;
        serviceRect.set(0f, 6f, 64f, 57f);
        Path servicePath = CacheForServiceIcon.servicePath;
        servicePath.reset();
        servicePath.moveTo(20.44f, 23.59f);
        servicePath.cubicTo(13.08f, 23.59f, 7.11f, 29.49f, 7.11f, 36.78f);
        servicePath.lineTo(7.11f, 48.21f);
        servicePath.cubicTo(7.11f, 49.18f, 7.91f, 49.97f, 8.89f, 49.97f);
        servicePath.lineTo(55.11f, 49.97f);
        servicePath.cubicTo(56.09f, 49.97f, 56.89f, 49.18f, 56.89f, 48.21f);
        servicePath.lineTo(56.89f, 36.78f);
        servicePath.cubicTo(56.89f, 29.49f, 50.92f, 23.59f, 43.55f, 23.59f);
        servicePath.lineTo(20.44f, 23.59f);
        servicePath.close();
        servicePath.moveTo(57.67f, 22.14f);
        servicePath.cubicTo(61.57f, 25.83f, 64f, 31.02f, 64f, 36.78f);
        servicePath.lineTo(64f, 48.21f);
        servicePath.cubicTo(64f, 53.06f, 60.02f, 57f, 55.11f, 57f);
        servicePath.lineTo(8.89f, 57f);
        servicePath.cubicTo(3.98f, 57f, 0f, 53.06f, 0f, 48.21f);
        servicePath.lineTo(0f, 36.78f);
        servicePath.cubicTo(0f, 31.02f, 2.43f, 25.83f, 6.33f, 22.14f);
        servicePath.lineTo(0.42f, 11.17f);
        servicePath.cubicTo(-0.51f, 9.46f, 0.15f, 7.33f, 1.88f, 6.41f);
        servicePath.cubicTo(3.62f, 5.5f, 5.77f, 6.15f, 6.69f, 7.86f);
        servicePath.lineTo(12.28f, 18.23f);
        servicePath.cubicTo(14.78f, 17.15f, 17.54f, 16.55f, 20.44f, 16.55f);
        servicePath.lineTo(43.55f, 16.55f);
        servicePath.cubicTo(46.46f, 16.55f, 49.22f, 17.15f, 51.72f, 18.23f);
        servicePath.lineTo(57.31f, 7.86f);
        servicePath.cubicTo(58.23f, 6.15f, 60.38f, 5.5f, 62.12f, 6.41f);
        servicePath.cubicTo(63.85f, 7.33f, 64.51f, 9.46f, 63.58f, 11.17f);
        servicePath.lineTo(57.67f, 22.14f);
        servicePath.close();
        servicePath.moveTo(21.33f, 37.66f);
        servicePath.cubicTo(21.33f, 39.6f, 19.74f, 41.17f, 17.78f, 41.17f);
        servicePath.cubicTo(15.81f, 41.17f, 14.22f, 39.6f, 14.22f, 37.66f);
        servicePath.cubicTo(14.22f, 35.71f, 15.81f, 34.14f, 17.78f, 34.14f);
        servicePath.cubicTo(19.74f, 34.14f, 21.33f, 35.71f, 21.33f, 37.66f);
        servicePath.close();
        servicePath.moveTo(35.55f, 37.66f);
        servicePath.cubicTo(35.55f, 39.6f, 33.96f, 41.17f, 32f, 41.17f);
        servicePath.cubicTo(30.04f, 41.17f, 28.44f, 39.6f, 28.44f, 37.66f);
        servicePath.cubicTo(28.44f, 35.71f, 30.04f, 34.14f, 32f, 34.14f);
        servicePath.cubicTo(33.96f, 34.14f, 35.55f, 35.71f, 35.55f, 37.66f);
        servicePath.close();
        servicePath.moveTo(46.22f, 41.17f);
        servicePath.cubicTo(44.26f, 41.17f, 42.67f, 39.6f, 42.67f, 37.66f);
        servicePath.cubicTo(42.67f, 35.71f, 44.26f, 34.14f, 46.22f, 34.14f);
        servicePath.cubicTo(48.18f, 34.14f, 49.78f, 35.71f, 49.78f, 37.66f);
        servicePath.cubicTo(49.78f, 39.6f, 48.18f, 41.17f, 46.22f, 41.17f);
        servicePath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(servicePath, paint);

        canvas.restore();
    }

    private static class CacheForGroupIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF groupRect = new RectF();
        private static Path groupPath = new Path();
    }

    public static void drawGroupIcon(Canvas canvas, int color) {
        WireStyleKit.drawGroupIcon(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawGroupIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForGroupIcon.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForGroupIcon.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForGroupIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Group
        RectF groupRect = CacheForGroupIcon.groupRect;
        groupRect.set(0f, 0f, 64f, 64f);
        Path groupPath = CacheForGroupIcon.groupPath;
        groupPath.reset();
        groupPath.moveTo(40f, 8f);
        groupPath.cubicTo(40f, 12.42f, 36.42f, 16f, 32f, 16f);
        groupPath.cubicTo(27.58f, 16f, 24f, 12.42f, 24f, 8f);
        groupPath.cubicTo(24f, 3.58f, 27.58f, 0f, 32f, 0f);
        groupPath.cubicTo(36.42f, 0f, 40f, 3.58f, 40f, 8f);
        groupPath.close();
        groupPath.moveTo(64f, 20f);
        groupPath.cubicTo(64f, 24.42f, 60.42f, 28f, 56f, 28f);
        groupPath.cubicTo(51.58f, 28f, 48f, 24.42f, 48f, 20f);
        groupPath.cubicTo(48f, 15.58f, 51.58f, 12f, 56f, 12f);
        groupPath.cubicTo(60.42f, 12f, 64f, 15.58f, 64f, 20f);
        groupPath.close();
        groupPath.moveTo(64f, 44f);
        groupPath.cubicTo(64f, 48.42f, 60.42f, 52f, 56f, 52f);
        groupPath.cubicTo(51.58f, 52f, 48f, 48.42f, 48f, 44f);
        groupPath.cubicTo(48f, 39.58f, 51.58f, 36f, 56f, 36f);
        groupPath.cubicTo(60.42f, 36f, 64f, 39.58f, 64f, 44f);
        groupPath.close();
        groupPath.moveTo(40f, 56f);
        groupPath.cubicTo(40f, 60.42f, 36.42f, 64f, 32f, 64f);
        groupPath.cubicTo(27.58f, 64f, 24f, 60.42f, 24f, 56f);
        groupPath.cubicTo(24f, 51.58f, 27.58f, 48f, 32f, 48f);
        groupPath.cubicTo(36.42f, 48f, 40f, 51.58f, 40f, 56f);
        groupPath.close();
        groupPath.moveTo(16f, 44f);
        groupPath.cubicTo(16f, 48.42f, 12.42f, 52f, 8f, 52f);
        groupPath.cubicTo(3.58f, 52f, 0f, 48.42f, 0f, 44f);
        groupPath.cubicTo(0f, 39.58f, 3.58f, 36f, 8f, 36f);
        groupPath.cubicTo(12.42f, 36f, 16f, 39.58f, 16f, 44f);
        groupPath.close();
        groupPath.moveTo(16f, 20f);
        groupPath.cubicTo(16f, 24.42f, 12.42f, 28f, 8f, 28f);
        groupPath.cubicTo(3.58f, 28f, 0f, 24.42f, 0f, 20f);
        groupPath.cubicTo(0f, 15.58f, 3.58f, 12f, 8f, 12f);
        groupPath.cubicTo(12.42f, 12f, 16f, 15.58f, 16f, 20f);
        groupPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(groupPath, paint);

        canvas.restore();
    }

    private static class CacheForNavigationArrow {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF arrowRect = new RectF();
        private static Path arrowPath = new Path();
    }

    public static void drawNavigationArrow(Canvas canvas, int color) {
        WireStyleKit.drawNavigationArrow(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawNavigationArrow(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForNavigationArrow.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForNavigationArrow.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForNavigationArrow.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Arrow
        RectF arrowRect = CacheForNavigationArrow.arrowRect;
        arrowRect.set(12.5f, 0f, 51.5f, 64f);
        Path arrowPath = CacheForNavigationArrow.arrowPath;
        arrowPath.reset();
        arrowPath.moveTo(12.5f, 7.38f);
        arrowPath.lineTo(19.81f, 0f);
        arrowPath.lineTo(51.5f, 32f);
        arrowPath.lineTo(19.81f, 64f);
        arrowPath.lineTo(12.5f, 56.62f);
        arrowPath.lineTo(36.88f, 32f);
        arrowPath.lineTo(12.5f, 7.38f);
        arrowPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        arrowPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(arrowPath, paint);

        canvas.restore();
    }

    private static class CacheForGuestIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF guestRect = new RectF();
        private static Path guestPath = new Path();
    }

    public static void drawGuestIcon(Canvas canvas, int color) {
        WireStyleKit.drawGuestIcon(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawGuestIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForGuestIcon.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForGuestIcon.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForGuestIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Guest
        RectF guestRect = CacheForGuestIcon.guestRect;
        guestRect.set(4f, 0f, 60f, 64f);
        Path guestPath = CacheForGuestIcon.guestPath;
        guestPath.reset();
        guestPath.moveTo(24f, 4f);
        guestPath.cubicTo(24f, 1.79f, 25.79f, 0f, 28f, 0f);
        guestPath.lineTo(36f, 0f);
        guestPath.cubicTo(38.21f, 0f, 40f, 1.79f, 40f, 4f);
        guestPath.lineTo(52f, 4f);
        guestPath.cubicTo(56.42f, 4f, 60f, 7.58f, 60f, 12f);
        guestPath.lineTo(60f, 56f);
        guestPath.cubicTo(60f, 60.42f, 56.42f, 64f, 52f, 64f);
        guestPath.lineTo(12f, 64f);
        guestPath.cubicTo(7.58f, 64f, 4f, 60.42f, 4f, 56f);
        guestPath.lineTo(4f, 12f);
        guestPath.cubicTo(4f, 7.58f, 7.58f, 4f, 12f, 4f);
        guestPath.lineTo(24f, 4f);
        guestPath.close();
        guestPath.moveTo(26f, 8f);
        guestPath.cubicTo(24.9f, 8f, 24f, 8.9f, 24f, 10f);
        guestPath.cubicTo(24f, 11.1f, 24.9f, 12f, 26f, 12f);
        guestPath.lineTo(38f, 12f);
        guestPath.cubicTo(39.1f, 12f, 40f, 11.1f, 40f, 10f);
        guestPath.cubicTo(40f, 8.9f, 39.1f, 8f, 38f, 8f);
        guestPath.lineTo(26f, 8f);
        guestPath.close();
        guestPath.moveTo(32f, 36f);
        guestPath.cubicTo(36.42f, 36f, 40f, 32.42f, 40f, 28f);
        guestPath.cubicTo(40f, 23.58f, 36.42f, 20f, 32f, 20f);
        guestPath.cubicTo(27.58f, 20f, 24f, 23.58f, 24f, 28f);
        guestPath.cubicTo(24f, 32.42f, 27.58f, 36f, 32f, 36f);
        guestPath.close();
        guestPath.moveTo(24f, 40f);
        guestPath.cubicTo(19.58f, 40f, 16f, 43.58f, 16f, 48f);
        guestPath.lineTo(16f, 52f);
        guestPath.lineTo(48f, 52f);
        guestPath.lineTo(48f, 48f);
        guestPath.cubicTo(48f, 43.58f, 44.42f, 40f, 40f, 40f);
        guestPath.lineTo(24f, 40f);
        guestPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(guestPath, paint);

        canvas.restore();
    }

    private static class CacheForVideocall {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF videoRect = new RectF();
        private static Path videoPath = new Path();
    }

    public static void drawVideocall(Canvas canvas, int color) {
        WireStyleKit.drawVideocall(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawVideocall(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForVideocall.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForVideocall.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForVideocall.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Video
        RectF videoRect = CacheForVideocall.videoRect;
        videoRect.set(0f, 8f, 64f, 56f);
        Path videoPath = CacheForVideocall.videoPath;
        videoPath.reset();
        videoPath.moveTo(10.26f, 8f);
        videoPath.lineTo(29.74f, 8f);
        videoPath.cubicTo(33.31f, 8f, 34.6f, 8.37f, 35.91f, 9.07f);
        videoPath.cubicTo(37.21f, 9.77f, 38.23f, 10.79f, 38.93f, 12.09f);
        videoPath.cubicTo(39.63f, 13.4f, 40f, 14.69f, 40f, 18.26f);
        videoPath.lineTo(40f, 45.74f);
        videoPath.cubicTo(40f, 49.31f, 39.63f, 50.6f, 38.93f, 51.91f);
        videoPath.cubicTo(38.23f, 53.21f, 37.21f, 54.23f, 35.91f, 54.93f);
        videoPath.cubicTo(34.6f, 55.63f, 33.31f, 56f, 29.74f, 56f);
        videoPath.lineTo(10.26f, 56f);
        videoPath.cubicTo(6.69f, 56f, 5.4f, 55.63f, 4.09f, 54.93f);
        videoPath.cubicTo(2.79f, 54.23f, 1.77f, 53.21f, 1.07f, 51.91f);
        videoPath.cubicTo(0.37f, 50.6f, 0f, 49.31f, 0f, 45.74f);
        videoPath.lineTo(0f, 18.26f);
        videoPath.cubicTo(0f, 14.69f, 0.37f, 13.4f, 1.07f, 12.09f);
        videoPath.cubicTo(1.77f, 10.79f, 2.79f, 9.77f, 4.09f, 9.07f);
        videoPath.cubicTo(5.4f, 8.37f, 6.69f, 8f, 10.26f, 8f);
        videoPath.close();
        videoPath.moveTo(45.17f, 29.18f);
        videoPath.lineTo(57.18f, 17.22f);
        videoPath.cubicTo(58.74f, 15.66f, 61.27f, 15.66f, 62.83f, 17.23f);
        videoPath.cubicTo(63.58f, 17.98f, 64f, 18.99f, 64f, 20.05f);
        videoPath.lineTo(64f, 43.98f);
        videoPath.cubicTo(64f, 46.19f, 62.21f, 47.98f, 60f, 47.98f);
        videoPath.cubicTo(58.94f, 47.98f, 57.93f, 47.57f, 57.18f, 46.82f);
        videoPath.lineTo(45.17f, 34.85f);
        videoPath.cubicTo(43.61f, 33.29f, 43.6f, 30.76f, 45.16f, 29.19f);
        videoPath.lineTo(45.17f, 29.18f);
        videoPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        videoPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(videoPath, paint);

        canvas.restore();
    }

    private static class CacheForHangUpCall {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF hangupRect = new RectF();
        private static Path hangupPath = new Path();
    }

    public static void drawHangUpCall(Canvas canvas, int color) {
        WireStyleKit.drawHangUpCall(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawHangUpCall(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForHangUpCall.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForHangUpCall.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForHangUpCall.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Hangup
        RectF hangupRect = CacheForHangUpCall.hangupRect;
        hangupRect.set(-0f, 19f, 64f, 44.37f);
        Path hangupPath = CacheForHangUpCall.hangupPath;
        hangupPath.reset();
        hangupPath.moveTo(61.8f, 27.81f);
        hangupPath.cubicTo(64.9f, 30.84f, 64.67f, 37.43f, 61.45f, 43.25f);
        hangupPath.cubicTo(61.12f, 43.84f, 60.93f, 44.14f, 60.8f, 44.27f);
        hangupPath.cubicTo(60.63f, 44.43f, 60.49f, 44.42f, 59.51f, 44.03f);
        hangupPath.cubicTo(57.54f, 43.27f, 55.31f, 42.45f, 51.46f, 41.03f);
        hangupPath.cubicTo(49.21f, 40.2f, 47.7f, 39.65f, 46.62f, 39.23f);
        hangupPath.cubicTo(45.31f, 38.73f, 45.33f, 38.74f, 45.33f, 37.56f);
        hangupPath.lineTo(45.31f, 33.24f);
        hangupPath.lineTo(45.29f, 30.32f);
        hangupPath.lineTo(42.44f, 29.6f);
        hangupPath.cubicTo(39.36f, 28.82f, 35.78f, 28.31f, 32.01f, 28.31f);
        hangupPath.cubicTo(28.24f, 28.31f, 24.7f, 28.82f, 21.54f, 29.61f);
        hangupPath.lineTo(18.68f, 30.33f);
        hangupPath.lineTo(18.69f, 37.52f);
        hangupPath.cubicTo(18.69f, 37.85f, 18.68f, 38.01f, 18.66f, 38.18f);
        hangupPath.cubicTo(18.63f, 38.46f, 18.57f, 38.6f, 18.5f, 38.66f);
        hangupPath.cubicTo(18.38f, 38.79f, 18.13f, 38.92f, 17.34f, 39.22f);
        hangupPath.cubicTo(16.07f, 39.69f, 14.27f, 40.37f, 12.5f, 41.05f);
        hangupPath.cubicTo(8.69f, 42.45f, 6.46f, 43.28f, 4.55f, 44f);
        hangupPath.cubicTo(3.16f, 44.55f, 3.3f, 44.6f, 2.55f, 43.25f);
        hangupPath.cubicTo(1.88f, 42.03f, 1.34f, 40.78f, 0.93f, 39.54f);
        hangupPath.cubicTo(-0.61f, 34.85f, -0.26f, 30.25f, 2.14f, 27.85f);
        hangupPath.cubicTo(7.04f, 23.07f, 19.45f, 18.99f, 31.98f, 19f);
        hangupPath.cubicTo(44.54f, 19.01f, 56.96f, 23.08f, 61.8f, 27.81f);
        hangupPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(hangupPath, paint);

        canvas.restore();
    }

    private static class CacheForConversation {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF chatRect = new RectF();
        private static Path chatPath = new Path();
    }

    public static void drawConversation(Canvas canvas, int color) {
        WireStyleKit.drawConversation(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawConversation(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForConversation.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForConversation.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForConversation.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Chat
        RectF chatRect = CacheForConversation.chatRect;
        chatRect.set(0f, 0f, 64f, 64f);
        Path chatPath = CacheForConversation.chatPath;
        chatPath.reset();
        chatPath.moveTo(12f, 0f);
        chatPath.lineTo(52f, 0f);
        chatPath.cubicTo(58.63f, 0f, 64f, 5.36f, 64f, 11.98f);
        chatPath.lineTo(64f, 39.93f);
        chatPath.cubicTo(64f, 46.55f, 58.63f, 51.91f, 52f, 51.91f);
        chatPath.lineTo(32f, 51.91f);
        chatPath.lineTo(24.34f, 51.91f);
        chatPath.cubicTo(21.53f, 51.91f, 18.82f, 52.89f, 16.66f, 54.68f);
        chatPath.lineTo(6.56f, 63.08f);
        chatPath.cubicTo(4.86f, 64.49f, 2.34f, 64.26f, 0.92f, 62.56f);
        chatPath.cubicTo(0.33f, 61.84f, 0f, 60.94f, 0f, 60.01f);
        chatPath.lineTo(0f, 11.98f);
        chatPath.cubicTo(0f, 5.36f, 5.37f, 0f, 12f, 0f);
        chatPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        chatPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(chatPath, paint);

        canvas.restore();
    }

    private static class CacheForAcceptCall {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawAcceptCall(Canvas canvas, int color) {
        WireStyleKit.drawAcceptCall(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawAcceptCall(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForAcceptCall.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAcceptCall.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForAcceptCall.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForAcceptCall.bezierRect;
        bezierRect.set(-0f, 0f, 64f, 64f);
        Path bezierPath = CacheForAcceptCall.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(50.85f, 64f);
        bezierPath.lineTo(50.85f, 64f);
        bezierPath.cubicTo(56.04f, 64f, 61.44f, 58.16f, 63.67f, 50.49f);
        bezierPath.cubicTo(64.19f, 48.7f, 64.26f, 48.85f, 62.61f, 48.13f);
        bezierPath.cubicTo(60.36f, 47.13f, 57.76f, 45.94f, 53.32f, 43.89f);
        bezierPath.cubicTo(51.23f, 42.96f, 49.12f, 42.01f, 47.63f, 41.33f);
        bezierPath.cubicTo(46.7f, 40.92f, 46.37f, 40.82f, 46.16f, 40.82f);
        bezierPath.cubicTo(46.05f, 40.82f, 45.89f, 40.89f, 45.61f, 41.1f);
        bezierPath.cubicTo(45.45f, 41.23f, 45.31f, 41.36f, 45.03f, 41.64f);
        bezierPath.lineTo(41.4f, 45.27f);
        bezierPath.lineTo(38.89f, 47.79f);
        bezierPath.lineTo(35.83f, 45.97f);
        bezierPath.cubicTo(32.47f, 43.96f, 29.01f, 41.38f, 25.81f, 38.17f);
        bezierPath.cubicTo(22.59f, 34.95f, 19.98f, 31.47f, 18.02f, 28.18f);
        bezierPath.lineTo(16.21f, 25.14f);
        bezierPath.lineTo(18.69f, 22.62f);
        bezierPath.lineTo(22.36f, 18.91f);
        bezierPath.cubicTo(23.38f, 17.9f, 23.38f, 17.93f, 22.7f, 16.39f);
        bezierPath.cubicTo(22.13f, 15.11f, 21.33f, 13.34f, 20.12f, 10.73f);
        bezierPath.cubicTo(18.05f, 6.23f, 16.86f, 3.62f, 15.82f, 1.3f);
        bezierPath.cubicTo(15.32f, 0.13f, 15.21f, 0f, 14.93f, 0f);
        bezierPath.cubicTo(14.71f, 0f, 14.29f, 0.09f, 13.51f, 0.31f);
        bezierPath.cubicTo(5.78f, 2.55f, -0.05f, 7.99f, 0f, 13.22f);
        bezierPath.cubicTo(0.08f, 21.38f, 7.17f, 35.45f, 17.87f, 46.16f);
        bezierPath.cubicTo(28.54f, 56.84f, 42.59f, 63.92f, 50.73f, 64f);
        bezierPath.lineTo(50.85f, 64f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForFlip {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawFlip(Canvas canvas, int color) {
        WireStyleKit.drawFlip(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawFlip(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForFlip.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForFlip.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForFlip.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForFlip.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForFlip.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(36f, 16.19f);
        bezierPath.cubicTo(51.79f, 17.66f, 64f, 27.76f, 64f, 40f);
        bezierPath.cubicTo(64f, 53.25f, 49.67f, 64f, 32f, 64f);
        bezierPath.cubicTo(14.33f, 64f, 0f, 53.25f, 0f, 40f);
        bezierPath.cubicTo(0f, 32.42f, 4.68f, 25.66f, 12f, 21.26f);
        bezierPath.lineTo(12f, 21.26f);
        bezierPath.lineTo(12f, 31.3f);
        bezierPath.cubicTo(9.46f, 33.87f, 8f, 36.9f, 8f, 40f);
        bezierPath.cubicTo(8f, 48.25f, 18.33f, 56f, 32f, 56f);
        bezierPath.cubicTo(45.67f, 56f, 56f, 48.25f, 56f, 40f);
        bezierPath.cubicTo(56f, 32.57f, 47.64f, 25.56f, 36f, 24.23f);
        bezierPath.lineTo(36f, 40f);
        bezierPath.lineTo(20f, 20f);
        bezierPath.lineTo(36f, 0f);
        bezierPath.lineTo(36f, 16.19f);
        bezierPath.lineTo(36f, 16.19f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForSpeaker {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawSpeaker(Canvas canvas, int color) {
        WireStyleKit.drawSpeaker(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawSpeaker(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForSpeaker.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSpeaker.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForSpeaker.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForSpeaker.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForSpeaker.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(2.06f, 48.08f);
        bezierPath.cubicTo(0.77f, 48.08f, 0f, 46.89f, 0f, 45.74f);
        bezierPath.lineTo(0f, 18.55f);
        bezierPath.cubicTo(0f, 17.37f, 0.85f, 16.06f, 2.06f, 16.06f);
        bezierPath.lineTo(20.11f, 16.06f);
        bezierPath.lineTo(40f, 0f);
        bezierPath.lineTo(40f, 64f);
        bezierPath.lineTo(20.11f, 48.08f);
        bezierPath.lineTo(2.06f, 48.08f);
        bezierPath.lineTo(2.06f, 48.08f);
        bezierPath.close();
        bezierPath.moveTo(48f, 40f);
        bezierPath.cubicTo(52.42f, 40f, 56f, 36.42f, 56f, 32f);
        bezierPath.cubicTo(56f, 27.58f, 52.42f, 24f, 48f, 24f);
        bezierPath.lineTo(48f, 16f);
        bezierPath.cubicTo(56.84f, 16f, 64f, 23.16f, 64f, 32f);
        bezierPath.cubicTo(64f, 40.84f, 56.84f, 48f, 48f, 48f);
        bezierPath.lineTo(48f, 40f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForMute {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawMute(Canvas canvas, int color) {
        WireStyleKit.drawMute(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawMute(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForMute.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMute.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForMute.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForMute.bezierRect;
        bezierRect.set(0f, 0f, 63f, 64f);
        Path bezierPath = CacheForMute.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(12.66f, 57.93f);
        bezierPath.cubicTo(17.94f, 61.74f, 24.45f, 64f, 31.5f, 64f);
        bezierPath.cubicTo(40.97f, 64f, 49.45f, 59.94f, 55.3f, 53.5f);
        bezierPath.lineTo(49.64f, 47.84f);
        bezierPath.lineTo(49.64f, 47.84f);
        bezierPath.cubicTo(45.25f, 52.83f, 38.76f, 56f, 31.5f, 56f);
        bezierPath.cubicTo(27.24f, 56f, 23.24f, 54.91f, 19.78f, 53f);
        bezierPath.lineTo(12.66f, 57.93f);
        bezierPath.lineTo(12.66f, 57.93f);
        bezierPath.lineTo(12.66f, 57.93f);
        bezierPath.close();
        bezierPath.moveTo(47.39f, 33.84f);
        bezierPath.cubicTo(46.58f, 41.76f, 39.79f, 48f, 31.5f, 48f);
        bezierPath.cubicTo(30.17f, 48f, 28.88f, 47.84f, 27.65f, 47.54f);
        bezierPath.lineTo(47.39f, 33.84f);
        bezierPath.lineTo(47.39f, 33.84f);
        bezierPath.lineTo(47.39f, 33.84f);
        bezierPath.close();
        bezierPath.moveTo(47.47f, 16.06f);
        bezierPath.lineTo(47.47f, 15.74f);
        bezierPath.cubicTo(47.47f, 7.08f, 40.33f, 0f, 31.5f, 0f);
        bezierPath.cubicTo(22.67f, 0f, 15.53f, 7.08f, 15.53f, 15.74f);
        bezierPath.lineTo(15.53f, 32.27f);
        bezierPath.cubicTo(15.53f, 34.12f, 15.86f, 35.91f, 16.47f, 37.57f);
        bezierPath.lineTo(3.28f, 46.71f);
        bezierPath.lineTo(0f, 48.99f);
        bezierPath.lineTo(4.54f, 55.57f);
        bezierPath.lineTo(7.83f, 53.29f);
        bezierPath.lineTo(59.72f, 17.29f);
        bezierPath.lineTo(63f, 15.01f);
        bezierPath.lineTo(58.46f, 8.43f);
        bezierPath.lineTo(55.17f, 10.71f);
        bezierPath.lineTo(47.47f, 16.06f);
        bezierPath.lineTo(47.47f, 16.06f);
        bezierPath.lineTo(47.47f, 16.06f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForMissedCall {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF missedCallRect = new RectF();
        private static Path missedCallPath = new Path();
    }

    public static void drawMissedCall(Canvas canvas, int color) {
        WireStyleKit.drawMissedCall(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawMissedCall(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForMissedCall.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMissedCall.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForMissedCall.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // MissedCall
        RectF missedCallRect = CacheForMissedCall.missedCallRect;
        missedCallRect.set(0f, 0f, 64f, 64f);
        Path missedCallPath = CacheForMissedCall.missedCallPath;
        missedCallPath.reset();
        missedCallPath.moveTo(0f, 50.85f);
        missedCallPath.lineTo(0f, 50.73f);
        missedCallPath.cubicTo(0.08f, 42.59f, 7.16f, 28.54f, 17.84f, 17.87f);
        missedCallPath.cubicTo(28.55f, 7.17f, 42.62f, 0.08f, 50.78f, 0f);
        missedCallPath.cubicTo(56.01f, -0.05f, 61.45f, 5.78f, 63.69f, 13.51f);
        missedCallPath.cubicTo(63.91f, 14.29f, 64f, 14.71f, 64f, 14.93f);
        missedCallPath.cubicTo(64f, 15.21f, 63.87f, 15.32f, 62.7f, 15.82f);
        missedCallPath.cubicTo(60.38f, 16.86f, 57.77f, 18.05f, 53.27f, 20.12f);
        missedCallPath.cubicTo(50.66f, 21.33f, 48.89f, 22.13f, 47.61f, 22.7f);
        missedCallPath.cubicTo(46.07f, 23.38f, 46.1f, 23.38f, 45.09f, 22.36f);
        missedCallPath.lineTo(41.38f, 18.69f);
        missedCallPath.lineTo(38.86f, 16.21f);
        missedCallPath.lineTo(35.82f, 18.02f);
        missedCallPath.cubicTo(32.53f, 19.98f, 29.05f, 22.59f, 25.83f, 25.81f);
        missedCallPath.cubicTo(22.62f, 29.01f, 20.04f, 32.47f, 18.03f, 35.83f);
        missedCallPath.lineTo(16.21f, 38.89f);
        missedCallPath.lineTo(22.36f, 45.03f);
        missedCallPath.cubicTo(22.64f, 45.31f, 22.77f, 45.45f, 22.9f, 45.61f);
        missedCallPath.cubicTo(23.11f, 45.89f, 23.18f, 46.05f, 23.18f, 46.16f);
        missedCallPath.cubicTo(23.18f, 46.37f, 23.08f, 46.7f, 22.67f, 47.63f);
        missedCallPath.cubicTo(21.99f, 49.12f, 21.04f, 51.23f, 20.11f, 53.32f);
        missedCallPath.cubicTo(18.06f, 57.76f, 16.87f, 60.36f, 15.87f, 62.61f);
        missedCallPath.cubicTo(15.15f, 64.26f, 15.3f, 64.19f, 13.51f, 63.67f);
        missedCallPath.cubicTo(5.84f, 61.44f, 0f, 56.04f, 0f, 50.85f);
        missedCallPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(missedCallPath, paint);

        canvas.restore();
    }

    private static class CacheForBusyIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }

    public static void drawBusyIcon(Canvas canvas, int color) {
        WireStyleKit.drawBusyIcon(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawBusyIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForBusyIcon.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBusyIcon.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForBusyIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier 2
        RectF bezier2Rect = CacheForBusyIcon.bezier2Rect;
        bezier2Rect.set(0f, 0f, 64f, 64f);
        Path bezier2Path = CacheForBusyIcon.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(32f, 64f);
        bezier2Path.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
        bezier2Path.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
        bezier2Path.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
        bezier2Path.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
        bezier2Path.close();
        bezier2Path.moveTo(19.2f, 25.6f);
        bezier2Path.cubicTo(15.67f, 25.6f, 12.8f, 28.47f, 12.8f, 32f);
        bezier2Path.cubicTo(12.8f, 35.53f, 15.67f, 38.4f, 19.2f, 38.4f);
        bezier2Path.lineTo(44.8f, 38.4f);
        bezier2Path.cubicTo(48.33f, 38.4f, 51.2f, 35.53f, 51.2f, 32f);
        bezier2Path.cubicTo(51.2f, 28.47f, 48.33f, 25.6f, 44.8f, 25.6f);
        bezier2Path.lineTo(19.2f, 25.6f);
        bezier2Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier2Path, paint);

        canvas.restore();
    }

    private static class CacheForMinute {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }

    public static void drawMinute(Canvas canvas, int color) {
        WireStyleKit.drawMinute(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawMinute(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForMinute.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMinute.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForMinute.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier 2
        RectF bezier2Rect = CacheForMinute.bezier2Rect;
        bezier2Rect.set(42.89f, 14f, 64f, 28f);
        Path bezier2Path = CacheForMinute.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(42.89f, 28f);
        bezier2Path.lineTo(42.89f, 14.28f);
        bezier2Path.lineTo(46.12f, 14.28f);
        bezier2Path.lineTo(46.12f, 16.5f);
        bezier2Path.lineTo(46.35f, 16.5f);
        bezier2Path.cubicTo(46.99f, 14.93f, 48.5f, 14f, 50.46f, 14f);
        bezier2Path.cubicTo(52.5f, 14f, 53.92f, 14.95f, 54.54f, 16.5f);
        bezier2Path.lineTo(54.77f, 16.5f);
        bezier2Path.cubicTo(55.5f, 14.99f, 57.2f, 14f, 59.26f, 14f);
        bezier2Path.cubicTo(62.22f, 14f, 64f, 15.72f, 64f, 18.57f);
        bezier2Path.lineTo(64f, 28f);
        bezier2Path.lineTo(60.66f, 28f);
        bezier2Path.lineTo(60.66f, 19.36f);
        bezier2Path.cubicTo(60.66f, 17.59f, 59.76f, 16.71f, 57.96f, 16.71f);
        bezier2Path.cubicTo(56.22f, 16.71f, 55.07f, 17.89f, 55.07f, 19.46f);
        bezier2Path.lineTo(55.07f, 28f);
        bezier2Path.lineTo(51.81f, 28f);
        bezier2Path.lineTo(51.81f, 19.13f);
        bezier2Path.cubicTo(51.81f, 17.63f, 50.78f, 16.71f, 49.13f, 16.71f);
        bezier2Path.cubicTo(47.47f, 16.71f, 46.24f, 17.98f, 46.24f, 19.66f);
        bezier2Path.lineTo(46.24f, 28f);
        bezier2Path.lineTo(42.89f, 28f);
        bezier2Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier2Path, paint);

        // Bezier 3
        RectF bezier3Rect = CacheForMinute.bezier3Rect;
        bezier3Rect.set(4f, 4f, 60f, 60f);
        Path bezier3Path = CacheForMinute.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(42.56f, 11.67f);
        bezier3Path.cubicTo(39.4f, 10.02f, 35.81f, 9.09f, 32f, 9.09f);
        bezier3Path.cubicTo(19.35f, 9.09f, 9.09f, 19.35f, 9.09f, 32f);
        bezier3Path.cubicTo(9.09f, 44.65f, 19.35f, 54.91f, 32f, 54.91f);
        bezier3Path.cubicTo(44.65f, 54.91f, 54.91f, 44.65f, 54.91f, 32f);
        bezier3Path.lineTo(60f, 32f);
        bezier3Path.cubicTo(60f, 47.46f, 47.46f, 60f, 32f, 60f);
        bezier3Path.cubicTo(16.54f, 60f, 4f, 47.46f, 4f, 32f);
        bezier3Path.cubicTo(4f, 16.54f, 16.54f, 4f, 32f, 4f);
        bezier3Path.cubicTo(36.6f, 4f, 40.94f, 5.11f, 44.77f, 7.08f);
        bezier3Path.cubicTo(44.04f, 8.62f, 43.3f, 10.15f, 42.57f, 11.65f);
        bezier3Path.lineTo(42.56f, 11.67f);
        bezier3Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier3Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier3Path, paint);

        canvas.restore();
    }

    private static class CacheForYear {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawYear(Canvas canvas, int color) {
        WireStyleKit.drawYear(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawYear(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForYear.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForYear.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForYear.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier 2
        RectF bezier2Rect = CacheForYear.bezier2Rect;
        bezier2Rect.set(4f, 4f, 60f, 60f);
        Path bezier2Path = CacheForYear.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(32f, 9.09f);
        bezier2Path.cubicTo(19.35f, 9.09f, 9.09f, 19.35f, 9.09f, 32f);
        bezier2Path.cubicTo(9.09f, 44.65f, 19.35f, 54.91f, 32f, 54.91f);
        bezier2Path.cubicTo(44.65f, 54.91f, 54.91f, 44.65f, 54.91f, 32f);
        bezier2Path.lineTo(60f, 32f);
        bezier2Path.cubicTo(60f, 47.46f, 47.46f, 60f, 32f, 60f);
        bezier2Path.cubicTo(16.54f, 60f, 4f, 47.46f, 4f, 32f);
        bezier2Path.cubicTo(4f, 16.54f, 16.54f, 4f, 32f, 4f);
        bezier2Path.cubicTo(33.69f, 4f, 35.35f, 4.15f, 36.96f, 4.44f);
        bezier2Path.cubicTo(36.66f, 6.1f, 36.36f, 7.77f, 36.06f, 9.45f);
        bezier2Path.cubicTo(34.74f, 9.21f, 33.39f, 9.09f, 32f, 9.09f);
        bezier2Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier2Path, paint);

        // Bezier
        RectF bezierRect = CacheForYear.bezierRect;
        bezierRect.set(45.35f, 9f, 60f, 28.33f);
        Path bezierPath = CacheForYear.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(48.28f, 28.33f);
        bezierPath.cubicTo(48.07f, 28.33f, 47.14f, 28.31f, 46.92f, 28.27f);
        bezierPath.lineTo(46.92f, 25.64f);
        bezierPath.cubicTo(47.12f, 25.68f, 47.63f, 25.69f, 47.86f, 25.69f);
        bezierPath.cubicTo(49.31f, 25.69f, 50.12f, 25.18f, 50.57f, 23.87f);
        bezierPath.lineTo(50.74f, 23.25f);
        bezierPath.lineTo(45.35f, 9f);
        bezierPath.lineTo(49.1f, 9f);
        bezierPath.lineTo(52.63f, 20.07f);
        bezierPath.lineTo(52.87f, 20.07f);
        bezierPath.lineTo(56.39f, 9f);
        bezierPath.lineTo(60f, 9f);
        bezierPath.lineTo(54.55f, 23.63f);
        bezierPath.cubicTo(53.27f, 27.16f, 51.66f, 28.33f, 48.28f, 28.33f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForWeek {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawWeek(Canvas canvas, int color) {
        WireStyleKit.drawWeek(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawWeek(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForWeek.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForWeek.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForWeek.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier 2
        RectF bezier2Rect = CacheForWeek.bezier2Rect;
        bezier2Rect.set(41.38f, 12f, 61f, 26f);
        Path bezier2Path = CacheForWeek.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(61f, 12f);
        bezier2Path.lineTo(57.26f, 26f);
        bezier2Path.lineTo(53.96f, 26f);
        bezier2Path.lineTo(51.27f, 15.92f);
        bezier2Path.lineTo(51.05f, 15.92f);
        bezier2Path.lineTo(48.38f, 26f);
        bezier2Path.lineTo(45.12f, 26f);
        bezier2Path.lineTo(41.38f, 12f);
        bezier2Path.lineTo(44.53f, 12f);
        bezier2Path.lineTo(46.83f, 22.46f);
        bezier2Path.lineTo(47.05f, 22.46f);
        bezier2Path.lineTo(49.7f, 12f);
        bezier2Path.lineTo(52.7f, 12f);
        bezier2Path.lineTo(55.38f, 22.46f);
        bezier2Path.lineTo(55.59f, 22.46f);
        bezier2Path.lineTo(57.88f, 12f);
        bezier2Path.lineTo(61f, 12f);
        bezier2Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier2Path, paint);

        // Bezier
        RectF bezierRect = CacheForWeek.bezierRect;
        bezierRect.set(4f, 4f, 60f, 60f);
        Path bezierPath = CacheForWeek.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(32f, 9.09f);
        bezierPath.cubicTo(19.35f, 9.09f, 9.09f, 19.35f, 9.09f, 32f);
        bezierPath.cubicTo(9.09f, 44.65f, 19.35f, 54.91f, 32f, 54.91f);
        bezierPath.cubicTo(44.65f, 54.91f, 54.91f, 44.65f, 54.91f, 32f);
        bezierPath.lineTo(60f, 32f);
        bezierPath.cubicTo(60f, 47.46f, 47.46f, 60f, 32f, 60f);
        bezierPath.cubicTo(16.54f, 60f, 4f, 47.46f, 4f, 32f);
        bezierPath.cubicTo(4f, 16.54f, 16.54f, 4f, 32f, 4f);
        bezierPath.cubicTo(33.69f, 4f, 35.35f, 4.15f, 36.96f, 4.44f);
        bezierPath.cubicTo(36.66f, 6.1f, 36.36f, 7.77f, 36.06f, 9.45f);
        bezierPath.cubicTo(34.74f, 9.21f, 33.39f, 9.09f, 32f, 9.09f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForHour {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawHour(Canvas canvas, int color) {
        WireStyleKit.drawHour(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawHour(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForHour.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForHour.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForHour.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier 3
        RectF bezier3Rect = CacheForHour.bezier3Rect;
        bezier3Rect.set(43f, 7.5f, 55f, 27f);
        Path bezier3Path = CacheForHour.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(43f, 27f);
        bezier3Path.lineTo(43f, 7.5f);
        bezier3Path.lineTo(46.02f, 7.5f);
        bezier3Path.lineTo(46.02f, 15.21f);
        bezier3Path.lineTo(46.24f, 15.21f);
        bezier3Path.cubicTo(46.88f, 13.63f, 48.33f, 12.68f, 50.35f, 12.68f);
        bezier3Path.cubicTo(53.24f, 12.68f, 55f, 14.58f, 55f, 17.92f);
        bezier3Path.lineTo(55f, 27f);
        bezier3Path.lineTo(51.93f, 27f);
        bezier3Path.lineTo(51.93f, 18.68f);
        bezier3Path.cubicTo(51.93f, 16.55f, 50.99f, 15.46f, 49.21f, 15.46f);
        bezier3Path.cubicTo(47.19f, 15.46f, 46.07f, 16.82f, 46.07f, 18.84f);
        bezier3Path.lineTo(46.07f, 27f);
        bezier3Path.lineTo(43f, 27f);
        bezier3Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier3Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier3Path, paint);

        // Bezier
        RectF bezierRect = CacheForHour.bezierRect;
        bezierRect.set(4f, 4f, 60f, 60f);
        Path bezierPath = CacheForHour.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(32f, 9.09f);
        bezierPath.cubicTo(19.35f, 9.09f, 9.09f, 19.35f, 9.09f, 32f);
        bezierPath.cubicTo(9.09f, 44.65f, 19.35f, 54.91f, 32f, 54.91f);
        bezierPath.cubicTo(44.65f, 54.91f, 54.91f, 44.65f, 54.91f, 32f);
        bezierPath.lineTo(60f, 32f);
        bezierPath.cubicTo(60f, 47.46f, 47.46f, 60f, 32f, 60f);
        bezierPath.cubicTo(16.54f, 60f, 4f, 47.46f, 4f, 32f);
        bezierPath.cubicTo(4f, 16.54f, 16.54f, 4f, 32f, 4f);
        bezierPath.cubicTo(33.69f, 4f, 35.35f, 4.15f, 36.96f, 4.44f);
        bezierPath.cubicTo(36.66f, 6.1f, 36.36f, 7.77f, 36.06f, 9.45f);
        bezierPath.cubicTo(34.74f, 9.21f, 33.39f, 9.09f, 32f, 9.09f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForDay {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawDay(Canvas canvas, int color) {
        WireStyleKit.drawDay(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawDay(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForDay.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDay.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForDay.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier 2
        RectF bezier2Rect = CacheForDay.bezier2Rect;
        bezier2Rect.set(44.53f, 6f, 58f, 27.1f);
        Path bezier2Path = CacheForDay.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(50.32f, 27.1f);
        bezier2Path.cubicTo(46.75f, 27.1f, 44.53f, 24.1f, 44.53f, 19.32f);
        bezier2Path.cubicTo(44.53f, 14.56f, 46.77f, 11.57f, 50.32f, 11.57f);
        bezier2Path.cubicTo(52.25f, 11.57f, 53.84f, 12.56f, 54.59f, 14.21f);
        bezier2Path.lineTo(54.81f, 14.21f);
        bezier2Path.lineTo(54.81f, 6f);
        bezier2Path.lineTo(58f, 6f);
        bezier2Path.lineTo(58f, 26.85f);
        bezier2Path.lineTo(54.91f, 26.85f);
        bezier2Path.lineTo(54.91f, 24.47f);
        bezier2Path.lineTo(54.69f, 24.47f);
        bezier2Path.cubicTo(53.89f, 26.12f, 52.27f, 27.1f, 50.32f, 27.1f);
        bezier2Path.close();
        bezier2Path.moveTo(51.31f, 14.47f);
        bezier2Path.cubicTo(49.13f, 14.47f, 47.8f, 16.31f, 47.8f, 19.33f);
        bezier2Path.cubicTo(47.8f, 22.37f, 49.12f, 24.2f, 51.31f, 24.2f);
        bezier2Path.cubicTo(53.51f, 24.2f, 54.85f, 22.36f, 54.85f, 19.33f);
        bezier2Path.cubicTo(54.85f, 16.34f, 53.5f, 14.47f, 51.31f, 14.47f);
        bezier2Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier2Path, paint);

        // Bezier
        RectF bezierRect = CacheForDay.bezierRect;
        bezierRect.set(4f, 4f, 60f, 60f);
        Path bezierPath = CacheForDay.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(42.56f, 11.67f);
        bezierPath.cubicTo(39.4f, 10.02f, 35.81f, 9.09f, 32f, 9.09f);
        bezierPath.cubicTo(19.35f, 9.09f, 9.09f, 19.35f, 9.09f, 32f);
        bezierPath.cubicTo(9.09f, 44.65f, 19.35f, 54.91f, 32f, 54.91f);
        bezierPath.cubicTo(44.65f, 54.91f, 54.91f, 44.65f, 54.91f, 32f);
        bezierPath.lineTo(60f, 32f);
        bezierPath.cubicTo(60f, 47.46f, 47.46f, 60f, 32f, 60f);
        bezierPath.cubicTo(16.54f, 60f, 4f, 47.46f, 4f, 32f);
        bezierPath.cubicTo(4f, 16.54f, 16.54f, 4f, 32f, 4f);
        bezierPath.cubicTo(36.6f, 4f, 40.94f, 5.11f, 44.77f, 7.08f);
        bezierPath.cubicTo(44.04f, 8.62f, 43.3f, 10.15f, 42.57f, 11.65f);
        bezierPath.lineTo(42.56f, 11.67f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForSecond {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }

    public static void drawSecond(Canvas canvas, int color) {
        WireStyleKit.drawSecond(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawSecond(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForSecond.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSecond.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForSecond.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForSecond.bezierRect;
        bezierRect.set(4f, 4f, 60f, 60f);
        Path bezierPath = CacheForSecond.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(42.56f, 11.67f);
        bezierPath.cubicTo(39.4f, 10.02f, 35.81f, 9.09f, 32f, 9.09f);
        bezierPath.cubicTo(19.35f, 9.09f, 9.09f, 19.35f, 9.09f, 32f);
        bezierPath.cubicTo(9.09f, 44.65f, 19.35f, 54.91f, 32f, 54.91f);
        bezierPath.cubicTo(44.65f, 54.91f, 54.91f, 44.65f, 54.91f, 32f);
        bezierPath.lineTo(60f, 32f);
        bezierPath.cubicTo(60f, 47.46f, 47.46f, 60f, 32f, 60f);
        bezierPath.cubicTo(16.54f, 60f, 4f, 47.46f, 4f, 32f);
        bezierPath.cubicTo(4f, 16.54f, 16.54f, 4f, 32f, 4f);
        bezierPath.cubicTo(36.6f, 4f, 40.94f, 5.11f, 44.77f, 7.08f);
        bezierPath.cubicTo(44.04f, 8.62f, 43.3f, 10.15f, 42.57f, 11.65f);
        bezierPath.lineTo(42.56f, 11.67f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        // Bezier 2
        RectF bezier2Rect = CacheForSecond.bezier2Rect;
        bezier2Rect.set(48.53f, 11.5f, 60.5f, 26.12f);
        Path bezier2Path = CacheForSecond.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(48.89f, 15.8f);
        bezier2Path.cubicTo(48.89f, 13.26f, 51.21f, 11.5f, 54.53f, 11.5f);
        bezier2Path.cubicTo(57.87f, 11.5f, 59.97f, 12.98f, 60.2f, 15.53f);
        bezier2Path.lineTo(57.21f, 15.53f);
        bezier2Path.cubicTo(56.97f, 14.54f, 56.03f, 13.91f, 54.54f, 13.91f);
        bezier2Path.cubicTo(53.09f, 13.91f, 51.99f, 14.61f, 51.99f, 15.62f);
        bezier2Path.cubicTo(51.99f, 16.42f, 52.66f, 16.91f, 54.08f, 17.23f);
        bezier2Path.lineTo(56.56f, 17.79f);
        bezier2Path.cubicTo(59.25f, 18.4f, 60.5f, 19.55f, 60.5f, 21.62f);
        bezier2Path.cubicTo(60.5f, 24.32f, 58.02f, 26.12f, 54.5f, 26.12f);
        bezier2Path.cubicTo(50.99f, 26.12f, 48.78f, 24.6f, 48.53f, 22.05f);
        bezier2Path.lineTo(51.68f, 22.05f);
        bezier2Path.cubicTo(51.99f, 23.09f, 52.98f, 23.7f, 54.58f, 23.7f);
        bezier2Path.cubicTo(56.19f, 23.7f, 57.31f, 23f, 57.31f, 21.96f);
        bezier2Path.cubicTo(57.31f, 21.16f, 56.7f, 20.66f, 55.37f, 20.36f);
        bezier2Path.lineTo(52.87f, 19.79f);
        bezier2Path.cubicTo(50.17f, 19.17f, 48.89f, 17.92f, 48.89f, 15.8f);
        bezier2Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier2Path, paint);

        canvas.restore();
    }

    private static class CacheForMonth {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }

    public static void drawMonth(Canvas canvas, int color) {
        WireStyleKit.drawMonth(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawMonth(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForMonth.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMonth.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForMonth.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForMonth.bezierRect;
        bezierRect.set(44.04f, 7f, 64f, 27f);
        Path bezierPath = CacheForMonth.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(64f, 27f);
        bezierPath.lineTo(60.79f, 27f);
        bezierPath.lineTo(60.79f, 12.93f);
        bezierPath.lineTo(60.6f, 12.93f);
        bezierPath.lineTo(55.25f, 26.22f);
        bezierPath.lineTo(52.79f, 26.22f);
        bezierPath.lineTo(47.45f, 12.93f);
        bezierPath.lineTo(47.26f, 12.93f);
        bezierPath.lineTo(47.26f, 27f);
        bezierPath.lineTo(44.04f, 27f);
        bezierPath.lineTo(44.04f, 7f);
        bezierPath.lineTo(48.09f, 7f);
        bezierPath.lineTo(53.9f, 21.57f);
        bezierPath.lineTo(54.14f, 21.57f);
        bezierPath.lineTo(59.96f, 7f);
        bezierPath.lineTo(64f, 7f);
        bezierPath.lineTo(64f, 27f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        // Bezier 2
        RectF bezier2Rect = CacheForMonth.bezier2Rect;
        bezier2Rect.set(4f, 4f, 60f, 60f);
        Path bezier2Path = CacheForMonth.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(32f, 9.09f);
        bezier2Path.cubicTo(19.35f, 9.09f, 9.09f, 19.35f, 9.09f, 32f);
        bezier2Path.cubicTo(9.09f, 44.65f, 19.35f, 54.91f, 32f, 54.91f);
        bezier2Path.cubicTo(44.65f, 54.91f, 54.91f, 44.65f, 54.91f, 32f);
        bezier2Path.lineTo(60f, 32f);
        bezier2Path.cubicTo(60f, 47.46f, 47.46f, 60f, 32f, 60f);
        bezier2Path.cubicTo(16.54f, 60f, 4f, 47.46f, 4f, 32f);
        bezier2Path.cubicTo(4f, 16.54f, 16.54f, 4f, 32f, 4f);
        bezier2Path.cubicTo(33.69f, 4f, 35.35f, 4.15f, 36.96f, 4.44f);
        bezier2Path.cubicTo(36.66f, 6.1f, 36.36f, 7.77f, 36.06f, 9.45f);
        bezier2Path.cubicTo(34.74f, 9.21f, 33.39f, 9.09f, 32f, 9.09f);
        bezier2Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezier2Path, paint);

        canvas.restore();
    }

    private static class CacheForTimedMessages {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF timedMessageRect = new RectF();
        private static Path timedMessagePath = new Path();
    }

    public static void drawTimedMessages(Canvas canvas, int color) {
        WireStyleKit.drawTimedMessages(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawTimedMessages(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForTimedMessages.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTimedMessages.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForTimedMessages.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Timed message
        RectF timedMessageRect = CacheForTimedMessages.timedMessageRect;
        timedMessageRect.set(5.5f, 0f, 62f, 64f);
        Path timedMessagePath = CacheForTimedMessages.timedMessagePath;
        timedMessagePath.reset();
        timedMessagePath.moveTo(35.51f, 8f);
        timedMessagePath.lineTo(35.51f, 12.31f);
        timedMessagePath.cubicTo(47.97f, 14.23f, 57.51f, 25f, 57.51f, 38f);
        timedMessagePath.cubicTo(57.51f, 52.36f, 45.87f, 64f, 31.51f, 64f);
        timedMessagePath.cubicTo(17.14f, 64f, 5.5f, 52.36f, 5.5f, 38f);
        timedMessagePath.cubicTo(5.5f, 25f, 15.04f, 14.23f, 27.51f, 12.31f);
        timedMessagePath.lineTo(27.51f, 8f);
        timedMessagePath.lineTo(25.51f, 8f);
        timedMessagePath.cubicTo(23.3f, 8f, 21.5f, 6.21f, 21.5f, 4f);
        timedMessagePath.cubicTo(21.5f, 1.79f, 23.3f, 0f, 25.51f, 0f);
        timedMessagePath.lineTo(37.51f, 0f);
        timedMessagePath.cubicTo(39.72f, 0f, 41.51f, 1.79f, 41.51f, 4f);
        timedMessagePath.cubicTo(41.51f, 6.21f, 39.72f, 8f, 37.51f, 8f);
        timedMessagePath.lineTo(35.51f, 8f);
        timedMessagePath.close();
        timedMessagePath.moveTo(31.51f, 56f);
        timedMessagePath.cubicTo(41.45f, 56f, 49.51f, 47.94f, 49.51f, 38f);
        timedMessagePath.cubicTo(49.51f, 28.06f, 41.45f, 20f, 31.51f, 20f);
        timedMessagePath.cubicTo(21.56f, 20f, 13.5f, 28.06f, 13.5f, 38f);
        timedMessagePath.cubicTo(13.5f, 47.94f, 21.56f, 56f, 31.51f, 56f);
        timedMessagePath.close();
        timedMessagePath.moveTo(31.51f, 52f);
        timedMessagePath.cubicTo(23.77f, 52f, 17.5f, 45.73f, 17.5f, 38f);
        timedMessagePath.cubicTo(17.5f, 30.27f, 23.77f, 24f, 31.51f, 24f);
        timedMessagePath.lineTo(31.51f, 38f);
        timedMessagePath.lineTo(41.44f, 47.87f);
        timedMessagePath.cubicTo(38.91f, 50.42f, 35.39f, 52f, 31.51f, 52f);
        timedMessagePath.close();
        timedMessagePath.moveTo(58f, 10.83f);
        timedMessagePath.lineTo(60.83f, 13.66f);
        timedMessagePath.cubicTo(62.39f, 15.22f, 62.39f, 17.75f, 60.83f, 19.31f);
        timedMessagePath.cubicTo(59.27f, 20.88f, 56.73f, 20.88f, 55.17f, 19.31f);
        timedMessagePath.lineTo(52.34f, 16.49f);
        timedMessagePath.cubicTo(50.78f, 14.92f, 50.78f, 12.39f, 52.34f, 10.83f);
        timedMessagePath.cubicTo(53.9f, 9.27f, 56.44f, 9.27f, 58f, 10.83f);
        timedMessagePath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(timedMessagePath, paint);

        canvas.restore();
    }

    private static class CacheForMentions {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF mentionRect = new RectF();
        private static Path mentionPath = new Path();
    }

    public static void drawMentions(Canvas canvas, int color) {
        WireStyleKit.drawMentions(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawMentions(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForMentions.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMentions.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForMentions.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Mention
        RectF mentionRect = CacheForMentions.mentionRect;
        mentionRect.set(0f, 0f, 64f, 64f);
        Path mentionPath = CacheForMentions.mentionPath;
        mentionPath.reset();
        mentionPath.moveTo(32.19f, 24.81f);
        mentionPath.cubicTo(28.63f, 24.81f, 26.52f, 27.86f, 26.52f, 32.95f);
        mentionPath.cubicTo(26.52f, 38.04f, 28.63f, 41.09f, 32.19f, 41.09f);
        mentionPath.cubicTo(35.78f, 41.09f, 37.97f, 38f, 37.97f, 32.95f);
        mentionPath.cubicTo(37.97f, 27.9f, 35.74f, 24.81f, 32.19f, 24.81f);
        mentionPath.close();
        mentionPath.moveTo(33.44f, 0f);
        mentionPath.cubicTo(52.27f, 0f, 64f, 11.83f, 64f, 29.2f);
        mentionPath.cubicTo(64f, 41.53f, 59.06f, 49.15f, 49.34f, 49.15f);
        mentionPath.cubicTo(44.3f, 49.15f, 40.7f, 46.96f, 39.65f, 43.24f);
        mentionPath.lineTo(38.91f, 43.24f);
        mentionPath.cubicTo(37.3f, 47.19f, 34.26f, 49.19f, 29.77f, 49.19f);
        mentionPath.cubicTo(21.64f, 49.19f, 16.25f, 42.61f, 16.25f, 32.68f);
        mentionPath.cubicTo(16.25f, 23.17f, 21.45f, 16.75f, 29.18f, 16.75f);
        mentionPath.cubicTo(32.69f, 16.75f, 35.57f, 18.16f, 37.35f, 20.65f);
        mentionPath.cubicTo(37.55f, 20.94f, 37.81f, 21.38f, 38.11f, 21.98f);
        mentionPath.lineTo(38.11f, 21.98f);
        mentionPath.cubicTo(38.22f, 22.18f, 38.43f, 22.31f, 38.65f, 22.31f);
        mentionPath.lineTo(38.65f, 22.31f);
        mentionPath.cubicTo(38.86f, 22.31f, 39.02f, 22.14f, 39.02f, 21.93f);
        mentionPath.lineTo(39.02f, 21.85f);
        mentionPath.lineTo(39.02f, 21.69f);
        mentionPath.cubicTo(39.02f, 19.48f, 40.81f, 17.69f, 43.02f, 17.69f);
        mentionPath.lineTo(44.01f, 17.69f);
        mentionPath.cubicTo(46.22f, 17.69f, 48.01f, 19.48f, 48.01f, 21.69f);
        mentionPath.lineTo(48.01f, 37.57f);
        mentionPath.cubicTo(48.01f, 40.35f, 49.26f, 41.99f, 51.37f, 41.99f);
        mentionPath.cubicTo(54.8f, 41.99f, 56.41f, 37.36f, 56.41f, 30.08f);
        mentionPath.cubicTo(56.41f, 15.92f, 47.73f, 6.89f, 33.32f, 6.89f);
        mentionPath.cubicTo(18.28f, 6.89f, 8.05f, 17.45f, 8.05f, 32.83f);
        mentionPath.cubicTo(8.05f, 48.41f, 18.54f, 56.96f, 35.1f, 56.96f);
        mentionPath.cubicTo(36.76f, 56.96f, 38.44f, 56.86f, 39.96f, 56.69f);
        mentionPath.cubicTo(39.99f, 56.69f, 40.34f, 56.62f, 41.02f, 56.5f);
        mentionPath.lineTo(41.02f, 56.5f);
        mentionPath.cubicTo(42.59f, 56.21f, 44.1f, 57.25f, 44.39f, 58.82f);
        mentionPath.cubicTo(44.42f, 58.99f, 44.44f, 59.17f, 44.44f, 59.34f);
        mentionPath.lineTo(44.44f, 59.34f);
        mentionPath.cubicTo(44.44f, 61.43f, 42.93f, 63.2f, 40.87f, 63.53f);
        mentionPath.cubicTo(40.55f, 63.58f, 40.26f, 63.62f, 39.99f, 63.65f);
        mentionPath.cubicTo(39.79f, 63.68f, 35.99f, 64f, 34.24f, 64f);
        mentionPath.cubicTo(13.81f, 64f, 0f, 52.16f, 0f, 32.64f);
        mentionPath.cubicTo(0f, 13.34f, 13.67f, 0f, 33.44f, 0f);
        mentionPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        mentionPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(mentionPath, paint);

        canvas.restore();
    }

    private static class CacheForCamera {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawCamera(Canvas canvas, int color) {
        WireStyleKit.drawCamera(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawCamera(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForCamera.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCamera.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForCamera.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForCamera.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForCamera.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(18.29f, 8f);
        bezierPath.lineTo(19.16f, 3.94f);
        bezierPath.cubicTo(19.62f, 1.76f, 21.8f, 0f, 23.96f, 0f);
        bezierPath.lineTo(40.04f, 0f);
        bezierPath.cubicTo(42.23f, 0f, 44.37f, 1.74f, 44.84f, 3.94f);
        bezierPath.lineTo(45.71f, 8f);
        bezierPath.lineTo(56.02f, 8f);
        bezierPath.cubicTo(60.43f, 8f, 64f, 11.59f, 64f, 16.02f);
        bezierPath.lineTo(64f, 55.98f);
        bezierPath.cubicTo(64f, 60.41f, 60.42f, 64f, 56.02f, 64f);
        bezierPath.lineTo(7.98f, 64f);
        bezierPath.cubicTo(3.57f, 64f, 0f, 60.41f, 0f, 55.98f);
        bezierPath.lineTo(0f, 16.02f);
        bezierPath.cubicTo(0f, 11.59f, 3.58f, 8f, 7.98f, 8f);
        bezierPath.lineTo(18.29f, 8f);
        bezierPath.close();
        bezierPath.moveTo(32f, 16f);
        bezierPath.cubicTo(20.95f, 16f, 12f, 24.96f, 12f, 36f);
        bezierPath.cubicTo(12f, 47.05f, 20.95f, 56f, 32f, 56f);
        bezierPath.cubicTo(43.05f, 56f, 52f, 47.05f, 52f, 36f);
        bezierPath.cubicTo(52f, 24.96f, 43.05f, 16f, 32f, 16f);
        bezierPath.close();
        bezierPath.moveTo(32f, 24f);
        bezierPath.cubicTo(38.63f, 24f, 44f, 29.37f, 44f, 36f);
        bezierPath.cubicTo(44f, 42.63f, 38.63f, 48f, 32f, 48f);
        bezierPath.cubicTo(25.37f, 48f, 20f, 42.63f, 20f, 36f);
        bezierPath.cubicTo(20f, 29.37f, 25.37f, 24f, 32f, 24f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForSketch {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawSketch(Canvas canvas, int color) {
        WireStyleKit.drawSketch(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawSketch(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForSketch.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSketch.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForSketch.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForSketch.bezierRect;
        bezierRect.set(-0f, 0f, 64f, 64f);
        Path bezierPath = CacheForSketch.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(54.71f, 55.39f);
        bezierPath.cubicTo(58.99f, 53.14f, 61.84f, 51.05f, 63.11f, 48.71f);
        bezierPath.cubicTo(65.78f, 43.81f, 62.12f, 40.48f, 56.36f, 39.69f);
        bezierPath.cubicTo(51.83f, 39.06f, 47.69f, 39.94f, 33.03f, 43.85f);
        bezierPath.cubicTo(32.15f, 44.09f, 31.45f, 44.27f, 30.77f, 44.45f);
        bezierPath.cubicTo(21.71f, 46.84f, 16.34f, 47.9f, 12.38f, 47.88f);
        bezierPath.cubicTo(8.9f, 47.85f, 8.43f, 47.48f, 8.7f, 45.52f);
        bezierPath.cubicTo(8.65f, 45.88f, 8.71f, 45.82f, 9.26f, 45.49f);
        bezierPath.cubicTo(10.3f, 44.87f, 11.96f, 44.23f, 14.18f, 43.6f);
        bezierPath.cubicTo(18.03f, 42.51f, 22.24f, 41.71f, 31.38f, 40.19f);
        bezierPath.cubicTo(32.08f, 40.07f, 32.08f, 40.07f, 32.78f, 39.95f);
        bezierPath.cubicTo(43.07f, 38.25f, 47.91f, 37.3f, 52.51f, 35.89f);
        bezierPath.cubicTo(59.98f, 33.61f, 64.18f, 30.6f, 63.64f, 25.29f);
        bezierPath.cubicTo(63.11f, 20.17f, 58.7f, 19.12f, 50.6f, 19.29f);
        bezierPath.cubicTo(46.01f, 19.39f, 40.9f, 19.89f, 31.34f, 21.05f);
        bezierPath.cubicTo(30.72f, 21.12f, 30.72f, 21.12f, 30.09f, 21.2f);
        bezierPath.cubicTo(22.72f, 22.09f, 18.72f, 22.55f, 15.59f, 22.8f);
        bezierPath.cubicTo(19.29f, 21.71f, 23.99f, 20.68f, 31.14f, 19.28f);
        bezierPath.cubicTo(32.19f, 19.08f, 33.35f, 18.85f, 35.54f, 18.43f);
        bezierPath.cubicTo(37.33f, 18.08f, 38.61f, 17.83f, 39.86f, 17.58f);
        bezierPath.cubicTo(57.16f, 14.12f, 61.72f, 12.58f, 60.63f, 6.28f);
        bezierPath.cubicTo(59.65f, 0.62f, 50.72f, -0.46f, 35.49f, 0.15f);
        bezierPath.cubicTo(22.8f, 0.66f, 10.44f, 2.69f, 3.77f, 5.77f);
        bezierPath.cubicTo(1.73f, 6.71f, 0.84f, 9.12f, 1.79f, 11.15f);
        bezierPath.cubicTo(2.75f, 13.17f, 5.18f, 14.05f, 7.22f, 13.11f);
        bezierPath.cubicTo(12.68f, 10.59f, 24.12f, 8.71f, 35.82f, 8.24f);
        bezierPath.cubicTo(39.15f, 8.11f, 44.93f, 8.2f, 44.93f, 8.2f);
        bezierPath.cubicTo(43.06f, 8.65f, 40.86f, 9.12f, 38.24f, 9.64f);
        bezierPath.cubicTo(37.01f, 9.89f, 35.74f, 10.14f, 33.97f, 10.48f);
        bezierPath.cubicTo(31.78f, 10.91f, 30.62f, 11.13f, 29.56f, 11.34f);
        bezierPath.cubicTo(6.94f, 15.75f, -0f, 18f, 0f, 25.22f);
        bezierPath.cubicTo(0f, 30.64f, 4.13f, 31.45f, 12.47f, 31.1f);
        bezierPath.cubicTo(16.72f, 30.92f, 20.53f, 30.52f, 31.09f, 29.23f);
        bezierPath.cubicTo(31.71f, 29.16f, 31.71f, 29.16f, 32.33f, 29.08f);
        bezierPath.cubicTo(41.61f, 27.96f, 46.56f, 27.47f, 50.77f, 27.39f);
        bezierPath.cubicTo(51.35f, 27.37f, 51.89f, 27.37f, 52.4f, 27.38f);
        bezierPath.cubicTo(51.71f, 27.63f, 50.95f, 27.89f, 50.1f, 28.15f);
        bezierPath.cubicTo(45.98f, 29.41f, 41.33f, 30.33f, 31.43f, 31.97f);
        bezierPath.cubicTo(30.73f, 32.09f, 30.73f, 32.09f, 30.02f, 32.2f);
        bezierPath.cubicTo(7.3f, 35.98f, 1.54f, 37.61f, 0.6f, 44.44f);
        bezierPath.cubicTo(-0.43f, 52.01f, 4.46f, 55.92f, 12.33f, 55.97f);
        bezierPath.cubicTo(17.28f, 56.01f, 23.08f, 54.86f, 32.87f, 52.28f);
        bezierPath.cubicTo(33.56f, 52.1f, 34.27f, 51.91f, 35.16f, 51.67f);
        bezierPath.cubicTo(43.87f, 49.35f, 51.75f, 47.78f, 51.75f, 47.78f);
        bezierPath.cubicTo(51.83f, 47.78f, 51.09f, 48.13f, 50.87f, 48.24f);
        bezierPath.cubicTo(44.4f, 51.65f, 34.64f, 55.04f, 28.67f, 55.95f);
        bezierPath.cubicTo(26.44f, 56.29f, 24.91f, 58.36f, 25.25f, 60.57f);
        bezierPath.cubicTo(25.6f, 62.78f, 27.68f, 64.29f, 29.91f, 63.95f);
        bezierPath.cubicTo(36.84f, 62.9f, 47.46f, 59.21f, 54.71f, 55.39f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForGIF {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawGIF(Canvas canvas, int color) {
        WireStyleKit.drawGIF(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawGIF(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForGIF.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForGIF.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForGIF.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForGIF.bezierRect;
        bezierRect.set(0f, 8f, 64f, 57.4f);
        Path bezierPath = CacheForGIF.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(48f, 36.68f);
        bezierPath.lineTo(48f, 56.6f);
        bezierPath.lineTo(40f, 56.6f);
        bezierPath.lineTo(40f, 8.8f);
        bezierPath.lineTo(48f, 8.8f);
        bezierPath.lineTo(64f, 8.8f);
        bezierPath.lineTo(64f, 16.76f);
        bezierPath.lineTo(48f, 16.76f);
        bezierPath.lineTo(48f, 28.72f);
        bezierPath.lineTo(60f, 28.72f);
        bezierPath.lineTo(60f, 36.68f);
        bezierPath.lineTo(48f, 36.68f);
        bezierPath.close();
        bezierPath.moveTo(28f, 8.8f);
        bezierPath.lineTo(36f, 8.8f);
        bezierPath.lineTo(36f, 56.6f);
        bezierPath.lineTo(28f, 56.6f);
        bezierPath.lineTo(28f, 8.8f);
        bezierPath.close();
        bezierPath.moveTo(20f, 28.72f);
        bezierPath.lineTo(24f, 28.72f);
        bezierPath.lineTo(24f, 45.44f);
        bezierPath.cubicTo(24f, 52.05f, 18.61f, 57.4f, 12f, 57.4f);
        bezierPath.cubicTo(5.37f, 57.4f, 0f, 52.02f, 0f, 45.44f);
        bezierPath.lineTo(0f, 19.96f);
        bezierPath.cubicTo(0f, 13.35f, 5.39f, 8f, 12f, 8f);
        bezierPath.cubicTo(18.63f, 8f, 24f, 13.38f, 24f, 19.96f);
        bezierPath.lineTo(24f, 20.75f);
        bezierPath.lineTo(16f, 20.75f);
        bezierPath.lineTo(16f, 19.96f);
        bezierPath.cubicTo(16f, 17.77f, 14.2f, 15.97f, 12f, 15.97f);
        bezierPath.cubicTo(9.8f, 15.97f, 8f, 17.76f, 8f, 19.96f);
        bezierPath.lineTo(8f, 45.44f);
        bezierPath.cubicTo(8f, 47.63f, 9.8f, 49.43f, 12f, 49.43f);
        bezierPath.cubicTo(14.2f, 49.43f, 16f, 47.64f, 16f, 45.44f);
        bezierPath.lineTo(16f, 36.68f);
        bezierPath.lineTo(12f, 36.68f);
        bezierPath.lineTo(12f, 28.72f);
        bezierPath.lineTo(20f, 28.72f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForVoiceMemo {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawVoiceMemo(Canvas canvas, int color) {
        WireStyleKit.drawVoiceMemo(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawVoiceMemo(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForVoiceMemo.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForVoiceMemo.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForVoiceMemo.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForVoiceMemo.bezierRect;
        bezierRect.set(8f, 0f, 56f, 64f);
        Path bezierPath = CacheForVoiceMemo.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(50.3f, 47.84f);
        bezierPath.lineTo(56f, 53.5f);
        bezierPath.cubicTo(50.11f, 59.94f, 41.55f, 64f, 32f, 64f);
        bezierPath.cubicTo(22.45f, 64f, 13.89f, 59.94f, 8f, 53.5f);
        bezierPath.lineTo(8f, 53.5f);
        bezierPath.lineTo(13.7f, 47.84f);
        bezierPath.cubicTo(18.13f, 52.83f, 24.68f, 56f, 32f, 56f);
        bezierPath.cubicTo(39.32f, 56f, 45.87f, 52.83f, 50.3f, 47.84f);
        bezierPath.lineTo(50.3f, 47.84f);
        bezierPath.close();
        bezierPath.moveTo(32f, 48f);
        bezierPath.cubicTo(40.91f, 48f, 48.1f, 40.92f, 48.1f, 32.27f);
        bezierPath.lineTo(48.1f, 15.74f);
        bezierPath.cubicTo(48.1f, 7.08f, 40.91f, 0f, 32f, 0f);
        bezierPath.cubicTo(23.09f, 0f, 15.9f, 7.08f, 15.9f, 15.74f);
        bezierPath.lineTo(15.9f, 32.27f);
        bezierPath.cubicTo(15.9f, 40.92f, 23.09f, 48f, 32f, 48f);
        bezierPath.lineTo(32f, 48f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForMore {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawMore(Canvas canvas, int color) {
        WireStyleKit.drawMore(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawMore(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForMore.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMore.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForMore.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForMore.bezierRect;
        bezierRect.set(0f, 24f, 64f, 40f);
        Path bezierPath = CacheForMore.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(8f, 40f);
        bezierPath.cubicTo(12.42f, 40f, 16f, 36.42f, 16f, 32f);
        bezierPath.cubicTo(16f, 27.58f, 12.42f, 24f, 8f, 24f);
        bezierPath.cubicTo(3.58f, 24f, 0f, 27.58f, 0f, 32f);
        bezierPath.cubicTo(0f, 36.42f, 3.58f, 40f, 8f, 40f);
        bezierPath.lineTo(8f, 40f);
        bezierPath.close();
        bezierPath.moveTo(56f, 40f);
        bezierPath.cubicTo(60.42f, 40f, 64f, 36.42f, 64f, 32f);
        bezierPath.cubicTo(64f, 27.58f, 60.42f, 24f, 56f, 24f);
        bezierPath.cubicTo(51.58f, 24f, 48f, 27.58f, 48f, 32f);
        bezierPath.cubicTo(48f, 36.42f, 51.58f, 40f, 56f, 40f);
        bezierPath.lineTo(56f, 40f);
        bezierPath.close();
        bezierPath.moveTo(32f, 40f);
        bezierPath.cubicTo(36.42f, 40f, 40f, 36.42f, 40f, 32f);
        bezierPath.cubicTo(40f, 27.58f, 36.42f, 24f, 32f, 24f);
        bezierPath.cubicTo(27.58f, 24f, 24f, 27.58f, 24f, 32f);
        bezierPath.cubicTo(24f, 36.42f, 27.58f, 40f, 32f, 40f);
        bezierPath.lineTo(32f, 40f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForPing {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawPing(Canvas canvas, int color) {
        WireStyleKit.drawPing(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawPing(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForPing.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForPing.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForPing.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForPing.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForPing.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(23.8f, 17.09f);
        bezierPath.cubicTo(24.38f, 19.26f, 26.61f, 20.55f, 28.78f, 19.97f);
        bezierPath.cubicTo(30.94f, 19.38f, 32.23f, 17.15f, 31.65f, 14.99f);
        bezierPath.lineTo(28.44f, 3.01f);
        bezierPath.cubicTo(27.86f, 0.85f, 25.63f, -0.44f, 23.46f, 0.14f);
        bezierPath.cubicTo(21.29f, 0.72f, 20.01f, 2.95f, 20.59f, 5.12f);
        bezierPath.lineTo(23.8f, 17.09f);
        bezierPath.lineTo(23.8f, 17.09f);
        bezierPath.lineTo(23.8f, 17.09f);
        bezierPath.close();
        bezierPath.moveTo(40.2f, 46.91f);
        bezierPath.cubicTo(39.62f, 44.74f, 37.39f, 43.45f, 35.22f, 44.04f);
        bezierPath.cubicTo(33.06f, 44.62f, 31.77f, 46.85f, 32.35f, 49.01f);
        bezierPath.lineTo(35.56f, 60.99f);
        bezierPath.cubicTo(36.14f, 63.15f, 38.37f, 64.44f, 40.54f, 63.86f);
        bezierPath.cubicTo(42.71f, 63.28f, 43.99f, 61.05f, 43.41f, 58.88f);
        bezierPath.lineTo(40.2f, 46.91f);
        bezierPath.lineTo(40.2f, 46.91f);
        bezierPath.lineTo(40.2f, 46.91f);
        bezierPath.close();
        bezierPath.moveTo(14.99f, 31.65f);
        bezierPath.cubicTo(17.15f, 32.23f, 19.38f, 30.94f, 19.97f, 28.78f);
        bezierPath.cubicTo(20.55f, 26.61f, 19.26f, 24.38f, 17.09f, 23.8f);
        bezierPath.lineTo(5.12f, 20.59f);
        bezierPath.cubicTo(2.95f, 20.01f, 0.72f, 21.29f, 0.14f, 23.46f);
        bezierPath.cubicTo(-0.44f, 25.63f, 0.85f, 27.86f, 3.01f, 28.44f);
        bezierPath.lineTo(14.99f, 31.65f);
        bezierPath.lineTo(14.99f, 31.65f);
        bezierPath.lineTo(14.99f, 31.65f);
        bezierPath.close();
        bezierPath.moveTo(49.01f, 32.35f);
        bezierPath.cubicTo(46.85f, 31.77f, 44.62f, 33.06f, 44.03f, 35.22f);
        bezierPath.cubicTo(43.45f, 37.39f, 44.74f, 39.62f, 46.91f, 40.2f);
        bezierPath.lineTo(58.88f, 43.41f);
        bezierPath.cubicTo(61.05f, 43.99f, 63.28f, 42.71f, 63.86f, 40.54f);
        bezierPath.cubicTo(64.44f, 38.37f, 63.15f, 36.14f, 60.99f, 35.56f);
        bezierPath.lineTo(49.01f, 32.35f);
        bezierPath.lineTo(49.01f, 32.35f);
        bezierPath.lineTo(49.01f, 32.35f);
        bezierPath.close();
        bezierPath.moveTo(23.19f, 46.56f);
        bezierPath.cubicTo(24.78f, 44.97f, 24.78f, 42.4f, 23.19f, 40.81f);
        bezierPath.cubicTo(21.6f, 39.22f, 19.03f, 39.22f, 17.44f, 40.81f);
        bezierPath.lineTo(8.68f, 49.57f);
        bezierPath.cubicTo(7.09f, 51.16f, 7.09f, 53.74f, 8.68f, 55.32f);
        bezierPath.cubicTo(10.26f, 56.91f, 12.84f, 56.91f, 14.43f, 55.32f);
        bezierPath.lineTo(23.19f, 46.56f);
        bezierPath.lineTo(23.19f, 46.56f);
        bezierPath.lineTo(23.19f, 46.56f);
        bezierPath.close();
        bezierPath.moveTo(40.81f, 17.44f);
        bezierPath.cubicTo(39.22f, 19.03f, 39.22f, 21.6f, 40.81f, 23.19f);
        bezierPath.cubicTo(42.4f, 24.78f, 44.97f, 24.78f, 46.56f, 23.19f);
        bezierPath.lineTo(55.32f, 14.43f);
        bezierPath.cubicTo(56.91f, 12.84f, 56.91f, 10.26f, 55.32f, 8.68f);
        bezierPath.cubicTo(53.74f, 7.09f, 51.16f, 7.09f, 49.57f, 8.68f);
        bezierPath.lineTo(40.81f, 17.44f);
        bezierPath.lineTo(40.81f, 17.44f);
        bezierPath.lineTo(40.81f, 17.44f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForAttachement {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawAttachement(Canvas canvas, int color) {
        WireStyleKit.drawAttachement(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawAttachement(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForAttachement.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAttachement.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForAttachement.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForAttachement.bezierRect;
        bezierRect.set(4f, 0f, 60f, 64f);
        Path bezierPath = CacheForAttachement.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(10.53f, 30.8f);
        bezierPath.lineTo(29.48f, 11.68f);
        bezierPath.cubicTo(34.7f, 6.41f, 43.2f, 6.41f, 48.42f, 11.68f);
        bezierPath.cubicTo(53.65f, 16.96f, 53.66f, 25.51f, 48.42f, 30.8f);
        bezierPath.lineTo(43.01f, 36.26f);
        bezierPath.lineTo(25.41f, 54.02f);
        bezierPath.cubicTo(22.43f, 57.03f, 17.58f, 57.03f, 14.59f, 54.01f);
        bezierPath.cubicTo(11.6f, 51f, 11.6f, 46.11f, 14.59f, 43.09f);
        bezierPath.lineTo(20.01f, 37.62f);
        bezierPath.lineTo(37.62f, 19.85f);
        bezierPath.cubicTo(38.36f, 19.11f, 39.54f, 19.11f, 40.3f, 19.87f);
        bezierPath.cubicTo(41.06f, 20.64f, 41.06f, 21.84f, 40.32f, 22.58f);
        bezierPath.lineTo(21.33f, 41.75f);
        bezierPath.cubicTo(19.84f, 43.26f, 19.84f, 45.71f, 21.33f, 47.21f);
        bezierPath.cubicTo(22.83f, 48.72f, 25.25f, 48.72f, 26.74f, 47.21f);
        bezierPath.lineTo(45.74f, 28.04f);
        bezierPath.cubicTo(49.47f, 24.27f, 49.45f, 18.18f, 45.71f, 14.41f);
        bezierPath.cubicTo(41.97f, 10.63f, 35.94f, 10.62f, 32.21f, 14.39f);
        bezierPath.lineTo(14.6f, 32.16f);
        bezierPath.lineTo(9.18f, 37.63f);
        bezierPath.cubicTo(3.2f, 43.66f, 3.2f, 53.44f, 9.18f, 59.48f);
        bezierPath.cubicTo(15.15f, 65.5f, 24.85f, 65.51f, 30.83f, 59.48f);
        bezierPath.lineTo(48.42f, 41.73f);
        bezierPath.lineTo(53.83f, 36.26f);
        bezierPath.cubicTo(62.06f, 27.96f, 62.05f, 14.52f, 53.83f, 6.22f);
        bezierPath.cubicTo(45.62f, -2.07f, 32.28f, -2.08f, 24.07f, 6.22f);
        bezierPath.lineTo(5.12f, 25.34f);
        bezierPath.cubicTo(3.63f, 26.85f, 3.63f, 29.29f, 5.12f, 30.8f);
        bezierPath.cubicTo(6.62f, 32.31f, 9.04f, 32.31f, 10.53f, 30.8f);
        bezierPath.lineTo(10.53f, 30.8f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForLocation {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawLocation(Canvas canvas, int color) {
        WireStyleKit.drawLocation(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawLocation(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForLocation.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLocation.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForLocation.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForLocation.bezierRect;
        bezierRect.set(8f, 0f, 56f, 64f);
        Path bezierPath = CacheForLocation.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(56f, 24f);
        bezierPath.cubicTo(56f, 10.75f, 45.25f, 0f, 32f, 0f);
        bezierPath.cubicTo(18.75f, 0f, 8f, 10.75f, 8f, 24f);
        bezierPath.cubicTo(8f, 48f, 32f, 64f, 32f, 64f);
        bezierPath.cubicTo(32f, 64f, 56f, 48f, 56f, 24f);
        bezierPath.lineTo(56f, 24f);
        bezierPath.close();
        bezierPath.moveTo(32f, 36f);
        bezierPath.cubicTo(38.63f, 36f, 44f, 30.63f, 44f, 24f);
        bezierPath.cubicTo(44f, 17.37f, 38.63f, 12f, 32f, 12f);
        bezierPath.cubicTo(25.37f, 12f, 20f, 17.37f, 20f, 24f);
        bezierPath.cubicTo(20f, 30.63f, 25.37f, 36f, 32f, 36f);
        bezierPath.lineTo(32f, 36f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForVideoMessage {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawVideoMessage(Canvas canvas, int color) {
        WireStyleKit.drawVideoMessage(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawVideoMessage(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForVideoMessage.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForVideoMessage.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForVideoMessage.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForVideoMessage.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForVideoMessage.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(32f, 64f);
        bezierPath.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
        bezierPath.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
        bezierPath.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
        bezierPath.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
        bezierPath.close();
        bezierPath.moveTo(32f, 58f);
        bezierPath.cubicTo(46.36f, 58f, 58f, 46.36f, 58f, 32f);
        bezierPath.cubicTo(58f, 17.64f, 46.36f, 6f, 32f, 6f);
        bezierPath.cubicTo(17.64f, 6f, 6f, 17.64f, 6f, 32f);
        bezierPath.cubicTo(6f, 46.36f, 17.64f, 58f, 32f, 58f);
        bezierPath.close();
        bezierPath.moveTo(32f, 55f);
        bezierPath.cubicTo(19.3f, 55f, 9f, 44.7f, 9f, 32f);
        bezierPath.cubicTo(9f, 19.3f, 19.3f, 9f, 32f, 9f);
        bezierPath.cubicTo(44.7f, 9f, 55f, 19.3f, 55f, 32f);
        bezierPath.cubicTo(55f, 44.7f, 44.7f, 55f, 32f, 55f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForSend {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawSend(Canvas canvas, int color) {
        WireStyleKit.drawSend(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawSend(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForSend.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSend.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForSend.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForSend.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForSend.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(0f, 57.21f);
        bezierPath.cubicTo(0f, 63.07f, 4.2f, 65.6f, 9.38f, 62.94f);
        bezierPath.lineTo(60.13f, 36.82f);
        bezierPath.cubicTo(65.26f, 34.18f, 65.31f, 29.83f, 60.13f, 27.17f);
        bezierPath.lineTo(9.38f, 1.05f);
        bezierPath.cubicTo(4.25f, -1.6f, 0f, 0.94f, 0f, 6.77f);
        bezierPath.lineTo(0f, 32f);
        bezierPath.lineTo(48f, 32f);
        bezierPath.lineTo(0f, 40f);
        bezierPath.lineTo(0f, 57.21f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForText {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawText(Canvas canvas, int color) {
        WireStyleKit.drawText(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawText(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForText.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForText.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForText.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForText.bezierRect;
        bezierRect.set(4f, 0f, 60f, 64f);
        Path bezierPath = CacheForText.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(28f, 16f);
        bezierPath.lineTo(28f, 56f);
        bezierPath.lineTo(20f, 56f);
        bezierPath.lineTo(20f, 16f);
        bezierPath.lineTo(4f, 16f);
        bezierPath.lineTo(4f, 8f);
        bezierPath.lineTo(44f, 8f);
        bezierPath.lineTo(44f, 16f);
        bezierPath.lineTo(28f, 16f);
        bezierPath.close();
        bezierPath.moveTo(56f, 0f);
        bezierPath.lineTo(60f, 0f);
        bezierPath.lineTo(60f, 64f);
        bezierPath.lineTo(56f, 64f);
        bezierPath.lineTo(56f, 0f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForEmoji {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawEmoji(Canvas canvas, int color) {
        WireStyleKit.drawEmoji(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawEmoji(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForEmoji.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForEmoji.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForEmoji.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForEmoji.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForEmoji.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(32f, 64f);
        bezierPath.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
        bezierPath.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
        bezierPath.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
        bezierPath.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
        bezierPath.close();
        bezierPath.moveTo(32f, 58f);
        bezierPath.cubicTo(46.36f, 58f, 58f, 46.36f, 58f, 32f);
        bezierPath.cubicTo(58f, 17.64f, 46.36f, 6f, 32f, 6f);
        bezierPath.cubicTo(17.64f, 6f, 6f, 17.64f, 6f, 32f);
        bezierPath.cubicTo(6f, 46.36f, 17.64f, 58f, 32f, 58f);
        bezierPath.close();
        bezierPath.moveTo(51.6f, 36f);
        bezierPath.cubicTo(49.75f, 45.13f, 41.68f, 52f, 32f, 52f);
        bezierPath.cubicTo(22.32f, 52f, 14.25f, 45.13f, 12.4f, 36f);
        bezierPath.lineTo(51.6f, 36f);
        bezierPath.close();
        bezierPath.moveTo(45.89f, 40f);
        bezierPath.cubicTo(35.15f, 40f, 18.17f, 40.06f, 18.17f, 40.06f);
        bezierPath.cubicTo(19.04f, 41.54f, 20.14f, 42.87f, 21.42f, 44f);
        bezierPath.lineTo(42.58f, 44f);
        bezierPath.cubicTo(44.94f, 41.93f, 45.89f, 40f, 45.89f, 40f);
        bezierPath.close();
        bezierPath.moveTo(40f, 28f);
        bezierPath.cubicTo(37.79f, 28f, 36f, 26.21f, 36f, 24f);
        bezierPath.cubicTo(36f, 21.79f, 37.79f, 20f, 40f, 20f);
        bezierPath.cubicTo(42.21f, 20f, 44f, 21.79f, 44f, 24f);
        bezierPath.cubicTo(44f, 26.21f, 42.21f, 28f, 40f, 28f);
        bezierPath.close();
        bezierPath.moveTo(24f, 28f);
        bezierPath.cubicTo(21.79f, 28f, 20f, 26.21f, 20f, 24f);
        bezierPath.cubicTo(20f, 21.79f, 21.79f, 20f, 24f, 20f);
        bezierPath.cubicTo(26.21f, 20f, 28f, 21.79f, 28f, 24f);
        bezierPath.cubicTo(28f, 26.21f, 26.21f, 28f, 24f, 28f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForMuteAlerts {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF group4 = new RectF();
        private static Path clipPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }

    public static void drawMuteAlerts(Canvas canvas, int color) {
        WireStyleKit.drawMuteAlerts(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawMuteAlerts(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForMuteAlerts.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMuteAlerts.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForMuteAlerts.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Group 4
        {
            RectF group4 = CacheForMuteAlerts.group4;
            group4.set(2.05f, 0f, 62.64f, 64f);
            canvas.save();

            // Clip
            Path clipPath = CacheForMuteAlerts.clipPath;
            clipPath.reset();
            clipPath.moveTo(56.52f, 7.13f);
            clipPath.cubicTo(58.28f, 5.86f, 60.7f, 6.3f, 61.94f, 8.11f);
            clipPath.cubicTo(63.17f, 9.92f, 62.74f, 12.41f, 60.98f, 13.68f);
            clipPath.lineTo(8.17f, 51.73f);
            clipPath.cubicTo(6.41f, 53f, 3.99f, 52.56f, 2.76f, 50.75f);
            clipPath.cubicTo(1.53f, 48.94f, 1.95f, 46.44f, 3.71f, 45.17f);
            clipPath.lineTo(8.67f, 41.6f);
            clipPath.cubicTo(8.77f, 41.31f, 8.88f, 41.02f, 9.02f, 40.72f);
            clipPath.cubicTo(9.02f, 40.72f, 12.23f, 33.83f, 13.51f, 29.99f);
            clipPath.cubicTo(15.15f, 25.02f, 17.51f, 12.92f, 17.51f, 12.92f);
            clipPath.cubicTo(18.47f, 5.64f, 25.01f, 0f, 32.94f, 0f);
            clipPath.cubicTo(40.87f, 0f, 47.41f, 5.63f, 48.49f, 12.91f);
            clipPath.lineTo(56.52f, 7.13f);
            clipPath.close();
            clipPath.moveTo(52.38f, 29.99f);
            clipPath.cubicTo(53.75f, 34.09f, 56.86f, 40.72f, 56.86f, 40.72f);
            clipPath.cubicTo(58.66f, 44.72f, 56.66f, 48f, 52.36f, 48f);
            clipPath.lineTo(26.69f, 48f);
            clipPath.lineTo(52.25f, 29.59f);
            clipPath.cubicTo(52.29f, 29.72f, 52.34f, 29.86f, 52.38f, 29.99f);
            clipPath.close();
            clipPath.moveTo(40.72f, 56f);
            clipPath.cubicTo(40.72f, 60.42f, 37.24f, 64f, 32.94f, 64f);
            clipPath.cubicTo(28.65f, 64f, 25.17f, 60.42f, 25.17f, 56f);
            clipPath.lineTo(40.72f, 56f);
            clipPath.close();
            canvas.clipPath(clipPath);

            // Rectangle
            RectF rectangleRect = CacheForMuteAlerts.rectangleRect;
            rectangleRect.set(0f, 0f, 64f, 64f);
            Path rectanglePath = CacheForMuteAlerts.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);

            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(rectanglePath, paint);

            canvas.restore();
        }

        canvas.restore();
    }

    private static class CacheForAlerts {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF group4 = new RectF();
        private static Path clipPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }

    public static void drawAlerts(Canvas canvas, int color) {
        WireStyleKit.drawAlerts(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawAlerts(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForAlerts.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAlerts.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForAlerts.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Group 4
        {
            RectF group4 = CacheForAlerts.group4;
            group4.set(6.67f, 0f, 57.32f, 64f);
            canvas.save();

            // Clip
            Path clipPath = CacheForAlerts.clipPath;
            clipPath.reset();
            clipPath.moveTo(32.01f, 0f);
            clipPath.cubicTo(40.18f, 0f, 46.91f, 5.64f, 48.02f, 12.92f);
            clipPath.cubicTo(48.02f, 12.92f, 50.34f, 25.11f, 52.03f, 29.99f);
            clipPath.cubicTo(53.45f, 34.09f, 56.65f, 40.72f, 56.65f, 40.72f);
            clipPath.cubicTo(58.49f, 44.72f, 56.44f, 48f, 52f, 48f);
            clipPath.lineTo(12.02f, 48f);
            clipPath.cubicTo(7.58f, 48f, 5.49f, 44.73f, 7.34f, 40.71f);
            clipPath.cubicTo(7.34f, 40.71f, 10.59f, 33.8f, 12f, 29.99f);
            clipPath.cubicTo(13.85f, 24.99f, 16.13f, 12.92f, 16.13f, 12.92f);
            clipPath.cubicTo(17.11f, 5.64f, 23.85f, 0f, 32.01f, 0f);
            clipPath.close();
            clipPath.moveTo(40.02f, 56f);
            clipPath.cubicTo(40.02f, 60.42f, 36.43f, 64f, 32.01f, 64f);
            clipPath.cubicTo(27.59f, 64f, 24.01f, 60.42f, 24.01f, 56f);
            clipPath.lineTo(40.02f, 56f);
            clipPath.close();
            canvas.clipPath(clipPath);

            // Rectangle
            RectF rectangleRect = CacheForAlerts.rectangleRect;
            rectangleRect.set(0f, 0f, 64f, 64f);
            Path rectanglePath = CacheForAlerts.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);

            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(rectanglePath, paint);

            canvas.restore();
        }

        canvas.restore();
    }

    private static class CacheForImage {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawImage(Canvas canvas, int color) {
        WireStyleKit.drawImage(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawImage(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForImage.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForImage.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForImage.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForImage.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForImage.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(0f, 4f);
        bezierPath.cubicTo(0f, 1.79f, 1.78f, 0f, 4f, 0f);
        bezierPath.lineTo(60f, 0f);
        bezierPath.cubicTo(62.21f, 0f, 64f, 1.78f, 64f, 4f);
        bezierPath.lineTo(64f, 60f);
        bezierPath.cubicTo(64f, 62.21f, 62.22f, 64f, 60f, 64f);
        bezierPath.lineTo(4f, 64f);
        bezierPath.cubicTo(1.79f, 64f, 0f, 62.22f, 0f, 60f);
        bezierPath.lineTo(0f, 4f);
        bezierPath.close();
        bezierPath.moveTo(56f, 8f);
        bezierPath.lineTo(8f, 8f);
        bezierPath.lineTo(8f, 44.08f);
        bezierPath.lineTo(24f, 36f);
        bezierPath.lineTo(56f, 49.95f);
        bezierPath.lineTo(56f, 8f);
        bezierPath.close();
        bezierPath.moveTo(40f, 32f);
        bezierPath.cubicTo(35.58f, 32f, 32f, 28.42f, 32f, 24f);
        bezierPath.cubicTo(32f, 19.58f, 35.58f, 16f, 40f, 16f);
        bezierPath.cubicTo(44.42f, 16f, 48f, 19.58f, 48f, 24f);
        bezierPath.cubicTo(48f, 28.42f, 44.42f, 32f, 40f, 32f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForEdit {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawEdit(Canvas canvas, int color) {
        WireStyleKit.drawEdit(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawEdit(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForEdit.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForEdit.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForEdit.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForEdit.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForEdit.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(58.22f, 19.38f);
        bezierPath.lineTo(61.21f, 16.4f);
        bezierPath.cubicTo(64.94f, 12.67f, 64.93f, 6.59f, 61.18f, 2.83f);
        bezierPath.cubicTo(57.4f, -0.95f, 51.35f, -0.93f, 47.61f, 2.81f);
        bezierPath.lineTo(44.63f, 5.79f);
        bezierPath.lineTo(58.22f, 19.38f);
        bezierPath.lineTo(58.22f, 19.38f);
        bezierPath.lineTo(58.22f, 19.38f);
        bezierPath.close();
        bezierPath.moveTo(55.39f, 22.21f);
        bezierPath.lineTo(16.99f, 60.6f);
        bezierPath.lineTo(0f, 64f);
        bezierPath.lineTo(3.4f, 47.01f);
        bezierPath.lineTo(41.8f, 8.62f);
        bezierPath.lineTo(55.39f, 22.21f);
        bezierPath.lineTo(55.39f, 22.21f);
        bezierPath.close();
        bezierPath.moveTo(16f, 54.4f);
        bezierPath.lineTo(8f, 56f);
        bezierPath.lineTo(9.6f, 48f);
        bezierPath.lineTo(16f, 54.4f);
        bezierPath.lineTo(16f, 54.4f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForReply {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawReply(Canvas canvas, int color) {
        WireStyleKit.drawReply(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawReply(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForReply.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForReply.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForReply.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForReply.bezierRect;
        bezierRect.set(0f, 2f, 64f, 62f);
        Path bezierPath = CacheForReply.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(13.38f, 18f);
        bezierPath.lineTo(41.71f, 18f);
        bezierPath.cubicTo(54.02f, 18f, 64f, 28.4f, 64f, 40.36f);
        bezierPath.cubicTo(64f, 52.31f, 54.02f, 62f, 41.71f, 62f);
        bezierPath.lineTo(27.93f, 62f);
        bezierPath.cubicTo(25.76f, 62f, 24f, 60.24f, 24f, 58.07f);
        bezierPath.cubicTo(24f, 55.89f, 25.76f, 54.13f, 27.93f, 54.13f);
        bezierPath.lineTo(41.71f, 54.13f);
        bezierPath.cubicTo(49.92f, 54.13f, 56f, 48.33f, 56f, 40.36f);
        bezierPath.cubicTo(56f, 32.39f, 49.92f, 25.88f, 41.71f, 25.88f);
        bezierPath.lineTo(13.28f, 25.88f);
        bezierPath.lineTo(23.06f, 35.5f);
        bezierPath.cubicTo(23.08f, 35.51f, 23.09f, 35.53f, 23.1f, 35.54f);
        bezierPath.cubicTo(24.57f, 37.03f, 24.55f, 39.42f, 23.06f, 40.89f);
        bezierPath.cubicTo(21.54f, 42.38f, 19.1f, 42.38f, 17.58f, 40.89f);
        bezierPath.lineTo(1.15f, 24.73f);
        bezierPath.cubicTo(1.14f, 24.71f, 1.13f, 24.7f, 1.11f, 24.68f);
        bezierPath.cubicTo(0.79f, 24.36f, 0.54f, 23.99f, 0.36f, 23.59f);
        bezierPath.cubicTo(-0.3f, 22.2f, -0.06f, 20.49f, 1.09f, 19.33f);
        bezierPath.cubicTo(1.1f, 19.31f, 1.11f, 19.3f, 1.13f, 19.28f);
        bezierPath.lineTo(17.56f, 3.12f);
        bezierPath.cubicTo(19.08f, 1.63f, 21.51f, 1.63f, 23.03f, 3.12f);
        bezierPath.cubicTo(24.52f, 4.58f, 24.54f, 6.98f, 23.08f, 8.46f);
        bezierPath.cubicTo(23.06f, 8.48f, 23.05f, 8.49f, 23.03f, 8.51f);
        bezierPath.lineTo(13.38f, 18f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForCopied {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawCopied(Canvas canvas, int color) {
        WireStyleKit.drawCopied(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawCopied(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForCopied.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCopied.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForCopied.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForCopied.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForCopied.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(24f, 40f);
        bezierPath.lineTo(56f, 40f);
        bezierPath.lineTo(56f, 8f);
        bezierPath.lineTo(24f, 8f);
        bezierPath.lineTo(24f, 40f);
        bezierPath.close();
        bezierPath.moveTo(19.98f, 0f);
        bezierPath.lineTo(60.02f, 0f);
        bezierPath.cubicTo(62.22f, 0f, 64f, 1.82f, 64f, 4.01f);
        bezierPath.lineTo(64f, 43.99f);
        bezierPath.cubicTo(64f, 46.2f, 62.18f, 48f, 60.02f, 48f);
        bezierPath.lineTo(19.98f, 48f);
        bezierPath.cubicTo(17.78f, 48f, 16f, 46.18f, 16f, 43.99f);
        bezierPath.lineTo(16f, 4.01f);
        bezierPath.cubicTo(16f, 1.8f, 17.82f, 0f, 19.98f, 0f);
        bezierPath.close();
        bezierPath.moveTo(8f, 16f);
        bezierPath.lineTo(8f, 56f);
        bezierPath.lineTo(48f, 56f);
        bezierPath.lineTo(48f, 59.99f);
        bezierPath.cubicTo(48f, 62.21f, 46.18f, 64f, 44.02f, 64f);
        bezierPath.lineTo(3.98f, 64f);
        bezierPath.cubicTo(1.78f, 64f, 0f, 62.18f, 0f, 59.99f);
        bezierPath.lineTo(0f, 20.01f);
        bezierPath.cubicTo(0f, 17.79f, 1.82f, 16f, 3.98f, 16f);
        bezierPath.lineTo(8f, 16f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForLiked {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawLiked(Canvas canvas, int color) {
        WireStyleKit.drawLiked(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawLiked(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForLiked.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLiked.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForLiked.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForLiked.bezierRect;
        bezierRect.set(0f, 4f, 64f, 60f);
        Path bezierPath = CacheForLiked.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(29.54f, 9.02f);
        bezierPath.cubicTo(22.8f, 2.33f, 11.83f, 2.32f, 5.07f, 9.03f);
        bezierPath.cubicTo(1.51f, 12.55f, -0.18f, 17.24f, 0.01f, 23.2f);
        bezierPath.cubicTo(-0f, 44f, 32f, 60f, 32f, 60f);
        bezierPath.cubicTo(32f, 60f, 64f, 44f, 64f, 23.2f);
        bezierPath.cubicTo(64.03f, 16.85f, 62.34f, 12.41f, 58.93f, 9.03f);
        bezierPath.cubicTo(52.18f, 2.34f, 41.21f, 2.32f, 34.46f, 9.02f);
        bezierPath.lineTo(32f, 11.45f);
        bezierPath.lineTo(29.54f, 9.02f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForLike {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawLike(Canvas canvas, int color) {
        WireStyleKit.drawLike(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawLike(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForLike.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLike.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForLike.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForLike.bezierRect;
        bezierRect.set(0f, 4f, 64f, 60f);
        Path bezierPath = CacheForLike.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(32.84f, 50.34f);
        bezierPath.cubicTo(36.29f, 48.25f, 39.73f, 45.85f, 42.91f, 43.23f);
        bezierPath.cubicTo(51.25f, 36.35f, 56f, 29.34f, 56f, 23.16f);
        bezierPath.cubicTo(56.02f, 18.95f, 55.14f, 16.54f, 53.3f, 14.71f);
        bezierPath.cubicTo(49.66f, 11.1f, 43.72f, 11.1f, 40.09f, 14.7f);
        bezierPath.lineTo(32f, 22.72f);
        bezierPath.lineTo(23.91f, 14.7f);
        bezierPath.cubicTo(20.28f, 11.1f, 14.34f, 11.1f, 10.7f, 14.71f);
        bezierPath.cubicTo(8.79f, 16.6f, 7.89f, 19.13f, 8.01f, 23.21f);
        bezierPath.cubicTo(8.01f, 29.34f, 12.76f, 36.36f, 21.1f, 43.23f);
        bezierPath.cubicTo(24.28f, 45.86f, 27.72f, 48.25f, 31.16f, 50.34f);
        bezierPath.cubicTo(31.44f, 50.52f, 31.73f, 50.68f, 32f, 50.85f);
        bezierPath.cubicTo(32.27f, 50.68f, 32.56f, 50.51f, 32.84f, 50.34f);
        bezierPath.close();
        bezierPath.moveTo(32f, 11.45f);
        bezierPath.lineTo(34.46f, 9.02f);
        bezierPath.cubicTo(41.21f, 2.32f, 52.18f, 2.34f, 58.93f, 9.03f);
        bezierPath.cubicTo(62.34f, 12.41f, 64.03f, 16.85f, 64f, 23.2f);
        bezierPath.cubicTo(64f, 44f, 32f, 60f, 32f, 60f);
        bezierPath.cubicTo(32f, 60f, -0f, 44f, 0.01f, 23.2f);
        bezierPath.cubicTo(-0.18f, 17.24f, 1.51f, 12.55f, 5.07f, 9.03f);
        bezierPath.cubicTo(11.83f, 2.32f, 22.8f, 2.33f, 29.54f, 9.02f);
        bezierPath.lineTo(32f, 11.45f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForShare {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawShare(Canvas canvas, int color) {
        WireStyleKit.drawShare(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawShare(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForShare.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForShare.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForShare.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForShare.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForShare.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(0f, 56f);
        bezierPath.lineTo(64f, 56f);
        bezierPath.lineTo(64f, 64f);
        bezierPath.lineTo(0f, 64f);
        bezierPath.lineTo(0f, 56f);
        bezierPath.lineTo(0f, 56f);
        bezierPath.lineTo(0f, 56f);
        bezierPath.lineTo(0f, 56f);
        bezierPath.close();
        bezierPath.moveTo(28f, 44f);
        bezierPath.lineTo(36f, 44f);
        bezierPath.lineTo(36f, 16f);
        bezierPath.lineTo(52f, 16f);
        bezierPath.lineTo(32f, 0f);
        bezierPath.lineTo(12f, 16f);
        bezierPath.lineTo(28f, 16f);
        bezierPath.lineTo(28f, 44f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForSave {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawSave(Canvas canvas, int color) {
        WireStyleKit.drawSave(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawSave(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForSave.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSave.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForSave.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForSave.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForSave.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(0f, 56f);
        bezierPath.lineTo(64f, 56f);
        bezierPath.lineTo(64f, 64f);
        bezierPath.lineTo(0f, 64f);
        bezierPath.lineTo(0f, 56f);
        bezierPath.lineTo(0f, 56f);
        bezierPath.lineTo(0f, 56f);
        bezierPath.close();
        bezierPath.moveTo(28f, 0f);
        bezierPath.lineTo(36f, 0f);
        bezierPath.lineTo(36f, 28f);
        bezierPath.lineTo(52f, 28f);
        bezierPath.lineTo(32f, 44f);
        bezierPath.lineTo(12f, 28f);
        bezierPath.lineTo(28f, 28f);
        bezierPath.lineTo(28f, 0f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForDelete {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawDelete(Canvas canvas, int color) {
        WireStyleKit.drawDelete(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawDelete(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForDelete.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDelete.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForDelete.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForDelete.bezierRect;
        bezierRect.set(4f, 0f, 60f, 64f);
        Path bezierPath = CacheForDelete.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(24f, 8f);
        bezierPath.lineTo(8.03f, 8f);
        bezierPath.cubicTo(5.8f, 8f, 4f, 9.79f, 4f, 12f);
        bezierPath.lineTo(4f, 16f);
        bezierPath.lineTo(60f, 16f);
        bezierPath.lineTo(60f, 12f);
        bezierPath.cubicTo(60f, 9.78f, 58.2f, 8f, 55.97f, 8f);
        bezierPath.lineTo(40f, 8f);
        bezierPath.cubicTo(40f, 3.55f, 36.42f, 0f, 32f, 0f);
        bezierPath.cubicTo(27.55f, 0f, 24f, 3.58f, 24f, 8f);
        bezierPath.lineTo(24f, 8f);
        bezierPath.close();
        bezierPath.moveTo(8f, 24f);
        bezierPath.lineTo(56f, 24f);
        bezierPath.lineTo(52.8f, 56f);
        bezierPath.cubicTo(52.36f, 60.42f, 48.45f, 64f, 44f, 64f);
        bezierPath.lineTo(20f, 64f);
        bezierPath.cubicTo(15.58f, 64f, 11.65f, 60.45f, 11.2f, 56f);
        bezierPath.lineTo(8f, 24f);
        bezierPath.lineTo(8f, 24f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForDeleteforme {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawDeleteforme(Canvas canvas, int color) {
        WireStyleKit.drawDeleteforme(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawDeleteforme(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForDeleteforme.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDeleteforme.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForDeleteforme.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForDeleteforme.bezierRect;
        bezierRect.set(4f, 0f, 60f, 64f);
        Path bezierPath = CacheForDeleteforme.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(24f, 8f);
        bezierPath.cubicTo(24f, 3.58f, 27.55f, 0f, 32f, 0f);
        bezierPath.cubicTo(36.42f, 0f, 40f, 3.55f, 40f, 8f);
        bezierPath.lineTo(55.97f, 8f);
        bezierPath.cubicTo(58.2f, 8f, 60f, 9.78f, 60f, 12f);
        bezierPath.lineTo(60f, 16f);
        bezierPath.lineTo(4f, 16f);
        bezierPath.lineTo(4f, 12f);
        bezierPath.cubicTo(4f, 9.79f, 5.8f, 8f, 8.03f, 8f);
        bezierPath.lineTo(24f, 8f);
        bezierPath.close();
        bezierPath.moveTo(8f, 24f);
        bezierPath.lineTo(56f, 24f);
        bezierPath.lineTo(52.8f, 56f);
        bezierPath.cubicTo(52.36f, 60.42f, 48.45f, 64f, 44f, 64f);
        bezierPath.lineTo(20f, 64f);
        bezierPath.cubicTo(15.58f, 64f, 11.65f, 60.45f, 11.2f, 56f);
        bezierPath.lineTo(8f, 24f);
        bezierPath.close();
        bezierPath.moveTo(30f, 32f);
        bezierPath.lineTo(30f, 54.16f);
        bezierPath.lineTo(34f, 54.16f);
        bezierPath.lineTo(34f, 32f);
        bezierPath.lineTo(30f, 32f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForDeleteforeveryone {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawDeleteforeveryone(Canvas canvas, int color) {
        WireStyleKit.drawDeleteforeveryone(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawDeleteforeveryone(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForDeleteforeveryone.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDeleteforeveryone.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForDeleteforeveryone.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForDeleteforeveryone.bezierRect;
        bezierRect.set(4f, 0f, 60f, 64f);
        Path bezierPath = CacheForDeleteforeveryone.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(24f, 8f);
        bezierPath.cubicTo(24f, 3.58f, 27.55f, 0f, 32f, 0f);
        bezierPath.cubicTo(36.42f, 0f, 40f, 3.55f, 40f, 8f);
        bezierPath.lineTo(55.97f, 8f);
        bezierPath.cubicTo(58.2f, 8f, 60f, 9.78f, 60f, 12f);
        bezierPath.lineTo(60f, 16f);
        bezierPath.lineTo(4f, 16f);
        bezierPath.lineTo(4f, 12f);
        bezierPath.cubicTo(4f, 9.79f, 5.8f, 8f, 8.03f, 8f);
        bezierPath.lineTo(24f, 8f);
        bezierPath.close();
        bezierPath.moveTo(8f, 24f);
        bezierPath.lineTo(56f, 24f);
        bezierPath.lineTo(52.8f, 56f);
        bezierPath.cubicTo(52.36f, 60.42f, 48.45f, 64f, 44f, 64f);
        bezierPath.lineTo(20f, 64f);
        bezierPath.cubicTo(15.58f, 64f, 11.65f, 60.45f, 11.2f, 56f);
        bezierPath.lineTo(8f, 24f);
        bezierPath.close();
        bezierPath.moveTo(40f, 32f);
        bezierPath.lineTo(40f, 54.16f);
        bezierPath.lineTo(44f, 54.16f);
        bezierPath.lineTo(44f, 32f);
        bezierPath.lineTo(40f, 32f);
        bezierPath.close();
        bezierPath.moveTo(30f, 32f);
        bezierPath.lineTo(30f, 54.16f);
        bezierPath.lineTo(34f, 54.16f);
        bezierPath.lineTo(34f, 32f);
        bezierPath.lineTo(30f, 32f);
        bezierPath.close();
        bezierPath.moveTo(20f, 32f);
        bezierPath.lineTo(20f, 54.16f);
        bezierPath.lineTo(24f, 54.16f);
        bezierPath.lineTo(24f, 32f);
        bezierPath.lineTo(20f, 32f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForArchive {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawArchive(Canvas canvas, int color) {
        WireStyleKit.drawArchive(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawArchive(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForArchive.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArchive.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForArchive.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForArchive.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForArchive.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(4f, 28f);
        bezierPath.lineTo(60f, 28f);
        bezierPath.lineTo(60f, 56f);
        bezierPath.cubicTo(60f, 60.42f, 56.42f, 64f, 52f, 64f);
        bezierPath.lineTo(12f, 64f);
        bezierPath.cubicTo(7.58f, 64f, 4f, 60.42f, 4f, 56f);
        bezierPath.lineTo(4f, 28f);
        bezierPath.close();
        bezierPath.moveTo(28f, 36f);
        bezierPath.cubicTo(25.79f, 36f, 24f, 37.79f, 24f, 40f);
        bezierPath.cubicTo(24f, 42.21f, 25.79f, 44f, 28f, 44f);
        bezierPath.lineTo(36f, 44f);
        bezierPath.cubicTo(38.21f, 44f, 40f, 42.21f, 40f, 40f);
        bezierPath.cubicTo(40f, 37.79f, 38.21f, 36f, 36f, 36f);
        bezierPath.lineTo(28f, 36f);
        bezierPath.close();
        bezierPath.moveTo(10.04f, 0f);
        bezierPath.lineTo(53.96f, 0f);
        bezierPath.cubicTo(57.27f, 0f, 58.6f, 0.37f, 59.91f, 1.07f);
        bezierPath.cubicTo(61.21f, 1.77f, 62.23f, 2.79f, 62.93f, 4.09f);
        bezierPath.cubicTo(63.63f, 5.4f, 64f, 6.73f, 64f, 10.04f);
        bezierPath.lineTo(64f, 16f);
        bezierPath.cubicTo(64f, 18.21f, 62.21f, 20f, 60f, 20f);
        bezierPath.lineTo(4f, 20f);
        bezierPath.cubicTo(1.79f, 20f, 0f, 18.21f, 0f, 16f);
        bezierPath.lineTo(0f, 10.04f);
        bezierPath.cubicTo(0f, 6.73f, 0.37f, 5.4f, 1.07f, 4.09f);
        bezierPath.cubicTo(1.77f, 2.79f, 2.79f, 1.77f, 4.09f, 1.07f);
        bezierPath.cubicTo(5.4f, 0.37f, 6.73f, 0f, 10.04f, 0f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForLeave {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawLeave(Canvas canvas, int color) {
        WireStyleKit.drawLeave(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawLeave(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForLeave.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLeave.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForLeave.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForLeave.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForLeave.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(8f, 56f);
        bezierPath.lineTo(36f, 56f);
        bezierPath.lineTo(36f, 64f);
        bezierPath.lineTo(0f, 64f);
        bezierPath.lineTo(0f, 60f);
        bezierPath.lineTo(0f, 4f);
        bezierPath.lineTo(0f, 0f);
        bezierPath.lineTo(36f, 0f);
        bezierPath.lineTo(36f, 8f);
        bezierPath.lineTo(8f, 8f);
        bezierPath.lineTo(8f, 56f);
        bezierPath.close();
        bezierPath.moveTo(20f, 28f);
        bezierPath.lineTo(20f, 36f);
        bezierPath.lineTo(48f, 36f);
        bezierPath.lineTo(48f, 52f);
        bezierPath.lineTo(64f, 32f);
        bezierPath.lineTo(48f, 12f);
        bezierPath.lineTo(48f, 28f);
        bezierPath.lineTo(20f, 28f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForReveal {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawReveal(Canvas canvas, int color) {
        WireStyleKit.drawReveal(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawReveal(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForReveal.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForReveal.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForReveal.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForReveal.bezierRect;
        bezierRect.set(0f, 8f, 64f, 56f);
        Path bezierPath = CacheForReveal.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(64f, 32f);
        bezierPath.cubicTo(59.34f, 18.02f, 46.77f, 8f, 32f, 8f);
        bezierPath.cubicTo(17.23f, 8f, 4.66f, 18.02f, 0f, 32f);
        bezierPath.cubicTo(4.66f, 45.98f, 17.23f, 56f, 32f, 56f);
        bezierPath.cubicTo(46.77f, 56f, 59.34f, 45.98f, 64f, 32f);
        bezierPath.lineTo(64f, 32f);
        bezierPath.close();
        bezierPath.moveTo(32f, 44f);
        bezierPath.cubicTo(38.63f, 44f, 44f, 38.63f, 44f, 32f);
        bezierPath.cubicTo(44f, 25.37f, 38.63f, 20f, 32f, 20f);
        bezierPath.cubicTo(25.37f, 20f, 20f, 25.37f, 20f, 32f);
        bezierPath.cubicTo(20f, 38.63f, 25.37f, 44f, 32f, 44f);
        bezierPath.lineTo(32f, 44f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForFile {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawFile(Canvas canvas, int color) {
        WireStyleKit.drawFile(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawFile(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForFile.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForFile.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForFile.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForFile.bezierRect;
        bezierRect.set(8f, 0f, 56f, 64f);
        Path bezierPath = CacheForFile.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(11.96f, 0f);
        bezierPath.cubicTo(9.77f, 0f, 8f, 1.78f, 8f, 4f);
        bezierPath.lineTo(8f, 60f);
        bezierPath.cubicTo(8f, 62.21f, 9.82f, 64f, 12.01f, 64f);
        bezierPath.lineTo(51.99f, 64f);
        bezierPath.cubicTo(54.2f, 64f, 56f, 62.18f, 56f, 60.02f);
        bezierPath.lineTo(56f, 24f);
        bezierPath.lineTo(40.11f, 24f);
        bezierPath.cubicTo(35.62f, 24f, 31.99f, 20.45f, 31.99f, 15.98f);
        bezierPath.lineTo(31.99f, 0f);
        bezierPath.lineTo(11.96f, 0f);
        bezierPath.close();
        bezierPath.moveTo(56f, 20f);
        bezierPath.lineTo(41.43f, 20f);
        bezierPath.cubicTo(38.61f, 20f, 36.32f, 17.78f, 36f, 14.95f);
        bezierPath.lineTo(36f, 0f);
        bezierPath.lineTo(56f, 20f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForBlock {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawBlock(Canvas canvas, int color) {
        WireStyleKit.drawBlock(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawBlock(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForBlock.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBlock.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForBlock.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForBlock.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForBlock.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(32f, 64f);
        bezierPath.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
        bezierPath.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
        bezierPath.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
        bezierPath.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
        bezierPath.close();
        bezierPath.moveTo(51.56f, 18.09f);
        bezierPath.lineTo(50.83f, 18.83f);
        bezierPath.lineTo(18.09f, 51.56f);
        bezierPath.cubicTo(22.02f, 54.36f, 26.82f, 56f, 32f, 56f);
        bezierPath.cubicTo(45.25f, 56f, 56f, 45.25f, 56f, 32f);
        bezierPath.cubicTo(56f, 26.82f, 54.36f, 22.02f, 51.56f, 18.09f);
        bezierPath.close();
        bezierPath.moveTo(45.91f, 12.44f);
        bezierPath.cubicTo(41.98f, 9.64f, 37.18f, 8f, 32f, 8f);
        bezierPath.cubicTo(18.75f, 8f, 8f, 18.75f, 8f, 32f);
        bezierPath.cubicTo(8f, 37.18f, 9.64f, 41.98f, 12.44f, 45.91f);
        bezierPath.lineTo(45.17f, 13.17f);
        bezierPath.lineTo(45.91f, 12.44f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForView {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawView(Canvas canvas, int color) {
        WireStyleKit.drawView(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawView(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForView.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForView.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForView.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForView.bezierRect;
        bezierRect.set(0f, 8f, 64f, 56f);
        Path bezierPath = CacheForView.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(64f, 32f);
        bezierPath.cubicTo(59.34f, 18.02f, 46.77f, 8f, 32f, 8f);
        bezierPath.cubicTo(17.23f, 8f, 4.66f, 18.02f, 0f, 32f);
        bezierPath.cubicTo(4.66f, 45.98f, 17.23f, 56f, 32f, 56f);
        bezierPath.cubicTo(46.77f, 56f, 59.34f, 45.98f, 64f, 32f);
        bezierPath.lineTo(64f, 32f);
        bezierPath.close();
        bezierPath.moveTo(32f, 44f);
        bezierPath.cubicTo(38.63f, 44f, 44f, 38.63f, 44f, 32f);
        bezierPath.cubicTo(44f, 25.37f, 38.63f, 20f, 32f, 20f);
        bezierPath.cubicTo(25.37f, 20f, 20f, 25.37f, 20f, 32f);
        bezierPath.cubicTo(20f, 38.63f, 25.37f, 44f, 32f, 44f);
        bezierPath.lineTo(32f, 44f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForDropdown {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF downRect = new RectF();
        private static Path downPath = new Path();
    }

    public static void drawDropdown(Canvas canvas, int color) {
        WireStyleKit.drawDropdown(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawDropdown(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForDropdown.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDropdown.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForDropdown.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Down
        RectF downRect = CacheForDropdown.downRect;
        downRect.set(2f, 16f, 62.31f, 52.07f);
        Path downPath = CacheForDropdown.downPath;
        downPath.reset();
        downPath.moveTo(32.16f, 52.07f);
        downPath.lineTo(62.31f, 21.62f);
        downPath.lineTo(56.74f, 16f);
        downPath.lineTo(32.16f, 40.82f);
        downPath.lineTo(7.57f, 16f);
        downPath.lineTo(2f, 21.62f);
        downPath.lineTo(32.16f, 52.07f);
        downPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        downPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(downPath, paint);

        canvas.restore();
    }

    private static class CacheForInfo {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawInfo(Canvas canvas, int color) {
        WireStyleKit.drawInfo(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawInfo(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForInfo.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForInfo.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForInfo.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Bezier
        RectF bezierRect = CacheForInfo.bezierRect;
        bezierRect.set(0f, 0f, 64f, 64f);
        Path bezierPath = CacheForInfo.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(32f, 64f);
        bezierPath.cubicTo(14.33f, 64f, 0f, 49.67f, 0f, 32f);
        bezierPath.cubicTo(0f, 14.33f, 14.33f, 0f, 32f, 0f);
        bezierPath.cubicTo(49.67f, 0f, 64f, 14.33f, 64f, 32f);
        bezierPath.cubicTo(64f, 49.67f, 49.67f, 64f, 32f, 64f);
        bezierPath.close();
        bezierPath.moveTo(32f, 56f);
        bezierPath.cubicTo(45.25f, 56f, 56f, 45.25f, 56f, 32f);
        bezierPath.cubicTo(56f, 18.75f, 45.25f, 8f, 32f, 8f);
        bezierPath.cubicTo(18.75f, 8f, 8f, 18.75f, 8f, 32f);
        bezierPath.cubicTo(8f, 45.25f, 18.75f, 56f, 32f, 56f);
        bezierPath.close();
        bezierPath.moveTo(32f, 28f);
        bezierPath.cubicTo(34.21f, 28f, 36f, 29.79f, 36f, 32f);
        bezierPath.lineTo(36f, 44f);
        bezierPath.cubicTo(36f, 46.21f, 34.21f, 48f, 32f, 48f);
        bezierPath.cubicTo(29.79f, 48f, 28f, 46.21f, 28f, 44f);
        bezierPath.lineTo(28f, 32f);
        bezierPath.cubicTo(28f, 29.79f, 29.79f, 28f, 32f, 28f);
        bezierPath.close();
        bezierPath.moveTo(32f, 24f);
        bezierPath.cubicTo(29.79f, 24f, 28f, 22.21f, 28f, 20f);
        bezierPath.cubicTo(28f, 17.79f, 29.79f, 16f, 32f, 16f);
        bezierPath.cubicTo(34.21f, 16f, 36f, 17.79f, 36f, 20f);
        bezierPath.cubicTo(36f, 22.21f, 34.21f, 24f, 32f, 24f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }

    private static class CacheForRemove {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 64f, 64f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }

    public static void drawRemove(Canvas canvas, int color) {
        WireStyleKit.drawRemove(canvas, new RectF(0f, 0f, 64f, 64f), ResizingBehavior.AspectFit, color);
    }

    public static void drawRemove(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForRemove.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRemove.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForRemove.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 64f, resizedFrame.height() / 64f);

        // Rectangle
        RectF rectangleRect = CacheForRemove.rectangleRect;
        rectangleRect.set(0f, 28f, 64f, 35f);
        Path rectanglePath = CacheForRemove.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(rectanglePath, paint);

        canvas.restore();
    }

    // Indicators and logos

    private static class CacheForShield {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 300f, 388f);
        private static RectF resizedFrame = new RectF();
        private static RectF fill1Rect = new RectF();
        private static Path fill1Path = new Path();
        private static RectF fill4Rect = new RectF();
        private static Path fill4Path = new Path();
        private static RectF fill6Rect = new RectF();
        private static Path fill6Path = new Path();
        private static RectF fill8Rect = new RectF();
        private static Path fill8Path = new Path();
        private static RectF fill10Rect = new RectF();
        private static Path fill10Path = new Path();
        private static RectF fill12Rect = new RectF();
        private static Path fill12Path = new Path();
        private static RectF fill14Rect = new RectF();
        private static Path fill14Path = new Path();
        private static RectF fill16Rect = new RectF();
        private static Path fill16Path = new Path();
        private static RectF fill18Rect = new RectF();
        private static Path fill18Path = new Path();
        private static RectF fill20Rect = new RectF();
        private static Path fill20Path = new Path();
        private static RectF fill22Rect = new RectF();
        private static Path fill22Path = new Path();
        private static RectF fill24Rect = new RectF();
        private static Path fill24Path = new Path();
        private static RectF fill26Rect = new RectF();
        private static Path fill26Path = new Path();
        private static RectF fill28Rect = new RectF();
        private static Path fill28Path = new Path();
        private static RectF fill30Rect = new RectF();
        private static Path fill30Path = new Path();
        private static RectF fill32Rect = new RectF();
        private static Path fill32Path = new Path();
        private static RectF fill34Rect = new RectF();
        private static Path fill34Path = new Path();
        private static RectF fill36Rect = new RectF();
        private static Path fill36Path = new Path();
        private static RectF fill38Rect = new RectF();
        private static Path fill38Path = new Path();
        private static RectF fill40Rect = new RectF();
        private static Path fill40Path = new Path();
        private static RectF fill42Rect = new RectF();
        private static Path fill42Path = new Path();
        private static RectF fill44Rect = new RectF();
        private static Path fill44Path = new Path();
        private static RectF fill47Rect = new RectF();
        private static Path fill47Path = new Path();
        private static RectF fill49Rect = new RectF();
        private static Path fill49Path = new Path();
        private static RectF fill51Rect = new RectF();
        private static Path fill51Path = new Path();
        private static RectF fill53Rect = new RectF();
        private static Path fill53Path = new Path();
        private static RectF fill54Rect = new RectF();
        private static Path fill54Path = new Path();
        private static RectF fill55Rect = new RectF();
        private static Path fill55Path = new Path();
        private static RectF fill56Rect = new RectF();
        private static Path fill56Path = new Path();
        private static RectF fill57Rect = new RectF();
        private static Path fill57Path = new Path();
        private static RectF fill58Rect = new RectF();
        private static Path fill58Path = new Path();
        private static RectF fill59Rect = new RectF();
        private static Path fill59Path = new Path();
        private static RectF fill60Rect = new RectF();
        private static Path fill60Path = new Path();
        private static RectF fill61Rect = new RectF();
        private static Path fill61Path = new Path();
        private static RectF fill62Rect = new RectF();
        private static Path fill62Path = new Path();
        private static RectF fill63Rect = new RectF();
        private static Path fill63Path = new Path();
        private static RectF fill64Rect = new RectF();
        private static Path fill64Path = new Path();
        private static RectF fill65Rect = new RectF();
        private static Path fill65Path = new Path();
        private static RectF fill66Rect = new RectF();
        private static Path fill66Path = new Path();
        private static RectF fill67Rect = new RectF();
        private static Path fill67Path = new Path();
        private static RectF fill68Rect = new RectF();
        private static Path fill68Path = new Path();
        private static RectF fill69Rect = new RectF();
        private static Path fill69Path = new Path();
        private static RectF fill70Rect = new RectF();
        private static Path fill70Path = new Path();
        private static RectF fill71Rect = new RectF();
        private static Path fill71Path = new Path();
        private static RectF fill72Rect = new RectF();
        private static Path fill72Path = new Path();
        private static RectF fill73Rect = new RectF();
        private static Path fill73Path = new Path();
        private static RectF fill74Rect = new RectF();
        private static Path fill74Path = new Path();
        private static RectF fill75Rect = new RectF();
        private static Path fill75Path = new Path();
        private static RectF fill76Rect = new RectF();
        private static Path fill76Path = new Path();
        private static RectF fill77Rect = new RectF();
        private static Path fill77Path = new Path();
        private static RectF fill78Rect = new RectF();
        private static Path fill78Path = new Path();
        private static RectF fill79Rect = new RectF();
        private static Path fill79Path = new Path();
        private static RectF fill80Rect = new RectF();
        private static Path fill80Path = new Path();
        private static RectF fill81Rect = new RectF();
        private static Path fill81Path = new Path();
        private static RectF fill82Rect = new RectF();
        private static Path fill82Path = new Path();
        private static RectF fill83Rect = new RectF();
        private static Path fill83Path = new Path();
        private static RectF fill84Rect = new RectF();
        private static Path fill84Path = new Path();
        private static RectF fill85Rect = new RectF();
        private static Path fill85Path = new Path();
        private static RectF fill86Rect = new RectF();
        private static Path fill86Path = new Path();
        private static RectF fill87Rect = new RectF();
        private static Path fill87Path = new Path();
        private static RectF fill88Rect = new RectF();
        private static Path fill88Path = new Path();
        private static RectF fill89Rect = new RectF();
        private static Path fill89Path = new Path();
        private static RectF fill90Rect = new RectF();
        private static Path fill90Path = new Path();
        private static RectF fill91Rect = new RectF();
        private static Path fill91Path = new Path();
    }

    public static void drawShield(Canvas canvas, int color) {
        WireStyleKit.drawShield(canvas, new RectF(0f, 0f, 300f, 388f), ResizingBehavior.AspectFit, color);
    }

    public static void drawShield(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForShield.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForShield.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForShield.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 300f, resizedFrame.height() / 388f);

        // Fill-1
        RectF fill1Rect = CacheForShield.fill1Rect;
        fill1Rect.set(-0f, -0f, 300f, 148.44f);
        Path fill1Path = CacheForShield.fill1Path;
        fill1Path.reset();
        fill1Path.moveTo(5.88f, 145.5f);
        fill1Path.cubicTo(5.88f, 147.12f, 4.57f, 148.44f, 2.94f, 148.44f);
        fill1Path.cubicTo(1.32f, 148.44f, -0f, 147.12f, -0f, 145.5f);
        fill1Path.lineTo(-0f, 49.96f);
        fill1Path.cubicTo(-0f, 48.34f, 1.32f, 47.02f, 2.94f, 47.02f);
        fill1Path.cubicTo(12.13f, 47.02f, 21.91f, 46.11f, 32.2f, 44.35f);
        fill1Path.cubicTo(53.75f, 40.67f, 76.83f, 33.45f, 100.35f, 23.73f);
        fill1Path.cubicTo(112.71f, 18.61f, 124.4f, 13.14f, 135.05f, 7.66f);
        fill1Path.cubicTo(138.78f, 5.74f, 142.11f, 3.97f, 144.99f, 2.37f);
        fill1Path.cubicTo(146f, 1.82f, 146.88f, 1.32f, 147.63f, 0.9f);
        fill1Path.cubicTo(147.88f, 0.75f, 148.11f, 0.62f, 148.3f, 0.51f);
        fill1Path.cubicTo(149.43f, -0.15f, 150.57f, -0.15f, 151.49f, 0.39f);
        fill1Path.cubicTo(151.89f, 0.62f, 152.12f, 0.75f, 152.37f, 0.9f);
        fill1Path.cubicTo(153.12f, 1.32f, 154f, 1.82f, 155.01f, 2.37f);
        fill1Path.cubicTo(157.89f, 3.97f, 161.22f, 5.74f, 164.95f, 7.66f);
        fill1Path.cubicTo(175.6f, 13.14f, 187.29f, 18.61f, 199.65f, 23.73f);
        fill1Path.cubicTo(223.17f, 33.45f, 246.25f, 40.67f, 267.8f, 44.35f);
        fill1Path.cubicTo(278.09f, 46.11f, 287.87f, 47.02f, 297.06f, 47.02f);
        fill1Path.cubicTo(298.68f, 47.02f, 300f, 48.34f, 300f, 49.96f);
        fill1Path.lineTo(300f, 88.18f);
        fill1Path.cubicTo(300f, 89.8f, 298.68f, 91.12f, 297.06f, 91.12f);
        fill1Path.cubicTo(295.43f, 91.12f, 294.12f, 89.8f, 294.12f, 88.18f);
        fill1Path.lineTo(294.12f, 52.87f);
        fill1Path.cubicTo(285.45f, 52.7f, 276.33f, 51.77f, 266.81f, 50.15f);
        fill1Path.cubicTo(244.77f, 46.39f, 221.3f, 39.04f, 197.41f, 29.16f);
        fill1Path.cubicTo(184.89f, 23.98f, 173.05f, 18.44f, 162.26f, 12.89f);
        fill1Path.cubicTo(158.48f, 10.95f, 155.1f, 9.14f, 152.16f, 7.52f);
        fill1Path.cubicTo(151.36f, 7.08f, 150.64f, 6.67f, 150f, 6.31f);
        fill1Path.cubicTo(149.36f, 6.67f, 148.64f, 7.08f, 147.84f, 7.52f);
        fill1Path.cubicTo(144.9f, 9.14f, 141.52f, 10.95f, 137.74f, 12.89f);
        fill1Path.cubicTo(126.95f, 18.44f, 115.11f, 23.98f, 102.59f, 29.16f);
        fill1Path.cubicTo(78.7f, 39.04f, 55.23f, 46.39f, 33.19f, 50.15f);
        fill1Path.cubicTo(23.67f, 51.77f, 14.55f, 52.7f, 5.88f, 52.87f);
        fill1Path.lineTo(5.88f, 145.5f);
        fill1Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill1Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill1Path, paint);

        // Fill-4
        RectF fill4Rect = CacheForShield.fill4Rect;
        fill4Rect.set(230.88f, 232.2f, 280.88f, 282.17f);
        Path fill4Path = CacheForShield.fill4Path;
        fill4Path.reset();
        fill4Path.moveTo(255.88f, 276.29f);
        fill4Path.cubicTo(245.32f, 276.29f, 236.76f, 267.73f, 236.76f, 257.18f);
        fill4Path.cubicTo(236.76f, 246.63f, 245.32f, 238.08f, 255.88f, 238.08f);
        fill4Path.cubicTo(266.44f, 238.08f, 275f, 246.63f, 275f, 257.18f);
        fill4Path.cubicTo(275f, 267.73f, 266.44f, 276.29f, 255.88f, 276.29f);
        fill4Path.close();
        fill4Path.moveTo(255.88f, 232.2f);
        fill4Path.cubicTo(242.08f, 232.2f, 230.88f, 243.38f, 230.88f, 257.18f);
        fill4Path.cubicTo(230.88f, 270.98f, 242.08f, 282.17f, 255.88f, 282.17f);
        fill4Path.cubicTo(269.69f, 282.17f, 280.88f, 270.98f, 280.88f, 257.18f);
        fill4Path.cubicTo(280.88f, 243.38f, 269.69f, 232.2f, 255.88f, 232.2f);
        fill4Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill4Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill4Path, paint);

        // Fill-6
        RectF fill6Rect = CacheForShield.fill6Rect;
        fill6Rect.set(241.91f, 259.75f, 270.54f, 271.14f);
        Path fill6Path = CacheForShield.fill6Path;
        fill6Path.reset();
        fill6Path.moveTo(269.16f, 260.2f);
        fill6Path.cubicTo(267.78f, 259.34f, 265.97f, 259.76f, 265.11f, 261.14f);
        fill6Path.cubicTo(263.37f, 263.91f, 260.66f, 265.27f, 256.57f, 265.27f);
        fill6Path.cubicTo(252.42f, 265.27f, 249.39f, 263.84f, 247.21f, 260.93f);
        fill6Path.cubicTo(246.23f, 259.63f, 244.39f, 259.37f, 243.09f, 260.34f);
        fill6Path.cubicTo(241.79f, 261.32f, 241.53f, 263.16f, 242.5f, 264.46f);
        fill6Path.cubicTo(245.83f, 268.89f, 250.62f, 271.14f, 256.57f, 271.14f);
        fill6Path.cubicTo(262.6f, 271.14f, 267.23f, 268.83f, 270.09f, 264.25f);
        fill6Path.cubicTo(270.96f, 262.88f, 270.54f, 261.06f, 269.16f, 260.2f);
        fill6Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill6Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill6Path, paint);

        // Fill-8
        RectF fill8Rect = CacheForShield.fill8Rect;
        fill8Rect.set(259.6f, 247.83f, 267f, 255.23f);
        Path fill8Path = CacheForShield.fill8Path;
        fill8Path.reset();
        fill8Path.addOval(fill8Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill8Path, paint);

        // Fill-10
        RectF fill10Rect = CacheForShield.fill10Rect;
        fill10Rect.set(245.85f, 247.83f, 253.25f, 255.23f);
        Path fill10Path = CacheForShield.fill10Path;
        fill10Path.reset();
        fill10Path.addOval(fill10Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill10Path, paint);

        // Fill-12
        RectF fill12Rect = CacheForShield.fill12Rect;
        fill12Rect.set(44.12f, 61.73f, 300f, 388f);
        Path fill12Path = CacheForShield.fill12Path;
        fill12Path.reset();
        fill12Path.moveTo(291.17f, 97f);
        fill12Path.lineTo(238.22f, 97f);
        fill12Path.cubicTo(236.59f, 97f, 235.28f, 95.68f, 235.28f, 94.06f);
        fill12Path.cubicTo(235.28f, 92.44f, 236.59f, 91.12f, 238.22f, 91.12f);
        fill12Path.cubicTo(238.38f, 91.12f, 238.55f, 91.14f, 238.74f, 91.17f);
        fill12Path.cubicTo(240.97f, 91.57f, 242.8f, 89.41f, 242.03f, 87.28f);
        fill12Path.cubicTo(241.46f, 85.7f, 241.16f, 84.02f, 241.16f, 82.3f);
        fill12Path.cubicTo(241.16f, 74.19f, 247.75f, 67.61f, 255.87f, 67.61f);
        fill12Path.cubicTo(262.17f, 67.61f, 267.71f, 71.6f, 269.75f, 77.45f);
        fill12Path.cubicTo(270.2f, 78.71f, 271.44f, 79.51f, 272.77f, 79.4f);
        fill12Path.cubicTo(273.11f, 79.38f, 273.33f, 79.36f, 273.52f, 79.36f);
        fill12Path.cubicTo(278.4f, 79.36f, 282.35f, 83.31f, 282.35f, 88.18f);
        fill12Path.cubicTo(282.35f, 89.8f, 283.67f, 91.12f, 285.29f, 91.12f);
        fill12Path.cubicTo(286.91f, 91.12f, 288.23f, 89.8f, 288.23f, 88.18f);
        fill12Path.cubicTo(288.23f, 80.39f, 282.16f, 74.02f, 274.49f, 73.52f);
        fill12Path.cubicTo(271.14f, 66.43f, 263.96f, 61.73f, 255.87f, 61.73f);
        fill12Path.cubicTo(244.5f, 61.73f, 235.28f, 70.94f, 235.28f, 82.3f);
        fill12Path.cubicTo(235.28f, 83.43f, 235.37f, 84.55f, 235.55f, 85.65f);
        fill12Path.cubicTo(231.98f, 86.78f, 229.39f, 90.12f, 229.39f, 94.06f);
        fill12Path.cubicTo(229.39f, 98.93f, 233.34f, 102.88f, 238.22f, 102.88f);
        fill12Path.lineTo(291.17f, 102.88f);
        fill12Path.cubicTo(293.47f, 102.88f, 294.12f, 103.52f, 294.12f, 105.82f);
        fill12Path.lineTo(294.12f, 238.09f);
        fill12Path.cubicTo(294.12f, 281.78f, 273.8f, 318.68f, 239.33f, 346.02f);
        fill12Path.cubicTo(211.17f, 368.35f, 175.19f, 382.12f, 149.96f, 382.12f);
        fill12Path.cubicTo(136.66f, 382.12f, 119.43f, 378.08f, 102f, 370.63f);
        fill12Path.cubicTo(82.73f, 362.4f, 64.34f, 350.56f, 49.09f, 336.02f);
        fill12Path.cubicTo(47.91f, 334.9f, 46.05f, 334.95f, 44.93f, 336.12f);
        fill12Path.cubicTo(43.81f, 337.3f, 43.85f, 339.16f, 45.03f, 340.28f);
        fill12Path.cubicTo(75.57f, 369.39f, 119.14f, 388f, 149.96f, 388f);
        fill12Path.cubicTo(176.58f, 388f, 213.83f, 373.74f, 242.99f, 350.62f);
        fill12Path.cubicTo(278.79f, 322.24f, 300f, 283.7f, 300f, 238.09f);
        fill12Path.lineTo(300f, 105.82f);
        fill12Path.cubicTo(300f, 100.28f, 296.72f, 97f, 291.17f, 97f);
        fill12Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill12Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill12Path, paint);

        // Fill-14
        RectF fill14Rect = CacheForShield.fill14Rect;
        fill14Rect.set(17.65f, 61.71f, 58.82f, 114.62f);
        Path fill14Path = CacheForShield.fill14Path;
        fill14Path.reset();
        fill14Path.moveTo(55.88f, 114.62f);
        fill14Path.lineTo(20.59f, 114.62f);
        fill14Path.cubicTo(18.96f, 114.62f, 17.65f, 113.31f, 17.65f, 111.68f);
        fill14Path.lineTo(17.65f, 64.65f);
        fill14Path.cubicTo(17.65f, 63.03f, 18.96f, 61.71f, 20.59f, 61.71f);
        fill14Path.lineTo(44.12f, 61.71f);
        fill14Path.cubicTo(44.9f, 61.71f, 45.65f, 62.02f, 46.2f, 62.57f);
        fill14Path.lineTo(57.96f, 74.33f);
        fill14Path.cubicTo(58.51f, 74.88f, 58.82f, 75.63f, 58.82f, 76.41f);
        fill14Path.lineTo(58.82f, 111.68f);
        fill14Path.cubicTo(58.82f, 113.31f, 57.51f, 114.62f, 55.88f, 114.62f);
        fill14Path.close();
        fill14Path.moveTo(52.94f, 108.74f);
        fill14Path.lineTo(52.94f, 77.63f);
        fill14Path.lineTo(42.9f, 67.59f);
        fill14Path.lineTo(23.53f, 67.59f);
        fill14Path.lineTo(23.53f, 108.74f);
        fill14Path.lineTo(52.94f, 108.74f);
        fill14Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill14Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill14Path, paint);

        // Fill-16
        RectF fill16Rect = CacheForShield.fill16Rect;
        fill16Rect.set(29f, 81f, 47f, 87f);
        Path fill16Path = CacheForShield.fill16Path;
        fill16Path.reset();
        fill16Path.addRoundRect(fill16Rect, 4.2f, 4.2f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill16Path, paint);

        // Fill-18
        RectF fill18Rect = CacheForShield.fill18Rect;
        fill18Rect.set(29f, 91f, 47f, 97f);
        Path fill18Path = CacheForShield.fill18Path;
        fill18Path.reset();
        fill18Path.addRoundRect(fill18Rect, 4.2f, 4.2f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill18Path, paint);

        // Fill-20
        RectF fill20Rect = CacheForShield.fill20Rect;
        fill20Rect.set(147.06f, 329.2f, 200f, 376.23f);
        Path fill20Path = CacheForShield.fill20Path;
        fill20Path.reset();
        fill20Path.moveTo(162.98f, 364.55f);
        fill20Path.lineTo(152.07f, 375.37f);
        fill20Path.cubicTo(150.22f, 377.22f, 147.06f, 375.9f, 147.06f, 373.29f);
        fill20Path.lineTo(147.06f, 338.02f);
        fill20Path.cubicTo(147.06f, 333.15f, 151.01f, 329.2f, 155.88f, 329.2f);
        fill20Path.lineTo(191.1f, 329.2f);
        fill20Path.cubicTo(196.01f, 329.2f, 200f, 333.18f, 200f, 338.1f);
        fill20Path.lineTo(200f, 355.73f);
        fill20Path.cubicTo(200f, 360.6f, 196.05f, 364.55f, 191.18f, 364.55f);
        fill20Path.lineTo(162.98f, 364.55f);
        fill20Path.close();
        fill20Path.moveTo(152.94f, 366.23f);
        fill20Path.lineTo(159.69f, 359.53f);
        fill20Path.cubicTo(160.24f, 358.98f, 160.99f, 358.67f, 161.76f, 358.67f);
        fill20Path.lineTo(191.18f, 358.67f);
        fill20Path.cubicTo(192.8f, 358.67f, 194.12f, 357.36f, 194.12f, 355.73f);
        fill20Path.lineTo(194.12f, 338.1f);
        fill20Path.cubicTo(194.12f, 336.43f, 192.76f, 335.08f, 191.1f, 335.08f);
        fill20Path.lineTo(155.88f, 335.08f);
        fill20Path.cubicTo(154.26f, 335.08f, 152.94f, 336.39f, 152.94f, 338.02f);
        fill20Path.lineTo(152.94f, 366.23f);
        fill20Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill20Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill20Path, paint);

        // Fill-22
        RectF fill22Rect = CacheForShield.fill22Rect;
        fill22Rect.set(159f, 344.1f, 165f, 350.1f);
        Path fill22Path = CacheForShield.fill22Path;
        fill22Path.reset();
        fill22Path.addOval(fill22Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill22Path, paint);

        // Fill-24
        RectF fill24Rect = CacheForShield.fill24Rect;
        fill24Rect.set(171f, 344.1f, 176f, 350.1f);
        Path fill24Path = CacheForShield.fill24Path;
        fill24Path.reset();
        fill24Path.addOval(fill24Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill24Path, paint);

        // Fill-26
        RectF fill26Rect = CacheForShield.fill26Rect;
        fill26Rect.set(182f, 344.1f, 188f, 350.1f);
        Path fill26Path = CacheForShield.fill26Path;
        fill26Path.reset();
        fill26Path.addOval(fill26Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill26Path, paint);

        // Fill-28
        RectF fill28Rect = CacheForShield.fill28Rect;
        fill28Rect.set(135.29f, 188.11f, 164.71f, 217.5f);
        Path fill28Path = CacheForShield.fill28Path;
        fill28Path.reset();
        fill28Path.moveTo(150f, 193.99f);
        fill28Path.cubicTo(154.87f, 193.99f, 158.82f, 197.93f, 158.82f, 202.8f);
        fill28Path.cubicTo(158.82f, 207.67f, 154.87f, 211.62f, 150f, 211.62f);
        fill28Path.cubicTo(145.13f, 211.62f, 141.18f, 207.67f, 141.18f, 202.8f);
        fill28Path.cubicTo(141.18f, 197.93f, 145.13f, 193.99f, 150f, 193.99f);
        fill28Path.close();
        fill28Path.moveTo(150f, 217.5f);
        fill28Path.cubicTo(158.12f, 217.5f, 164.71f, 210.92f, 164.71f, 202.8f);
        fill28Path.cubicTo(164.71f, 194.69f, 158.12f, 188.11f, 150f, 188.11f);
        fill28Path.cubicTo(141.88f, 188.11f, 135.29f, 194.69f, 135.29f, 202.8f);
        fill28Path.cubicTo(135.29f, 210.92f, 141.88f, 217.5f, 150f, 217.5f);
        fill28Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill28Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill28Path, paint);

        // Fill-30
        RectF fill30Rect = CacheForShield.fill30Rect;
        fill30Rect.set(129.41f, 217.5f, 170.59f, 241.02f);
        Path fill30Path = CacheForShield.fill30Path;
        fill30Path.reset();
        fill30Path.moveTo(164.71f, 235.14f);
        fill30Path.lineTo(135.29f, 235.14f);
        fill30Path.lineTo(135.29f, 226.32f);
        fill30Path.cubicTo(135.29f, 224.9f, 135.73f, 224.24f, 136.61f, 223.8f);
        fill30Path.cubicTo(136.93f, 223.64f, 137.31f, 223.52f, 137.69f, 223.45f);
        fill30Path.lineTo(148.68f, 228.95f);
        fill30Path.cubicTo(149.51f, 229.36f, 150.49f, 229.36f, 151.32f, 228.95f);
        fill30Path.lineTo(162.39f, 223.41f);
        fill30Path.cubicTo(163.39f, 223.53f, 163.91f, 223.96f, 164.28f, 224.69f);
        fill30Path.cubicTo(164.46f, 225.05f, 164.58f, 225.47f, 164.65f, 225.88f);
        fill30Path.cubicTo(164.69f, 226.12f, 164.71f, 226.29f, 164.71f, 226.32f);
        fill30Path.lineTo(164.71f, 235.14f);
        fill30Path.close();
        fill30Path.moveTo(170.46f, 224.92f);
        fill30Path.cubicTo(170.3f, 223.96f, 170.01f, 222.99f, 169.54f, 222.06f);
        fill30Path.cubicTo(168.14f, 219.26f, 165.49f, 217.5f, 161.76f, 217.5f);
        fill30Path.cubicTo(161.31f, 217.5f, 160.86f, 217.61f, 160.45f, 217.81f);
        fill30Path.lineTo(150f, 223.03f);
        fill30Path.lineTo(139.55f, 217.81f);
        fill30Path.cubicTo(139.14f, 217.61f, 138.69f, 217.5f, 138.24f, 217.5f);
        fill30Path.cubicTo(137.9f, 217.5f, 137.42f, 217.53f, 136.83f, 217.63f);
        fill30Path.cubicTo(135.87f, 217.79f, 134.91f, 218.08f, 133.98f, 218.55f);
        fill30Path.cubicTo(131.18f, 219.95f, 129.41f, 222.59f, 129.41f, 226.32f);
        fill30Path.lineTo(129.41f, 238.08f);
        fill30Path.cubicTo(129.41f, 239.7f, 130.73f, 241.02f, 132.35f, 241.02f);
        fill30Path.lineTo(167.65f, 241.02f);
        fill30Path.cubicTo(169.27f, 241.02f, 170.59f, 239.7f, 170.59f, 238.08f);
        fill30Path.lineTo(170.59f, 226.32f);
        fill30Path.cubicTo(170.59f, 225.98f, 170.55f, 225.5f, 170.46f, 224.92f);
        fill30Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill30Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill30Path, paint);

        // Fill-32
        RectF fill32Rect = CacheForShield.fill32Rect;
        fill32Rect.set(135.29f, 130.05f, 164.71f, 159.45f);
        Path fill32Path = CacheForShield.fill32Path;
        fill32Path.reset();
        fill32Path.moveTo(150f, 135.93f);
        fill32Path.cubicTo(154.87f, 135.93f, 158.82f, 139.88f, 158.82f, 144.75f);
        fill32Path.cubicTo(158.82f, 149.62f, 154.87f, 153.57f, 150f, 153.57f);
        fill32Path.cubicTo(145.13f, 153.57f, 141.18f, 149.62f, 141.18f, 144.75f);
        fill32Path.cubicTo(141.18f, 139.88f, 145.13f, 135.93f, 150f, 135.93f);
        fill32Path.close();
        fill32Path.moveTo(150f, 159.45f);
        fill32Path.cubicTo(158.12f, 159.45f, 164.71f, 152.87f, 164.71f, 144.75f);
        fill32Path.cubicTo(164.71f, 136.63f, 158.12f, 130.05f, 150f, 130.05f);
        fill32Path.cubicTo(141.88f, 130.05f, 135.29f, 136.63f, 135.29f, 144.75f);
        fill32Path.cubicTo(135.29f, 152.87f, 141.88f, 159.45f, 150f, 159.45f);
        fill32Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill32Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill32Path, paint);

        // Fill-34
        RectF fill34Rect = CacheForShield.fill34Rect;
        fill34Rect.set(129.41f, 159.45f, 170.59f, 182.96f);
        Path fill34Path = CacheForShield.fill34Path;
        fill34Path.reset();
        fill34Path.moveTo(164.71f, 177.08f);
        fill34Path.lineTo(135.29f, 177.08f);
        fill34Path.lineTo(135.29f, 168.27f);
        fill34Path.cubicTo(135.29f, 166.85f, 135.73f, 166.19f, 136.61f, 165.75f);
        fill34Path.cubicTo(136.93f, 165.59f, 137.31f, 165.47f, 137.69f, 165.4f);
        fill34Path.lineTo(148.68f, 170.89f);
        fill34Path.cubicTo(149.51f, 171.31f, 150.49f, 171.31f, 151.32f, 170.89f);
        fill34Path.lineTo(162.39f, 165.36f);
        fill34Path.cubicTo(163.39f, 165.48f, 163.91f, 165.91f, 164.28f, 166.64f);
        fill34Path.cubicTo(164.46f, 167f, 164.58f, 167.41f, 164.65f, 167.83f);
        fill34Path.cubicTo(164.69f, 168.07f, 164.71f, 168.23f, 164.71f, 168.27f);
        fill34Path.lineTo(164.71f, 177.08f);
        fill34Path.close();
        fill34Path.moveTo(170.46f, 166.86f);
        fill34Path.cubicTo(170.3f, 165.9f, 170.01f, 164.94f, 169.54f, 164.01f);
        fill34Path.cubicTo(168.14f, 161.21f, 165.49f, 159.45f, 161.76f, 159.45f);
        fill34Path.cubicTo(161.31f, 159.45f, 160.86f, 159.55f, 160.45f, 159.76f);
        fill34Path.lineTo(150f, 164.98f);
        fill34Path.lineTo(139.55f, 159.76f);
        fill34Path.cubicTo(139.14f, 159.55f, 138.69f, 159.45f, 138.24f, 159.45f);
        fill34Path.cubicTo(137.9f, 159.45f, 137.42f, 159.48f, 136.83f, 159.58f);
        fill34Path.cubicTo(135.87f, 159.74f, 134.91f, 160.03f, 133.98f, 160.49f);
        fill34Path.cubicTo(131.18f, 161.89f, 129.41f, 164.54f, 129.41f, 168.27f);
        fill34Path.lineTo(129.41f, 180.02f);
        fill34Path.cubicTo(129.41f, 181.65f, 130.73f, 182.96f, 132.35f, 182.96f);
        fill34Path.lineTo(167.65f, 182.96f);
        fill34Path.cubicTo(169.27f, 182.96f, 170.59f, 181.65f, 170.59f, 180.02f);
        fill34Path.lineTo(170.59f, 168.27f);
        fill34Path.cubicTo(170.59f, 167.93f, 170.55f, 167.45f, 170.46f, 166.86f);
        fill34Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill34Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill34Path, paint);

        // Fill-36
        RectF fill36Rect = CacheForShield.fill36Rect;
        fill36Rect.set(185.29f, 170.47f, 214.71f, 199.86f);
        Path fill36Path = CacheForShield.fill36Path;
        fill36Path.reset();
        fill36Path.moveTo(200f, 176.35f);
        fill36Path.cubicTo(204.87f, 176.35f, 208.82f, 180.3f, 208.82f, 185.17f);
        fill36Path.cubicTo(208.82f, 190.04f, 204.87f, 193.99f, 200f, 193.99f);
        fill36Path.cubicTo(195.13f, 193.99f, 191.18f, 190.04f, 191.18f, 185.17f);
        fill36Path.cubicTo(191.18f, 180.3f, 195.13f, 176.35f, 200f, 176.35f);
        fill36Path.close();
        fill36Path.moveTo(200f, 199.86f);
        fill36Path.cubicTo(208.12f, 199.86f, 214.71f, 193.28f, 214.71f, 185.17f);
        fill36Path.cubicTo(214.71f, 177.05f, 208.12f, 170.47f, 200f, 170.47f);
        fill36Path.cubicTo(191.88f, 170.47f, 185.29f, 177.05f, 185.29f, 185.17f);
        fill36Path.cubicTo(185.29f, 193.28f, 191.88f, 199.86f, 200f, 199.86f);
        fill36Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill36Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill36Path, paint);

        // Fill-38
        RectF fill38Rect = CacheForShield.fill38Rect;
        fill38Rect.set(179.41f, 199.86f, 220.59f, 223.38f);
        Path fill38Path = CacheForShield.fill38Path;
        fill38Path.reset();
        fill38Path.moveTo(214.71f, 217.5f);
        fill38Path.lineTo(185.29f, 217.5f);
        fill38Path.lineTo(185.29f, 208.68f);
        fill38Path.cubicTo(185.29f, 207.26f, 185.74f, 206.6f, 186.61f, 206.17f);
        fill38Path.cubicTo(186.93f, 206f, 187.31f, 205.89f, 187.69f, 205.82f);
        fill38Path.lineTo(198.68f, 211.31f);
        fill38Path.cubicTo(199.51f, 211.73f, 200.49f, 211.73f, 201.32f, 211.31f);
        fill38Path.lineTo(212.39f, 205.78f);
        fill38Path.cubicTo(213.39f, 205.9f, 213.91f, 206.32f, 214.28f, 207.06f);
        fill38Path.cubicTo(214.46f, 207.42f, 214.58f, 207.83f, 214.65f, 208.25f);
        fill38Path.cubicTo(214.69f, 208.49f, 214.71f, 208.65f, 214.71f, 208.68f);
        fill38Path.lineTo(214.71f, 217.5f);
        fill38Path.close();
        fill38Path.moveTo(220.46f, 207.28f);
        fill38Path.cubicTo(220.3f, 206.32f, 220.01f, 205.36f, 219.54f, 204.43f);
        fill38Path.cubicTo(218.14f, 201.63f, 215.49f, 199.86f, 211.76f, 199.86f);
        fill38Path.cubicTo(211.31f, 199.86f, 210.86f, 199.97f, 210.45f, 200.17f);
        fill38Path.lineTo(200f, 205.4f);
        fill38Path.lineTo(189.55f, 200.17f);
        fill38Path.cubicTo(189.14f, 199.97f, 188.69f, 199.86f, 188.24f, 199.86f);
        fill38Path.cubicTo(187.9f, 199.86f, 187.42f, 199.9f, 186.83f, 200f);
        fill38Path.cubicTo(185.87f, 200.16f, 184.91f, 200.45f, 183.98f, 200.91f);
        fill38Path.cubicTo(181.18f, 202.31f, 179.41f, 204.96f, 179.41f, 208.68f);
        fill38Path.lineTo(179.41f, 220.44f);
        fill38Path.cubicTo(179.41f, 222.06f, 180.73f, 223.38f, 182.35f, 223.38f);
        fill38Path.lineTo(217.65f, 223.38f);
        fill38Path.cubicTo(219.27f, 223.38f, 220.59f, 222.06f, 220.59f, 220.44f);
        fill38Path.lineTo(220.59f, 208.68f);
        fill38Path.cubicTo(220.59f, 208.35f, 220.55f, 207.87f, 220.46f, 207.28f);
        fill38Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill38Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill38Path, paint);

        // Fill-40
        RectF fill40Rect = CacheForShield.fill40Rect;
        fill40Rect.set(85.29f, 171.2f, 114.71f, 200.6f);
        Path fill40Path = CacheForShield.fill40Path;
        fill40Path.reset();
        fill40Path.moveTo(100f, 177.08f);
        fill40Path.cubicTo(104.87f, 177.08f, 108.82f, 181.03f, 108.82f, 185.9f);
        fill40Path.cubicTo(108.82f, 190.77f, 104.87f, 194.72f, 100f, 194.72f);
        fill40Path.cubicTo(95.13f, 194.72f, 91.18f, 190.77f, 91.18f, 185.9f);
        fill40Path.cubicTo(91.18f, 181.03f, 95.13f, 177.08f, 100f, 177.08f);
        fill40Path.close();
        fill40Path.moveTo(100f, 200.6f);
        fill40Path.cubicTo(108.12f, 200.6f, 114.71f, 194.02f, 114.71f, 185.9f);
        fill40Path.cubicTo(114.71f, 177.79f, 108.12f, 171.2f, 100f, 171.2f);
        fill40Path.cubicTo(91.88f, 171.2f, 85.29f, 177.79f, 85.29f, 185.9f);
        fill40Path.cubicTo(85.29f, 194.02f, 91.88f, 200.6f, 100f, 200.6f);
        fill40Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill40Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill40Path, paint);

        // Fill-42
        RectF fill42Rect = CacheForShield.fill42Rect;
        fill42Rect.set(79.41f, 200.6f, 120.59f, 224.11f);
        Path fill42Path = CacheForShield.fill42Path;
        fill42Path.reset();
        fill42Path.moveTo(114.71f, 218.24f);
        fill42Path.lineTo(85.29f, 218.24f);
        fill42Path.lineTo(85.29f, 209.42f);
        fill42Path.cubicTo(85.29f, 208f, 85.73f, 207.34f, 86.61f, 206.9f);
        fill42Path.cubicTo(86.93f, 206.74f, 87.31f, 206.62f, 87.69f, 206.55f);
        fill42Path.lineTo(98.68f, 212.05f);
        fill42Path.cubicTo(99.51f, 212.46f, 100.49f, 212.46f, 101.32f, 212.05f);
        fill42Path.lineTo(112.39f, 206.51f);
        fill42Path.cubicTo(113.39f, 206.63f, 113.91f, 207.06f, 114.28f, 207.79f);
        fill42Path.cubicTo(114.46f, 208.15f, 114.58f, 208.56f, 114.65f, 208.98f);
        fill42Path.cubicTo(114.69f, 209.22f, 114.71f, 209.39f, 114.71f, 209.42f);
        fill42Path.lineTo(114.71f, 218.24f);
        fill42Path.close();
        fill42Path.moveTo(120.46f, 208.02f);
        fill42Path.cubicTo(120.3f, 207.06f, 120.01f, 206.09f, 119.54f, 205.16f);
        fill42Path.cubicTo(118.14f, 202.36f, 115.49f, 200.6f, 111.76f, 200.6f);
        fill42Path.cubicTo(111.31f, 200.6f, 110.86f, 200.71f, 110.45f, 200.91f);
        fill42Path.lineTo(100f, 206.13f);
        fill42Path.lineTo(89.55f, 200.91f);
        fill42Path.cubicTo(89.14f, 200.71f, 88.69f, 200.6f, 88.24f, 200.6f);
        fill42Path.cubicTo(87.9f, 200.6f, 87.42f, 200.63f, 86.83f, 200.73f);
        fill42Path.cubicTo(85.87f, 200.89f, 84.91f, 201.18f, 83.98f, 201.64f);
        fill42Path.cubicTo(81.18f, 203.04f, 79.41f, 205.69f, 79.41f, 209.42f);
        fill42Path.lineTo(79.41f, 221.17f);
        fill42Path.cubicTo(79.41f, 222.8f, 80.73f, 224.11f, 82.35f, 224.11f);
        fill42Path.lineTo(117.65f, 224.11f);
        fill42Path.cubicTo(119.27f, 224.11f, 120.59f, 222.8f, 120.59f, 221.17f);
        fill42Path.lineTo(120.59f, 209.42f);
        fill42Path.cubicTo(120.59f, 209.08f, 120.55f, 208.6f, 120.46f, 208.02f);
        fill42Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill42Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill42Path, paint);

        // Fill-44
        RectF fill44Rect = CacheForShield.fill44Rect;
        fill44Rect.set(-0f, 138.13f, 73.53f, 329.2f);
        Path fill44Path = CacheForShield.fill44Path;
        fill44Path.reset();
        fill44Path.moveTo(70.59f, 323.32f);
        fill44Path.lineTo(66.91f, 323.32f);
        fill44Path.cubicTo(66.67f, 323.32f, 66.65f, 323.31f, 66.05f, 322.71f);
        fill44Path.cubicTo(64.45f, 321.11f, 63.23f, 320.38f, 61.03f, 320.38f);
        fill44Path.cubicTo(58.82f, 320.38f, 57.61f, 321.11f, 56.01f, 322.71f);
        fill44Path.cubicTo(55.41f, 323.31f, 55.39f, 323.32f, 55.15f, 323.32f);
        fill44Path.cubicTo(54.9f, 323.32f, 54.89f, 323.31f, 54.29f, 322.71f);
        fill44Path.cubicTo(52.68f, 321.11f, 51.47f, 320.38f, 49.26f, 320.38f);
        fill44Path.cubicTo(47.06f, 320.38f, 45.85f, 321.11f, 44.24f, 322.71f);
        fill44Path.cubicTo(43.64f, 323.31f, 43.63f, 323.32f, 43.38f, 323.32f);
        fill44Path.cubicTo(43.14f, 323.32f, 43.12f, 323.31f, 42.52f, 322.71f);
        fill44Path.cubicTo(40.92f, 321.11f, 39.7f, 320.38f, 37.5f, 320.38f);
        fill44Path.cubicTo(37.02f, 320.38f, 35.78f, 319.71f, 34.26f, 318.41f);
        fill44Path.cubicTo(32.74f, 317.13f, 31.08f, 315.36f, 29.57f, 313.48f);
        fill44Path.cubicTo(14.35f, 291.5f, 5.88f, 265.77f, 5.88f, 238.08f);
        fill44Path.lineTo(5.88f, 169.11f);
        fill44Path.cubicTo(5.88f, 169.09f, 5.88f, 169.07f, 5.88f, 169.06f);
        fill44Path.cubicTo(5.88f, 169.04f, 5.88f, 169.02f, 5.88f, 169f);
        fill44Path.cubicTo(5.88f, 160f, 10.4f, 155.86f, 20.61f, 155.77f);
        fill44Path.lineTo(44.85f, 155.77f);
        fill44Path.cubicTo(45.63f, 155.77f, 46.38f, 155.46f, 46.93f, 154.91f);
        fill44Path.lineTo(53.68f, 148.17f);
        fill44Path.lineTo(53.68f, 151.36f);
        fill44Path.cubicTo(53.68f, 152.99f, 54.99f, 154.3f, 56.62f, 154.3f);
        fill44Path.cubicTo(58.24f, 154.3f, 59.56f, 152.99f, 59.56f, 151.36f);
        fill44Path.lineTo(59.56f, 141.08f);
        fill44Path.cubicTo(59.56f, 140.88f, 59.54f, 140.69f, 59.5f, 140.51f);
        fill44Path.cubicTo(59.5f, 140.49f, 59.49f, 140.46f, 59.48f, 140.43f);
        fill44Path.cubicTo(59.45f, 140.26f, 59.39f, 140.1f, 59.33f, 139.94f);
        fill44Path.cubicTo(59.33f, 139.94f, 59.33f, 139.93f, 59.32f, 139.93f);
        fill44Path.cubicTo(59.11f, 139.41f, 58.75f, 138.98f, 58.31f, 138.68f);
        fill44Path.cubicTo(58.28f, 138.66f, 58.25f, 138.63f, 58.21f, 138.61f);
        fill44Path.cubicTo(58.09f, 138.53f, 57.95f, 138.46f, 57.81f, 138.4f);
        fill44Path.cubicTo(57.79f, 138.39f, 57.77f, 138.37f, 57.75f, 138.36f);
        fill44Path.cubicTo(57.59f, 138.3f, 57.42f, 138.25f, 57.26f, 138.21f);
        fill44Path.cubicTo(57.22f, 138.2f, 57.18f, 138.2f, 57.15f, 138.19f);
        fill44Path.cubicTo(56.93f, 138.15f, 56.7f, 138.13f, 56.47f, 138.14f);
        fill44Path.lineTo(46.32f, 138.14f);
        fill44Path.cubicTo(44.7f, 138.14f, 43.38f, 139.45f, 43.38f, 141.08f);
        fill44Path.cubicTo(43.38f, 142.7f, 44.7f, 144.02f, 46.32f, 144.02f);
        fill44Path.lineTo(49.52f, 144.02f);
        fill44Path.lineTo(43.63f, 149.89f);
        fill44Path.lineTo(20.59f, 149.89f);
        fill44Path.cubicTo(7.24f, 150f, -0f, 156.64f, -0f, 169f);
        fill44Path.cubicTo(-0f, 169.02f, 0.01f, 169.04f, 0.01f, 169.06f);
        fill44Path.cubicTo(0.01f, 169.07f, -0f, 169.09f, -0f, 169.11f);
        fill44Path.lineTo(-0f, 238.08f);
        fill44Path.cubicTo(-0f, 267.04f, 8.87f, 293.95f, 24.79f, 316.91f);
        fill44Path.cubicTo(24.81f, 316.94f, 24.83f, 316.96f, 24.85f, 316.99f);
        fill44Path.cubicTo(24.87f, 317.01f, 24.89f, 317.04f, 24.91f, 317.07f);
        fill44Path.cubicTo(29.27f, 322.51f, 33.67f, 326.26f, 37.5f, 326.26f);
        fill44Path.cubicTo(37.75f, 326.26f, 37.76f, 326.27f, 38.36f, 326.87f);
        fill44Path.cubicTo(39.97f, 328.47f, 41.18f, 329.2f, 43.38f, 329.2f);
        fill44Path.cubicTo(45.59f, 329.2f, 46.8f, 328.47f, 48.4f, 326.87f);
        fill44Path.cubicTo(49f, 326.27f, 49.02f, 326.26f, 49.26f, 326.26f);
        fill44Path.cubicTo(49.51f, 326.26f, 49.53f, 326.27f, 50.13f, 326.87f);
        fill44Path.cubicTo(51.73f, 328.47f, 52.94f, 329.2f, 55.15f, 329.2f);
        fill44Path.cubicTo(57.35f, 329.2f, 58.56f, 328.47f, 60.17f, 326.87f);
        fill44Path.cubicTo(60.77f, 326.27f, 60.78f, 326.26f, 61.03f, 326.26f);
        fill44Path.cubicTo(61.28f, 326.26f, 61.29f, 326.27f, 61.89f, 326.87f);
        fill44Path.cubicTo(63.5f, 328.47f, 64.71f, 329.2f, 66.91f, 329.2f);
        fill44Path.lineTo(70.59f, 329.2f);
        fill44Path.cubicTo(72.21f, 329.2f, 73.53f, 327.88f, 73.53f, 326.26f);
        fill44Path.cubicTo(73.53f, 324.63f, 72.21f, 323.32f, 70.59f, 323.32f);
        fill44Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill44Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill44Path, paint);

        // Fill-47
        RectF fill47Rect = CacheForShield.fill47Rect;
        fill47Rect.set(92.65f, 249.83f, 113.24f, 317.44f);
        Path fill47Path = CacheForShield.fill47Path;
        fill47Path.reset();
        fill47Path.moveTo(102.94f, 307.93f);
        fill47Path.lineTo(100.35f, 302.74f);
        fill47Path.lineTo(105.54f, 302.74f);
        fill47Path.lineTo(102.94f, 307.93f);
        fill47Path.close();
        fill47Path.moveTo(98.53f, 259.39f);
        fill47Path.lineTo(107.35f, 259.39f);
        fill47Path.lineTo(107.35f, 255.71f);
        fill47Path.lineTo(98.53f, 255.71f);
        fill47Path.lineTo(98.53f, 259.39f);
        fill47Path.close();
        fill47Path.moveTo(98.53f, 296.86f);
        fill47Path.lineTo(107.35f, 296.86f);
        fill47Path.lineTo(107.35f, 265.27f);
        fill47Path.lineTo(98.53f, 265.27f);
        fill47Path.lineTo(98.53f, 296.86f);
        fill47Path.close();
        fill47Path.moveTo(113.23f, 299.83f);
        fill47Path.cubicTo(113.23f, 299.82f, 113.24f, 299.81f, 113.24f, 299.8f);
        fill47Path.lineTo(113.24f, 252.77f);
        fill47Path.cubicTo(113.24f, 251.15f, 111.92f, 249.83f, 110.29f, 249.83f);
        fill47Path.lineTo(95.59f, 249.83f);
        fill47Path.cubicTo(93.96f, 249.83f, 92.65f, 251.15f, 92.65f, 252.77f);
        fill47Path.lineTo(92.65f, 299.8f);
        fill47Path.cubicTo(92.65f, 299.81f, 92.65f, 299.82f, 92.65f, 299.83f);
        fill47Path.cubicTo(92.65f, 300.17f, 92.72f, 300.53f, 92.86f, 300.88f);
        fill47Path.cubicTo(92.87f, 300.92f, 92.89f, 300.97f, 92.91f, 301.01f);
        fill47Path.cubicTo(92.93f, 301.05f, 92.94f, 301.08f, 92.96f, 301.12f);
        fill47Path.lineTo(100.31f, 315.81f);
        fill47Path.cubicTo(101.39f, 317.98f, 104.49f, 317.98f, 105.57f, 315.81f);
        fill47Path.lineTo(112.92f, 301.12f);
        fill47Path.cubicTo(112.94f, 301.08f, 112.95f, 301.05f, 112.97f, 301.01f);
        fill47Path.cubicTo(112.99f, 300.97f, 113.01f, 300.92f, 113.03f, 300.88f);
        fill47Path.cubicTo(113.16f, 300.53f, 113.23f, 300.17f, 113.23f, 299.83f);
        fill47Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill47Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill47Path, paint);

        // Fill-49
        RectF fill49Rect = CacheForShield.fill49Rect;
        fill49Rect.set(111.76f, 308.62f, 188.24f, 320.38f);
        Path fill49Path = CacheForShield.fill49Path;
        fill49Path.reset();
        fill49Path.moveTo(114.71f, 320.38f);
        fill49Path.cubicTo(113.08f, 320.38f, 111.76f, 319.06f, 111.76f, 317.44f);
        fill49Path.cubicTo(111.76f, 315.82f, 113.08f, 314.5f, 114.71f, 314.5f);
        fill49Path.cubicTo(116.18f, 314.5f, 116.81f, 314.12f, 118.51f, 312.42f);
        fill49Path.cubicTo(121.22f, 309.72f, 123.04f, 308.62f, 126.47f, 308.62f);
        fill49Path.cubicTo(129.9f, 308.62f, 131.72f, 309.72f, 134.43f, 312.42f);
        fill49Path.cubicTo(136.14f, 314.12f, 136.76f, 314.5f, 138.24f, 314.5f);
        fill49Path.cubicTo(139.71f, 314.5f, 140.33f, 314.12f, 142.04f, 312.42f);
        fill49Path.cubicTo(144.75f, 309.72f, 146.57f, 308.62f, 150f, 308.62f);
        fill49Path.cubicTo(153.43f, 308.62f, 155.25f, 309.72f, 157.96f, 312.42f);
        fill49Path.cubicTo(159.67f, 314.12f, 160.29f, 314.5f, 161.76f, 314.5f);
        fill49Path.cubicTo(163.24f, 314.5f, 163.86f, 314.12f, 165.57f, 312.42f);
        fill49Path.cubicTo(168.27f, 309.72f, 170.1f, 308.62f, 173.53f, 308.62f);
        fill49Path.cubicTo(176.96f, 308.62f, 178.78f, 309.72f, 181.49f, 312.42f);
        fill49Path.cubicTo(183.2f, 314.12f, 183.82f, 314.5f, 185.29f, 314.5f);
        fill49Path.cubicTo(186.92f, 314.5f, 188.24f, 315.82f, 188.24f, 317.44f);
        fill49Path.cubicTo(188.24f, 319.06f, 186.92f, 320.38f, 185.29f, 320.38f);
        fill49Path.cubicTo(181.86f, 320.38f, 180.04f, 319.29f, 177.33f, 316.58f);
        fill49Path.cubicTo(175.63f, 314.88f, 175f, 314.5f, 173.53f, 314.5f);
        fill49Path.cubicTo(172.06f, 314.5f, 171.43f, 314.88f, 169.73f, 316.58f);
        fill49Path.cubicTo(167.02f, 319.29f, 165.19f, 320.38f, 161.76f, 320.38f);
        fill49Path.cubicTo(158.34f, 320.38f, 156.51f, 319.29f, 153.8f, 316.58f);
        fill49Path.cubicTo(152.1f, 314.88f, 151.47f, 314.5f, 150f, 314.5f);
        fill49Path.cubicTo(148.53f, 314.5f, 147.9f, 314.88f, 146.2f, 316.58f);
        fill49Path.cubicTo(143.49f, 319.29f, 141.67f, 320.38f, 138.24f, 320.38f);
        fill49Path.cubicTo(134.81f, 320.38f, 132.98f, 319.29f, 130.27f, 316.58f);
        fill49Path.cubicTo(128.57f, 314.88f, 127.94f, 314.5f, 126.47f, 314.5f);
        fill49Path.cubicTo(125f, 314.5f, 124.37f, 314.88f, 122.67f, 316.58f);
        fill49Path.cubicTo(119.96f, 319.29f, 118.14f, 320.38f, 114.71f, 320.38f);
        fill49Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill49Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill49Path, paint);

        // Fill-51
        RectF fill51Rect = CacheForShield.fill51Rect;
        fill51Rect.set(129.41f, 36.01f, 170.59f, 88.92f);
        Path fill51Path = CacheForShield.fill51Path;
        fill51Path.reset();
        fill51Path.moveTo(144.12f, 83.04f);
        fill51Path.lineTo(155.88f, 83.04f);
        fill51Path.lineTo(155.88f, 77.16f);
        fill51Path.lineTo(144.12f, 77.16f);
        fill51Path.lineTo(144.12f, 83.04f);
        fill51Path.close();
        fill51Path.moveTo(135.29f, 56.58f);
        fill51Path.cubicTo(135.29f, 48.47f, 141.88f, 41.89f, 150f, 41.89f);
        fill51Path.cubicTo(158.12f, 41.89f, 164.71f, 48.47f, 164.71f, 56.58f);
        fill51Path.cubicTo(164.71f, 63.69f, 159.65f, 69.62f, 152.94f, 70.99f);
        fill51Path.lineTo(152.94f, 62.46f);
        fill51Path.cubicTo(152.94f, 61.68f, 152.63f, 60.93f, 152.08f, 60.38f);
        fill51Path.lineTo(151.22f, 59.52f);
        fill51Path.lineTo(155.88f, 59.52f);
        fill51Path.cubicTo(157.51f, 59.52f, 158.82f, 58.21f, 158.82f, 56.58f);
        fill51Path.cubicTo(158.82f, 54.96f, 157.51f, 53.64f, 155.88f, 53.64f);
        fill51Path.lineTo(144.12f, 53.64f);
        fill51Path.cubicTo(141.5f, 53.64f, 140.19f, 56.81f, 142.04f, 58.66f);
        fill51Path.lineTo(147.06f, 63.68f);
        fill51Path.lineTo(147.06f, 70.99f);
        fill51Path.cubicTo(140.35f, 69.62f, 135.29f, 63.69f, 135.29f, 56.58f);
        fill51Path.close();
        fill51Path.moveTo(170.59f, 56.58f);
        fill51Path.cubicTo(170.59f, 45.22f, 161.37f, 36.01f, 150f, 36.01f);
        fill51Path.cubicTo(138.63f, 36.01f, 129.41f, 45.22f, 129.41f, 56.58f);
        fill51Path.cubicTo(129.41f, 63.57f, 132.9f, 69.75f, 138.24f, 73.46f);
        fill51Path.lineTo(138.24f, 85.98f);
        fill51Path.cubicTo(138.24f, 87.6f, 139.55f, 88.92f, 141.18f, 88.92f);
        fill51Path.lineTo(158.82f, 88.92f);
        fill51Path.cubicTo(160.45f, 88.92f, 161.76f, 87.6f, 161.76f, 85.98f);
        fill51Path.lineTo(161.76f, 73.46f);
        fill51Path.cubicTo(167.1f, 69.75f, 170.59f, 63.57f, 170.59f, 56.58f);
        fill51Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill51Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill51Path, paint);

        // Fill-53
        RectF fill53Rect = CacheForShield.fill53Rect;
        fill53Rect.set(147f, 21f, 153f, 33f);
        Path fill53Path = CacheForShield.fill53Path;
        fill53Path.reset();
        fill53Path.addRoundRect(fill53Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill53Path, paint);

        // Fill-54
        canvas.save();
        canvas.translate(171.32f, 37.11f);
        currentTransformation.peek().postTranslate(171.32f, 37.11f);
        canvas.rotate(45f);
        currentTransformation.peek().postRotate(45f);
        RectF fill54Rect = CacheForShield.fill54Rect;
        fill54Rect.set(-2.94f, -6.07f, 2.94f, 6.07f);
        Path fill54Path = CacheForShield.fill54Path;
        fill54Path.reset();
        fill54Path.addRoundRect(fill54Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill54Path, paint);
        canvas.restore();

        // Fill-55
        RectF fill55Rect = CacheForShield.fill55Rect;
        fill55Rect.set(174f, 54f, 185f, 60f);
        Path fill55Path = CacheForShield.fill55Path;
        fill55Path.reset();
        fill55Path.addRoundRect(fill55Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill55Path, paint);

        // Fill-56
        canvas.save();
        canvas.translate(128.68f, 30.86f);
        currentTransformation.peek().postTranslate(128.68f, 30.86f);
        canvas.rotate(45f);
        currentTransformation.peek().postRotate(45f);
        RectF fill56Rect = CacheForShield.fill56Rect;
        fill56Rect.set(-6.07f, -2.94f, 6.07f, 2.94f);
        Path fill56Path = CacheForShield.fill56Path;
        fill56Path.reset();
        fill56Path.addRoundRect(fill56Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill56Path, paint);
        canvas.restore();

        // Fill-57
        RectF fill57Rect = CacheForShield.fill57Rect;
        fill57Rect.set(115f, 54f, 126f, 60f);
        Path fill57Path = CacheForShield.fill57Path;
        fill57Path.reset();
        fill57Path.addRoundRect(fill57Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill57Path, paint);

        // Fill-58
        RectF fill58Rect = CacheForShield.fill58Rect;
        fill58Rect.set(202.94f, 58.79f, 226.47f, 82.3f);
        Path fill58Path = CacheForShield.fill58Path;
        fill58Path.reset();
        fill58Path.moveTo(208.82f, 76.42f);
        fill58Path.lineTo(220.29f, 76.42f);
        fill58Path.cubicTo(219.12f, 70.67f, 214.59f, 66.13f, 208.82f, 64.96f);
        fill58Path.lineTo(208.82f, 76.42f);
        fill58Path.close();
        fill58Path.moveTo(205.88f, 82.3f);
        fill58Path.cubicTo(204.26f, 82.3f, 202.94f, 80.99f, 202.94f, 79.36f);
        fill58Path.lineTo(202.94f, 61.73f);
        fill58Path.cubicTo(202.94f, 60.1f, 204.26f, 58.79f, 205.88f, 58.79f);
        fill58Path.cubicTo(217.25f, 58.79f, 226.47f, 68f, 226.47f, 79.36f);
        fill58Path.cubicTo(226.47f, 80.99f, 225.15f, 82.3f, 223.53f, 82.3f);
        fill58Path.lineTo(205.88f, 82.3f);
        fill58Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill58Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill58Path, paint);

        // Fill-59
        RectF fill59Rect = CacheForShield.fill59Rect;
        fill59Rect.set(172.79f, 65.4f, 219.85f, 112.44f);
        Path fill59Path = CacheForShield.fill59Path;
        fill59Path.reset();
        fill59Path.moveTo(196.33f, 91.86f);
        fill59Path.cubicTo(194.7f, 91.86f, 193.39f, 90.54f, 193.39f, 88.92f);
        fill59Path.lineTo(193.39f, 71.52f);
        fill59Path.cubicTo(185.04f, 72.92f, 178.68f, 80.18f, 178.68f, 88.92f);
        fill59Path.cubicTo(178.68f, 98.66f, 186.58f, 106.56f, 196.33f, 106.56f);
        fill59Path.cubicTo(204.95f, 106.56f, 212.2f, 100.17f, 213.69f, 91.86f);
        fill59Path.lineTo(196.33f, 91.86f);
        fill59Path.close();
        fill59Path.moveTo(199.27f, 85.98f);
        fill59Path.lineTo(216.91f, 85.98f);
        fill59Path.cubicTo(218.55f, 85.98f, 219.87f, 87.32f, 219.85f, 88.95f);
        fill59Path.cubicTo(219.72f, 101.87f, 209.19f, 112.44f, 196.33f, 112.44f);
        fill59Path.cubicTo(183.33f, 112.44f, 172.79f, 101.91f, 172.79f, 88.92f);
        fill59Path.cubicTo(172.79f, 75.93f, 183.33f, 65.4f, 196.33f, 65.4f);
        fill59Path.cubicTo(197.95f, 65.4f, 199.27f, 66.72f, 199.27f, 68.34f);
        fill59Path.lineTo(199.27f, 85.98f);
        fill59Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill59Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill59Path, paint);

        // Fill-60
        RectF fill60Rect = CacheForShield.fill60Rect;
        fill60Rect.set(233.09f, 132.27f, 278.5f, 157.24f);
        Path fill60Path = CacheForShield.fill60Path;
        fill60Path.reset();
        fill60Path.moveTo(277.04f, 142.3f);
        fill60Path.cubicTo(275.64f, 141.47f, 273.84f, 141.94f, 273.02f, 143.34f);
        fill60Path.cubicTo(270.13f, 148.27f, 264.82f, 151.36f, 258.96f, 151.36f);
        fill60Path.cubicTo(252.24f, 151.36f, 246.48f, 147.32f, 244f, 141.58f);
        fill60Path.cubicTo(245.23f, 142f, 246.64f, 141.58f, 247.4f, 140.45f);
        fill60Path.cubicTo(248.3f, 139.1f, 247.94f, 137.27f, 246.6f, 136.37f);
        fill60Path.lineTo(241.71f, 133.08f);
        fill60Path.cubicTo(241.44f, 132.85f, 241.14f, 132.66f, 240.79f, 132.53f);
        fill60Path.cubicTo(239.46f, 131.92f, 237.84f, 132.39f, 237.06f, 133.7f);
        fill60Path.lineTo(233.5f, 139.68f);
        fill60Path.cubicTo(232.67f, 141.07f, 233.13f, 142.88f, 234.53f, 143.7f);
        fill60Path.cubicTo(235.78f, 144.45f, 237.35f, 144.15f, 238.27f, 143.07f);
        fill60Path.cubicTo(241.44f, 151.35f, 249.51f, 157.24f, 258.96f, 157.24f);
        fill60Path.cubicTo(266.92f, 157.24f, 274.15f, 153.03f, 278.09f, 146.32f);
        fill60Path.cubicTo(278.91f, 144.92f, 278.45f, 143.12f, 277.04f, 142.3f);
        fill60Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill60Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill60Path, paint);

        // Fill-61
        RectF fill61Rect = CacheForShield.fill61Rect;
        fill61Rect.set(239.4f, 113.16f, 284.66f, 138.24f);
        Path fill61Path = CacheForShield.fill61Path;
        fill61Path.reset();
        fill61Path.moveTo(283.22f, 126.79f);
        fill61Path.cubicTo(282.03f, 126.08f, 280.54f, 126.32f, 279.61f, 127.28f);
        fill61Path.cubicTo(276.43f, 119.02f, 268.37f, 113.16f, 258.94f, 113.16f);
        fill61Path.cubicTo(250.97f, 113.16f, 243.74f, 117.37f, 239.8f, 124.08f);
        fill61Path.cubicTo(238.98f, 125.48f, 239.45f, 127.28f, 240.85f, 128.1f);
        fill61Path.cubicTo(242.25f, 128.92f, 244.05f, 128.45f, 244.88f, 127.05f);
        fill61Path.cubicTo(247.77f, 122.13f, 253.08f, 119.04f, 258.94f, 119.04f);
        fill61Path.cubicTo(265.73f, 119.04f, 271.53f, 123.15f, 273.97f, 129f);
        fill61Path.cubicTo(272.69f, 128.44f, 271.16f, 128.85f, 270.35f, 130.05f);
        fill61Path.cubicTo(269.45f, 131.4f, 269.81f, 133.22f, 271.15f, 134.13f);
        fill61Path.lineTo(276.52f, 137.74f);
        fill61Path.cubicTo(277.92f, 138.68f, 279.83f, 138.25f, 280.69f, 136.8f);
        fill61Path.lineTo(284.25f, 130.82f);
        fill61Path.cubicTo(285.08f, 129.43f, 284.62f, 127.62f, 283.22f, 126.79f);
        fill61Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill61Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill61Path, paint);

        // Fill-62
        RectF fill62Rect = CacheForShield.fill62Rect;
        fill62Rect.set(17.65f, 188.84f, 70.59f, 241.75f);
        Path fill62Path = CacheForShield.fill62Path;
        fill62Path.reset();
        fill62Path.moveTo(64.71f, 229.99f);
        fill62Path.lineTo(46.65f, 229.99f);
        fill62Path.cubicTo(46.14f, 229.12f, 45.2f, 228.52f, 44.12f, 228.52f);
        fill62Path.cubicTo(43.03f, 228.52f, 42.09f, 229.12f, 41.58f, 229.99f);
        fill62Path.lineTo(23.53f, 229.99f);
        fill62Path.lineTo(23.53f, 200.6f);
        fill62Path.lineTo(32.35f, 200.6f);
        fill62Path.cubicTo(33.98f, 200.6f, 35.29f, 199.28f, 35.29f, 197.66f);
        fill62Path.cubicTo(35.29f, 196.24f, 35.73f, 195.58f, 36.61f, 195.14f);
        fill62Path.cubicTo(36.97f, 194.97f, 37.38f, 194.84f, 37.8f, 194.77f);
        fill62Path.cubicTo(38.04f, 194.73f, 38.2f, 194.72f, 38.24f, 194.72f);
        fill62Path.lineTo(50f, 194.72f);
        fill62Path.cubicTo(51.42f, 194.72f, 52.08f, 195.16f, 52.52f, 196.03f);
        fill62Path.cubicTo(52.7f, 196.39f, 52.82f, 196.81f, 52.89f, 197.22f);
        fill62Path.cubicTo(52.93f, 197.47f, 52.94f, 197.63f, 52.94f, 197.66f);
        fill62Path.cubicTo(52.94f, 199.28f, 54.26f, 200.6f, 55.88f, 200.6f);
        fill62Path.lineTo(64.71f, 200.6f);
        fill62Path.lineTo(64.71f, 229.99f);
        fill62Path.close();
        fill62Path.moveTo(67.65f, 194.72f);
        fill62Path.lineTo(58.32f, 194.72f);
        fill62Path.cubicTo(58.17f, 194.28f, 57.99f, 193.84f, 57.78f, 193.41f);
        fill62Path.cubicTo(56.38f, 190.61f, 53.73f, 188.84f, 50f, 188.84f);
        fill62Path.lineTo(38.24f, 188.84f);
        fill62Path.cubicTo(37.9f, 188.84f, 37.42f, 188.88f, 36.83f, 188.97f);
        fill62Path.cubicTo(35.87f, 189.13f, 34.91f, 189.42f, 33.98f, 189.89f);
        fill62Path.cubicTo(31.98f, 190.88f, 30.51f, 192.52f, 29.83f, 194.72f);
        fill62Path.lineTo(20.59f, 194.72f);
        fill62Path.cubicTo(18.96f, 194.72f, 17.65f, 196.04f, 17.65f, 197.66f);
        fill62Path.lineTo(17.65f, 232.93f);
        fill62Path.cubicTo(17.65f, 234.56f, 18.96f, 235.87f, 20.59f, 235.87f);
        fill62Path.lineTo(41.18f, 235.87f);
        fill62Path.lineTo(41.18f, 238.81f);
        fill62Path.cubicTo(41.18f, 240.43f, 42.49f, 241.75f, 44.12f, 241.75f);
        fill62Path.cubicTo(45.74f, 241.75f, 47.06f, 240.43f, 47.06f, 238.81f);
        fill62Path.lineTo(47.06f, 235.87f);
        fill62Path.lineTo(67.65f, 235.87f);
        fill62Path.cubicTo(69.27f, 235.87f, 70.59f, 234.56f, 70.59f, 232.93f);
        fill62Path.lineTo(70.59f, 197.66f);
        fill62Path.cubicTo(70.59f, 196.04f, 69.27f, 194.72f, 67.65f, 194.72f);
        fill62Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill62Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill62Path, paint);

        // Fill-63
        RectF fill63Rect = CacheForShield.fill63Rect;
        fill63Rect.set(30.88f, 200.6f, 57.35f, 227.05f);
        Path fill63Path = CacheForShield.fill63Path;
        fill63Path.reset();
        fill63Path.moveTo(44.12f, 221.17f);
        fill63Path.cubicTo(40.06f, 221.17f, 36.76f, 217.88f, 36.76f, 213.83f);
        fill63Path.cubicTo(36.76f, 209.77f, 40.06f, 206.48f, 44.12f, 206.48f);
        fill63Path.cubicTo(48.18f, 206.48f, 51.47f, 209.77f, 51.47f, 213.83f);
        fill63Path.cubicTo(51.47f, 217.88f, 48.18f, 221.17f, 44.12f, 221.17f);
        fill63Path.close();
        fill63Path.moveTo(44.12f, 200.6f);
        fill63Path.cubicTo(36.81f, 200.6f, 30.88f, 206.52f, 30.88f, 213.83f);
        fill63Path.cubicTo(30.88f, 221.13f, 36.81f, 227.05f, 44.12f, 227.05f);
        fill63Path.cubicTo(51.43f, 227.05f, 57.35f, 221.13f, 57.35f, 213.83f);
        fill63Path.cubicTo(57.35f, 206.52f, 51.43f, 200.6f, 44.12f, 200.6f);
        fill63Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill63Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill63Path, paint);

        // Fill-64
        RectF fill64Rect = CacheForShield.fill64Rect;
        fill64Rect.set(41f, 264f, 47f, 277f);
        Path fill64Path = CacheForShield.fill64Path;
        fill64Path.reset();
        fill64Path.addRoundRect(fill64Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill64Path, paint);

        // Fill-65
        RectF fill65Rect = CacheForShield.fill65Rect;
        fill65Rect.set(41f, 246f, 47f, 259f);
        Path fill65Path = CacheForShield.fill65Path;
        fill65Path.reset();
        fill65Path.addRoundRect(fill65Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill65Path, paint);

        // Fill-66
        RectF fill66Rect = CacheForShield.fill66Rect;
        fill66Rect.set(41f, 281f, 47f, 295f);
        Path fill66Path = CacheForShield.fill66Path;
        fill66Path.reset();
        fill66Path.addRoundRect(fill66Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill66Path, paint);

        // Fill-67
        RectF fill67Rect = CacheForShield.fill67Rect;
        fill67Rect.set(200f, 289f, 206f, 295f);
        Path fill67Path = CacheForShield.fill67Path;
        fill67Path.reset();
        fill67Path.addOval(fill67Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill67Path, paint);

        // Fill-68
        RectF fill68Rect = CacheForShield.fill68Rect;
        fill68Rect.set(185.29f, 249.83f, 220.59f, 302.74f);
        Path fill68Path = CacheForShield.fill68Path;
        fill68Path.reset();
        fill68Path.moveTo(214.71f, 296.86f);
        fill68Path.lineTo(191.18f, 296.86f);
        fill68Path.lineTo(191.18f, 255.71f);
        fill68Path.lineTo(211.76f, 255.72f);
        fill68Path.lineTo(214.71f, 255.72f);
        fill68Path.lineTo(214.71f, 296.86f);
        fill68Path.close();
        fill68Path.moveTo(217.65f, 249.84f);
        fill68Path.lineTo(211.76f, 249.84f);
        fill68Path.lineTo(194.12f, 249.83f);
        fill68Path.lineTo(188.24f, 249.83f);
        fill68Path.cubicTo(186.61f, 249.83f, 185.29f, 251.15f, 185.29f, 252.77f);
        fill68Path.lineTo(185.29f, 299.8f);
        fill68Path.cubicTo(185.29f, 301.43f, 186.61f, 302.74f, 188.24f, 302.74f);
        fill68Path.lineTo(217.65f, 302.74f);
        fill68Path.cubicTo(219.27f, 302.74f, 220.59f, 301.43f, 220.59f, 299.8f);
        fill68Path.lineTo(220.59f, 252.78f);
        fill68Path.cubicTo(220.59f, 251.15f, 219.27f, 249.84f, 217.65f, 249.84f);
        fill68Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill68Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill68Path, paint);

        // Fill-69
        RectF fill69Rect = CacheForShield.fill69Rect;
        fill69Rect.set(82.35f, 330.68f, 136.03f, 365.22f);
        Path fill69Path = CacheForShield.fill69Path;
        fill69Path.reset();
        fill69Path.moveTo(136.03f, 347.95f);
        fill69Path.cubicTo(136.03f, 365.32f, 118.99f, 365.22f, 118.38f, 365.22f);
        fill69Path.lineTo(103.68f, 365.22f);
        fill69Path.cubicTo(103.68f, 365.22f, 100.74f, 365.22f, 100.74f, 362.31f);
        fill69Path.cubicTo(100.74f, 359.4f, 103.68f, 359.4f, 103.68f, 359.4f);
        fill69Path.lineTo(118.38f, 359.34f);
        fill69Path.cubicTo(118.43f, 359.34f, 130.15f, 359.77f, 130.15f, 347.95f);
        fill69Path.cubicTo(130.15f, 336.12f, 118.49f, 336.49f, 118.38f, 336.48f);
        fill69Path.lineTo(94.85f, 336.48f);
        fill69Path.cubicTo(94.85f, 336.48f, 88.24f, 336.55f, 88.24f, 343.16f);
        fill69Path.cubicTo(88.24f, 347.57f, 90.44f, 349.78f, 94.85f, 349.78f);
        fill69Path.lineTo(118.75f, 349.78f);
        fill69Path.cubicTo(118.75f, 349.78f, 120.59f, 349.8f, 120.59f, 347.95f);
        fill69Path.cubicTo(120.59f, 346.11f, 118.75f, 346.05f, 118.75f, 346.05f);
        fill69Path.lineTo(94.85f, 346.1f);
        fill69Path.cubicTo(94.85f, 346.1f, 91.91f, 346.1f, 91.91f, 343.16f);
        fill69Path.cubicTo(91.91f, 340.22f, 94.85f, 340.22f, 94.85f, 340.22f);
        fill69Path.lineTo(118.38f, 340.22f);
        fill69Path.cubicTo(118.38f, 340.22f, 126.47f, 339.86f, 126.47f, 347.95f);
        fill69Path.cubicTo(126.47f, 356.04f, 118.38f, 355.66f, 118.38f, 355.66f);
        fill69Path.lineTo(95.06f, 355.66f);
        fill69Path.cubicTo(95.06f, 355.66f, 82.35f, 355.64f, 82.35f, 343.16f);
        fill69Path.cubicTo(82.35f, 330.68f, 94.85f, 330.68f, 94.85f, 330.68f);
        fill69Path.lineTo(118.38f, 330.68f);
        fill69Path.cubicTo(118.38f, 330.68f, 136.03f, 330.58f, 136.03f, 347.95f);
        fill69Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill69Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill69Path, paint);

        // Fill-70
        RectF fill70Rect = CacheForShield.fill70Rect;
        fill70Rect.set(69.12f, 47.02f, 110.29f, 96.99f);
        Path fill70Path = CacheForShield.fill70Path;
        fill70Path.reset();
        fill70Path.moveTo(89.71f, 91.11f);
        fill70Path.cubicTo(81.58f, 91.11f, 75f, 84.53f, 75f, 76.41f);
        fill70Path.cubicTo(75f, 68.29f, 81.58f, 61.71f, 89.71f, 61.71f);
        fill70Path.cubicTo(97.83f, 61.71f, 104.41f, 68.29f, 104.41f, 76.41f);
        fill70Path.cubicTo(104.41f, 84.53f, 97.83f, 91.11f, 89.71f, 91.11f);
        fill70Path.close();
        fill70Path.moveTo(92.65f, 56.05f);
        fill70Path.lineTo(92.65f, 52.89f);
        fill70Path.lineTo(95.59f, 52.89f);
        fill70Path.cubicTo(97.21f, 52.89f, 98.53f, 51.58f, 98.53f, 49.95f);
        fill70Path.cubicTo(98.53f, 48.33f, 97.21f, 47.02f, 95.59f, 47.02f);
        fill70Path.lineTo(83.82f, 47.02f);
        fill70Path.cubicTo(82.2f, 47.02f, 80.88f, 48.33f, 80.88f, 49.95f);
        fill70Path.cubicTo(80.88f, 51.58f, 82.2f, 52.89f, 83.82f, 52.89f);
        fill70Path.lineTo(86.76f, 52.89f);
        fill70Path.lineTo(86.76f, 56.05f);
        fill70Path.cubicTo(76.79f, 57.47f, 69.12f, 66.04f, 69.12f, 76.41f);
        fill70Path.cubicTo(69.12f, 87.77f, 78.34f, 96.99f, 89.71f, 96.99f);
        fill70Path.cubicTo(101.08f, 96.99f, 110.29f, 87.77f, 110.29f, 76.41f);
        fill70Path.cubicTo(110.29f, 66.04f, 102.62f, 57.47f, 92.65f, 56.05f);
        fill70Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill70Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill70Path, paint);

        // Fill-71
        RectF fill71Rect = CacheForShield.fill71Rect;
        fill71Rect.set(86.76f, 65.39f, 98.53f, 85.23f);
        Path fill71Path = CacheForShield.fill71Path;
        fill71Path.reset();
        fill71Path.moveTo(92.65f, 75.19f);
        fill71Path.lineTo(97.67f, 80.21f);
        fill71Path.cubicTo(98.82f, 81.36f, 98.82f, 83.22f, 97.67f, 84.37f);
        fill71Path.cubicTo(96.52f, 85.51f, 94.66f, 85.51f, 93.51f, 84.37f);
        fill71Path.lineTo(87.63f, 78.49f);
        fill71Path.cubicTo(87.07f, 77.94f, 86.76f, 77.19f, 86.76f, 76.41f);
        fill71Path.lineTo(86.76f, 68.33f);
        fill71Path.cubicTo(86.76f, 66.7f, 88.08f, 65.39f, 89.71f, 65.39f);
        fill71Path.cubicTo(91.33f, 65.39f, 92.65f, 66.7f, 92.65f, 68.33f);
        fill71Path.lineTo(92.65f, 75.19f);
        fill71Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill71Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill71Path, paint);

        // Fill-72
        RectF fill72Rect = CacheForShield.fill72Rect;
        fill72Rect.set(141.91f, 100.66f, 158.85f, 117.59f);
        Path fill72Path = CacheForShield.fill72Path;
        fill72Path.reset();
        fill72Path.moveTo(154.54f, 109.12f);
        fill72Path.lineTo(157.99f, 105.68f);
        fill72Path.cubicTo(159.14f, 104.53f, 159.14f, 102.67f, 157.99f, 101.52f);
        fill72Path.cubicTo(156.84f, 100.37f, 154.98f, 100.37f, 153.83f, 101.52f);
        fill72Path.lineTo(150.38f, 104.97f);
        fill72Path.lineTo(146.93f, 101.52f);
        fill72Path.cubicTo(145.78f, 100.37f, 143.92f, 100.37f, 142.77f, 101.52f);
        fill72Path.cubicTo(141.62f, 102.67f, 141.62f, 104.53f, 142.77f, 105.68f);
        fill72Path.lineTo(146.22f, 109.12f);
        fill72Path.lineTo(142.77f, 112.57f);
        fill72Path.cubicTo(141.62f, 113.72f, 141.62f, 115.58f, 142.77f, 116.72f);
        fill72Path.cubicTo(143.92f, 117.87f, 145.78f, 117.87f, 146.93f, 116.72f);
        fill72Path.lineTo(150.38f, 113.28f);
        fill72Path.lineTo(153.83f, 116.72f);
        fill72Path.cubicTo(154.98f, 117.87f, 156.84f, 117.87f, 157.99f, 116.72f);
        fill72Path.cubicTo(159.14f, 115.58f, 159.14f, 113.72f, 157.99f, 112.57f);
        fill72Path.lineTo(154.54f, 109.12f);
        fill72Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill72Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill72Path, paint);

        // Fill-73
        RectF fill73Rect = CacheForShield.fill73Rect;
        fill73Rect.set(79.41f, 108.74f, 126.47f, 132.26f);
        Path fill73Path = CacheForShield.fill73Path;
        fill73Path.reset();
        fill73Path.moveTo(85.29f, 126.38f);
        fill73Path.lineTo(120.59f, 126.38f);
        fill73Path.lineTo(120.59f, 114.62f);
        fill73Path.lineTo(85.29f, 114.62f);
        fill73Path.lineTo(85.29f, 126.38f);
        fill73Path.close();
        fill73Path.moveTo(82.35f, 132.26f);
        fill73Path.cubicTo(80.73f, 132.26f, 79.41f, 130.94f, 79.41f, 129.32f);
        fill73Path.lineTo(79.41f, 111.68f);
        fill73Path.cubicTo(79.41f, 110.06f, 80.73f, 108.74f, 82.35f, 108.74f);
        fill73Path.lineTo(123.53f, 108.74f);
        fill73Path.cubicTo(125.15f, 108.74f, 126.47f, 110.06f, 126.47f, 111.68f);
        fill73Path.lineTo(126.47f, 129.32f);
        fill73Path.cubicTo(126.47f, 130.94f, 125.15f, 132.26f, 123.53f, 132.26f);
        fill73Path.lineTo(82.35f, 132.26f);
        fill73Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill73Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill73Path, paint);

        // Fill-74
        RectF fill74Rect = CacheForShield.fill74Rect;
        fill74Rect.set(110f, 118f, 116f, 123f);
        Path fill74Path = CacheForShield.fill74Path;
        fill74Path.reset();
        fill74Path.addOval(fill74Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill74Path, paint);

        // Fill-75
        RectF fill75Rect = CacheForShield.fill75Rect;
        fill75Rect.set(79.41f, 135.2f, 126.47f, 158.71f);
        Path fill75Path = CacheForShield.fill75Path;
        fill75Path.reset();
        fill75Path.moveTo(85.29f, 152.83f);
        fill75Path.lineTo(120.59f, 152.83f);
        fill75Path.lineTo(120.59f, 141.08f);
        fill75Path.lineTo(85.29f, 141.08f);
        fill75Path.lineTo(85.29f, 152.83f);
        fill75Path.close();
        fill75Path.moveTo(82.35f, 158.71f);
        fill75Path.cubicTo(80.73f, 158.71f, 79.41f, 157.4f, 79.41f, 155.77f);
        fill75Path.lineTo(79.41f, 138.14f);
        fill75Path.cubicTo(79.41f, 136.51f, 80.73f, 135.2f, 82.35f, 135.2f);
        fill75Path.lineTo(123.53f, 135.2f);
        fill75Path.cubicTo(125.15f, 135.2f, 126.47f, 136.51f, 126.47f, 138.14f);
        fill75Path.lineTo(126.47f, 155.77f);
        fill75Path.cubicTo(126.47f, 157.4f, 125.15f, 158.71f, 123.53f, 158.71f);
        fill75Path.lineTo(82.35f, 158.71f);
        fill75Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill75Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill75Path, paint);

        // Fill-76
        RectF fill76Rect = CacheForShield.fill76Rect;
        fill76Rect.set(110f, 144f, 116f, 150f);
        Path fill76Path = CacheForShield.fill76Path;
        fill76Path.reset();
        fill76Path.addOval(fill76Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill76Path, paint);

        // Fill-77
        RectF fill77Rect = CacheForShield.fill77Rect;
        fill77Rect.set(187f, 141f, 193f, 147f);
        Path fill77Path = CacheForShield.fill77Path;
        fill77Path.reset();
        fill77Path.addOval(fill77Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill77Path, paint);

        // Fill-78
        RectF fill78Rect = CacheForShield.fill78Rect;
        fill78Rect.set(197f, 141f, 203f, 147f);
        Path fill78Path = CacheForShield.fill78Path;
        fill78Path.reset();
        fill78Path.addOval(fill78Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill78Path, paint);

        // Fill-79
        RectF fill79Rect = CacheForShield.fill79Rect;
        fill79Rect.set(208f, 141f, 214f, 147f);
        Path fill79Path = CacheForShield.fill79Path;
        fill79Path.reset();
        fill79Path.addOval(fill79Rect, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill79Path, paint);

        // Fill-80
        RectF fill80Rect = CacheForShield.fill80Rect;
        fill80Rect.set(174.26f, 118.3f, 225.74f, 160.18f);
        Path fill80Path = CacheForShield.fill80Path;
        fill80Path.reset();
        fill80Path.moveTo(219.12f, 152.83f);
        fill80Path.cubicTo(219.12f, 153.64f, 218.46f, 154.3f, 217.65f, 154.3f);
        fill80Path.lineTo(182.35f, 154.3f);
        fill80Path.cubicTo(181.54f, 154.3f, 180.88f, 153.64f, 180.88f, 152.83f);
        fill80Path.lineTo(180.88f, 143.28f);
        fill80Path.cubicTo(180.88f, 137.19f, 185.82f, 132.26f, 191.91f, 132.26f);
        fill80Path.lineTo(208.09f, 132.26f);
        fill80Path.cubicTo(214.18f, 132.26f, 219.12f, 137.19f, 219.12f, 143.28f);
        fill80Path.lineTo(219.12f, 152.83f);
        fill80Path.close();
        fill80Path.moveTo(224.18f, 118.64f);
        fill80Path.cubicTo(222.75f, 117.88f, 220.96f, 118.42f, 220.2f, 119.85f);
        fill80Path.lineTo(215.74f, 128.21f);
        fill80Path.cubicTo(213.44f, 127.04f, 210.84f, 126.38f, 208.09f, 126.38f);
        fill80Path.lineTo(191.91f, 126.38f);
        fill80Path.cubicTo(189.16f, 126.38f, 186.56f, 127.04f, 184.26f, 128.21f);
        fill80Path.lineTo(179.8f, 119.85f);
        fill80Path.cubicTo(179.04f, 118.42f, 177.26f, 117.88f, 175.82f, 118.64f);
        fill80Path.cubicTo(174.39f, 119.41f, 173.85f, 121.19f, 174.61f, 122.62f);
        fill80Path.lineTo(179.51f, 131.8f);
        fill80Path.cubicTo(176.71f, 134.81f, 175f, 138.85f, 175f, 143.28f);
        fill80Path.lineTo(175f, 152.83f);
        fill80Path.cubicTo(175f, 156.89f, 178.29f, 160.18f, 182.35f, 160.18f);
        fill80Path.lineTo(217.65f, 160.18f);
        fill80Path.cubicTo(221.71f, 160.18f, 225f, 156.89f, 225f, 152.83f);
        fill80Path.lineTo(225f, 143.28f);
        fill80Path.cubicTo(225f, 138.85f, 223.29f, 134.81f, 220.49f, 131.8f);
        fill80Path.lineTo(225.39f, 122.62f);
        fill80Path.cubicTo(226.15f, 121.19f, 225.61f, 119.41f, 224.18f, 118.64f);
        fill80Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill80Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill80Path, paint);

        // Fill-81
        RectF fill81Rect = CacheForShield.fill81Rect;
        fill81Rect.set(219.12f, 301.27f, 230.88f, 313.03f);
        Path fill81Path = CacheForShield.fill81Path;
        fill81Path.reset();
        fill81Path.moveTo(230.88f, 304.21f);
        fill81Path.cubicTo(230.88f, 302.59f, 229.57f, 301.27f, 227.94f, 301.27f);
        fill81Path.cubicTo(226.32f, 301.27f, 225f, 302.59f, 225f, 304.21f);
        fill81Path.cubicTo(225f, 305.84f, 223.68f, 307.15f, 222.06f, 307.15f);
        fill81Path.cubicTo(220.43f, 307.15f, 219.12f, 308.47f, 219.12f, 310.09f);
        fill81Path.cubicTo(219.12f, 311.71f, 220.43f, 313.03f, 222.06f, 313.03f);
        fill81Path.cubicTo(226.93f, 313.03f, 230.88f, 309.08f, 230.88f, 304.21f);
        fill81Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill81Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill81Path, paint);

        // Fill-82
        RectF fill82Rect = CacheForShield.fill82Rect;
        fill82Rect.set(219.12f, 301.27f, 242.65f, 324.79f);
        Path fill82Path = CacheForShield.fill82Path;
        fill82Path.reset();
        fill82Path.moveTo(242.65f, 304.21f);
        fill82Path.cubicTo(242.65f, 302.59f, 241.33f, 301.27f, 239.71f, 301.27f);
        fill82Path.cubicTo(238.08f, 301.27f, 236.76f, 302.59f, 236.76f, 304.21f);
        fill82Path.cubicTo(236.76f, 312.33f, 230.18f, 318.91f, 222.06f, 318.91f);
        fill82Path.cubicTo(220.43f, 318.91f, 219.12f, 320.23f, 219.12f, 321.85f);
        fill82Path.cubicTo(219.12f, 323.47f, 220.43f, 324.79f, 222.06f, 324.79f);
        fill82Path.cubicTo(233.43f, 324.79f, 242.65f, 315.58f, 242.65f, 304.21f);
        fill82Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill82Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill82Path, paint);

        // Fill-83
        RectF fill83Rect = CacheForShield.fill83Rect;
        fill83Rect.set(219.12f, 301.27f, 254.41f, 336.55f);
        Path fill83Path = CacheForShield.fill83Path;
        fill83Path.reset();
        fill83Path.moveTo(254.41f, 304.21f);
        fill83Path.cubicTo(254.41f, 302.59f, 253.09f, 301.27f, 251.47f, 301.27f);
        fill83Path.cubicTo(249.85f, 301.27f, 248.53f, 302.59f, 248.53f, 304.21f);
        fill83Path.cubicTo(248.53f, 318.82f, 236.68f, 330.67f, 222.06f, 330.67f);
        fill83Path.cubicTo(220.43f, 330.67f, 219.12f, 331.98f, 219.12f, 333.61f);
        fill83Path.cubicTo(219.12f, 335.23f, 220.43f, 336.55f, 222.06f, 336.55f);
        fill83Path.cubicTo(239.93f, 336.55f, 254.41f, 322.07f, 254.41f, 304.21f);
        fill83Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill83Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill83Path, paint);

        // Fill-84
        RectF fill84Rect = CacheForShield.fill84Rect;
        fill84Rect.set(229.41f, 188.11f, 245.59f, 211.62f);
        Path fill84Path = CacheForShield.fill84Path;
        fill84Path.reset();
        fill84Path.moveTo(235.29f, 205.74f);
        fill84Path.lineTo(239.71f, 205.74f);
        fill84Path.lineTo(239.71f, 193.99f);
        fill84Path.lineTo(235.29f, 193.99f);
        fill84Path.lineTo(235.29f, 205.74f);
        fill84Path.close();
        fill84Path.moveTo(232.35f, 211.62f);
        fill84Path.lineTo(242.65f, 211.62f);
        fill84Path.cubicTo(244.27f, 211.62f, 245.59f, 210.31f, 245.59f, 208.68f);
        fill84Path.lineTo(245.59f, 191.05f);
        fill84Path.cubicTo(245.59f, 189.42f, 244.27f, 188.11f, 242.65f, 188.11f);
        fill84Path.lineTo(232.35f, 188.11f);
        fill84Path.cubicTo(230.73f, 188.11f, 229.41f, 189.42f, 229.41f, 191.05f);
        fill84Path.lineTo(229.41f, 208.68f);
        fill84Path.cubicTo(229.41f, 210.31f, 230.73f, 211.62f, 232.35f, 211.62f);
        fill84Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill84Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill84Path, paint);

        // Fill-85
        RectF fill85Rect = CacheForShield.fill85Rect;
        fill85Rect.set(247.79f, 170.47f, 263.97f, 211.62f);
        Path fill85Path = CacheForShield.fill85Path;
        fill85Path.reset();
        fill85Path.moveTo(253.68f, 205.74f);
        fill85Path.lineTo(258.09f, 205.74f);
        fill85Path.lineTo(258.09f, 176.35f);
        fill85Path.lineTo(253.68f, 176.35f);
        fill85Path.lineTo(253.68f, 205.74f);
        fill85Path.close();
        fill85Path.moveTo(250.74f, 211.62f);
        fill85Path.lineTo(261.03f, 211.62f);
        fill85Path.cubicTo(262.65f, 211.62f, 263.97f, 210.31f, 263.97f, 208.68f);
        fill85Path.lineTo(263.97f, 173.41f);
        fill85Path.cubicTo(263.97f, 171.79f, 262.65f, 170.47f, 261.03f, 170.47f);
        fill85Path.lineTo(250.74f, 170.47f);
        fill85Path.cubicTo(249.11f, 170.47f, 247.79f, 171.79f, 247.79f, 173.41f);
        fill85Path.lineTo(247.79f, 208.68f);
        fill85Path.cubicTo(247.79f, 210.31f, 249.11f, 211.62f, 250.74f, 211.62f);
        fill85Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill85Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill85Path, paint);

        // Fill-86
        RectF fill86Rect = CacheForShield.fill86Rect;
        fill86Rect.set(266.18f, 175.61f, 282.35f, 211.62f);
        Path fill86Path = CacheForShield.fill86Path;
        fill86Path.reset();
        fill86Path.moveTo(272.06f, 205.74f);
        fill86Path.lineTo(276.47f, 205.74f);
        fill86Path.lineTo(276.47f, 181.49f);
        fill86Path.lineTo(272.06f, 181.49f);
        fill86Path.lineTo(272.06f, 205.74f);
        fill86Path.close();
        fill86Path.moveTo(279.41f, 175.61f);
        fill86Path.lineTo(269.12f, 175.61f);
        fill86Path.cubicTo(267.49f, 175.61f, 266.18f, 176.93f, 266.18f, 178.55f);
        fill86Path.lineTo(266.18f, 208.68f);
        fill86Path.cubicTo(266.18f, 210.31f, 267.49f, 211.62f, 269.12f, 211.62f);
        fill86Path.lineTo(279.41f, 211.62f);
        fill86Path.cubicTo(281.04f, 211.62f, 282.35f, 210.31f, 282.35f, 208.68f);
        fill86Path.lineTo(282.35f, 178.55f);
        fill86Path.cubicTo(282.35f, 176.93f, 281.04f, 175.61f, 279.41f, 175.61f);
        fill86Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill86Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill86Path, paint);

        // Fill-87
        RectF fill87Rect = CacheForShield.fill87Rect;
        fill87Rect.set(229f, 218f, 282f, 223f);
        Path fill87Path = CacheForShield.fill87Path;
        fill87Path.reset();
        fill87Path.addRoundRect(fill87Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill87Path, paint);

        // Fill-88
        RectF fill88Rect = CacheForShield.fill88Rect;
        fill88Rect.set(123.53f, 249.83f, 176.47f, 290.99f);
        Path fill88Path = CacheForShield.fill88Path;
        fill88Path.reset();
        fill88Path.moveTo(129.41f, 285.11f);
        fill88Path.lineTo(170.59f, 285.11f);
        fill88Path.lineTo(170.59f, 255.71f);
        fill88Path.lineTo(129.41f, 255.71f);
        fill88Path.lineTo(129.41f, 285.11f);
        fill88Path.close();
        fill88Path.moveTo(173.53f, 249.83f);
        fill88Path.lineTo(126.47f, 249.83f);
        fill88Path.cubicTo(124.85f, 249.83f, 123.53f, 251.15f, 123.53f, 252.77f);
        fill88Path.lineTo(123.53f, 288.05f);
        fill88Path.cubicTo(123.53f, 289.67f, 124.85f, 290.99f, 126.47f, 290.99f);
        fill88Path.lineTo(173.53f, 290.99f);
        fill88Path.cubicTo(175.15f, 290.99f, 176.47f, 289.67f, 176.47f, 288.05f);
        fill88Path.lineTo(176.47f, 252.77f);
        fill88Path.cubicTo(176.47f, 251.15f, 175.15f, 249.83f, 173.53f, 249.83f);
        fill88Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill88Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill88Path, paint);

        // Fill-89
        RectF fill89Rect = CacheForShield.fill89Rect;
        fill89Rect.set(135f, 294f, 165f, 300f);
        Path fill89Path = CacheForShield.fill89Path;
        fill89Path.reset();
        fill89Path.addRoundRect(fill89Rect, 4f, 4f, Path.Direction.CW);

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill89Path, paint);

        // Fill-90
        RectF fill90Rect = CacheForShield.fill90Rect;
        fill90Rect.set(55.88f, 249.83f, 85.29f, 317.44f);
        Path fill90Path = CacheForShield.fill90Path;
        fill90Path.reset();
        fill90Path.moveTo(73.53f, 310.96f);
        fill90Path.lineTo(67.65f, 309.86f);
        fill90Path.lineTo(67.65f, 305.68f);
        fill90Path.lineTo(73.53f, 305.68f);
        fill90Path.lineTo(73.53f, 310.96f);
        fill90Path.close();
        fill90Path.moveTo(77.36f, 255.71f);
        fill90Path.lineTo(79.25f, 291.04f);
        fill90Path.cubicTo(79.07f, 291.01f, 78.87f, 290.98f, 78.68f, 290.98f);
        fill90Path.lineTo(61.93f, 290.98f);
        fill90Path.lineTo(63.82f, 255.71f);
        fill90Path.lineTo(77.36f, 255.71f);
        fill90Path.close();
        fill90Path.moveTo(64.32f, 296.86f);
        fill90Path.lineTo(76.86f, 296.86f);
        fill90Path.lineTo(74.9f, 299.8f);
        fill90Path.lineTo(66.28f, 299.8f);
        fill90Path.lineTo(64.32f, 296.86f);
        fill90Path.close();
        fill90Path.moveTo(85.29f, 293.77f);
        fill90Path.lineTo(83.08f, 252.62f);
        fill90Path.cubicTo(83f, 251.06f, 81.71f, 249.83f, 80.15f, 249.83f);
        fill90Path.lineTo(61.03f, 249.83f);
        fill90Path.cubicTo(59.47f, 249.83f, 58.18f, 251.06f, 58.09f, 252.62f);
        fill90Path.lineTo(55.89f, 293.77f);
        fill90Path.cubicTo(55.85f, 294.4f, 56.02f, 295.03f, 56.38f, 295.55f);
        fill90Path.lineTo(61.76f, 303.63f);
        fill90Path.lineTo(61.76f, 312.3f);
        fill90Path.cubicTo(61.76f, 313.71f, 62.77f, 314.92f, 64.16f, 315.18f);
        fill90Path.lineTo(75.93f, 317.39f);
        fill90Path.cubicTo(77.74f, 317.73f, 79.41f, 316.34f, 79.41f, 314.5f);
        fill90Path.lineTo(79.41f, 303.63f);
        fill90Path.lineTo(84.8f, 295.55f);
        fill90Path.cubicTo(85.15f, 295.03f, 85.32f, 294.4f, 85.29f, 293.77f);
        fill90Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill90Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill90Path, paint);

        // Fill-91
        RectF fill91Rect = CacheForShield.fill91Rect;
        fill91Rect.set(17.65f, 126.38f, 70.59f, 179.29f);
        Path fill91Path = CacheForShield.fill91Path;
        fill91Path.reset();
        fill91Path.moveTo(67.65f, 126.38f);
        fill91Path.lineTo(20.59f, 126.38f);
        fill91Path.cubicTo(18.96f, 126.38f, 17.65f, 127.7f, 17.65f, 129.32f);
        fill91Path.lineTo(17.65f, 141.08f);
        fill91Path.cubicTo(17.65f, 142.7f, 18.96f, 144.02f, 20.59f, 144.02f);
        fill91Path.cubicTo(22.21f, 144.02f, 23.53f, 142.7f, 23.53f, 141.08f);
        fill91Path.lineTo(23.53f, 132.26f);
        fill91Path.lineTo(64.71f, 132.26f);
        fill91Path.lineTo(64.71f, 161.65f);
        fill91Path.lineTo(32.35f, 161.65f);
        fill91Path.lineTo(20.59f, 161.65f);
        fill91Path.cubicTo(18.96f, 161.65f, 17.65f, 162.97f, 17.65f, 164.59f);
        fill91Path.cubicTo(17.65f, 166.21f, 18.96f, 167.53f, 20.59f, 167.53f);
        fill91Path.lineTo(27.59f, 167.53f);
        fill91Path.lineTo(23.84f, 175.03f);
        fill91Path.cubicTo(23.11f, 176.49f, 23.7f, 178.25f, 25.16f, 178.98f);
        fill91Path.cubicTo(26.61f, 179.7f, 28.37f, 179.12f, 29.1f, 177.66f);
        fill91Path.lineTo(34.17f, 167.53f);
        fill91Path.lineTo(54.8f, 167.53f);
        fill91Path.lineTo(59.87f, 177.66f);
        fill91Path.cubicTo(60.6f, 179.12f, 62.36f, 179.7f, 63.82f, 178.98f);
        fill91Path.cubicTo(65.27f, 178.25f, 65.86f, 176.49f, 65.13f, 175.03f);
        fill91Path.lineTo(61.38f, 167.53f);
        fill91Path.lineTo(67.65f, 167.53f);
        fill91Path.cubicTo(69.27f, 167.53f, 70.59f, 166.21f, 70.59f, 164.59f);
        fill91Path.lineTo(70.59f, 129.32f);
        fill91Path.cubicTo(70.59f, 127.7f, 69.27f, 126.38f, 67.65f, 126.38f);
        fill91Path.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        fill91Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(fill91Path, paint);

        canvas.restore();
    }

    private static class CacheForRestore {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 48f, 48f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }

    public static void drawRestore(Canvas canvas, int color) {
        WireStyleKit.drawRestore(canvas, new RectF(0f, 0f, 48f, 48f), ResizingBehavior.AspectFit, color);
    }

    public static void drawRestore(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int color) {
        // General Declarations
        Paint paint = CacheForRestore.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRestore.resizedFrame;
        WireStyleKit.resizingBehaviorApply(resizing, CacheForRestore.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 48f, resizedFrame.height() / 48f);

        // Bezier
        RectF bezierRect = CacheForRestore.bezierRect;
        bezierRect.set(0f, 0f, 48f, 48f);
        Path bezierPath = CacheForRestore.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(0.08f, 26f);
        bezierPath.lineTo(4.1f, 26f);
        bezierPath.cubicTo(5.1f, 36.11f, 13.63f, 44f, 24f, 44f);
        bezierPath.cubicTo(35.05f, 44f, 44f, 35.05f, 44f, 24f);
        bezierPath.cubicTo(44f, 12.95f, 35.05f, 4f, 24f, 4f);
        bezierPath.cubicTo(16.94f, 4f, 10.74f, 7.66f, 7.18f, 13.18f);
        bezierPath.lineTo(12f, 18f);
        bezierPath.lineTo(0f, 18f);
        bezierPath.lineTo(0f, 6f);
        bezierPath.lineTo(4.3f, 10.3f);
        bezierPath.cubicTo(8.63f, 4.07f, 15.84f, 0f, 24f, 0f);
        bezierPath.cubicTo(37.25f, 0f, 48f, 10.75f, 48f, 24f);
        bezierPath.cubicTo(48f, 37.25f, 37.25f, 48f, 24f, 48f);
        bezierPath.cubicTo(11.42f, 48f, 1.1f, 38.32f, 0.08f, 26f);
        bezierPath.close();
        bezierPath.moveTo(26f, 23.69f);
        bezierPath.lineTo(34.39f, 28.54f);
        bezierPath.lineTo(32.39f, 32f);
        bezierPath.lineTo(22f, 26f);
        bezierPath.lineTo(22f, 10f);
        bezierPath.lineTo(26f, 10f);
        bezierPath.lineTo(26f, 23.69f);
        bezierPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color);
        canvas.drawPath(bezierPath, paint);

        canvas.restore();
    }


    // Canvas Images
    // Icons

    public static Bitmap imageOfAvailableIcon(int color) {
        Bitmap imageOfAvailableIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAvailableIcon);
        WireStyleKit.drawAvailableIcon(canvas, color);

        return imageOfAvailableIcon;
    }

    public static Bitmap imageOfAwayIcon(int color) {
        Bitmap imageOfAwayIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAwayIcon);
        WireStyleKit.drawAwayIcon(canvas, color);

        return imageOfAwayIcon;
    }

    public static Bitmap imageOfDownArrow(int color) {
        Bitmap imageOfDownArrow = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDownArrow);
        WireStyleKit.drawDownArrow(canvas, color);

        return imageOfDownArrow;
    }

    public static Bitmap imageOfServiceIcon(int color) {
        Bitmap imageOfServiceIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfServiceIcon);
        WireStyleKit.drawServiceIcon(canvas, color);

        return imageOfServiceIcon;
    }

    public static Bitmap imageOfGroupIcon(int color) {
        Bitmap imageOfGroupIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGroupIcon);
        WireStyleKit.drawGroupIcon(canvas, color);

        return imageOfGroupIcon;
    }

    public static Bitmap imageOfNavigationArrow(int color) {
        Bitmap imageOfNavigationArrow = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfNavigationArrow);
        WireStyleKit.drawNavigationArrow(canvas, color);

        return imageOfNavigationArrow;
    }

    public static Bitmap imageOfGuestIcon(int color) {
        Bitmap imageOfGuestIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGuestIcon);
        WireStyleKit.drawGuestIcon(canvas, color);

        return imageOfGuestIcon;
    }

    public static Bitmap imageOfVideocall(int color) {
        Bitmap imageOfVideocall = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfVideocall);
        WireStyleKit.drawVideocall(canvas, color);

        return imageOfVideocall;
    }

    public static Bitmap imageOfHangUpCall(int color) {
        Bitmap imageOfHangUpCall = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfHangUpCall);
        WireStyleKit.drawHangUpCall(canvas, color);

        return imageOfHangUpCall;
    }

    public static Bitmap imageOfConversation(int color) {
        Bitmap imageOfConversation = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfConversation);
        WireStyleKit.drawConversation(canvas, color);

        return imageOfConversation;
    }

    public static Bitmap imageOfAcceptCall(int color) {
        Bitmap imageOfAcceptCall = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAcceptCall);
        WireStyleKit.drawAcceptCall(canvas, color);

        return imageOfAcceptCall;
    }

    public static Bitmap imageOfFlip(int color) {
        Bitmap imageOfFlip = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfFlip);
        WireStyleKit.drawFlip(canvas, color);

        return imageOfFlip;
    }

    public static Bitmap imageOfSpeaker(int color) {
        Bitmap imageOfSpeaker = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSpeaker);
        WireStyleKit.drawSpeaker(canvas, color);

        return imageOfSpeaker;
    }

    public static Bitmap imageOfMute(int color) {
        Bitmap imageOfMute = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMute);
        WireStyleKit.drawMute(canvas, color);

        return imageOfMute;
    }

    public static Bitmap imageOfMissedCall(int color) {
        Bitmap imageOfMissedCall = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMissedCall);
        WireStyleKit.drawMissedCall(canvas, color);

        return imageOfMissedCall;
    }

    public static Bitmap imageOfBusyIcon(int color) {
        Bitmap imageOfBusyIcon = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfBusyIcon);
        WireStyleKit.drawBusyIcon(canvas, color);

        return imageOfBusyIcon;
    }

    public static Bitmap imageOfMinute(int color) {
        Bitmap imageOfMinute = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMinute);
        WireStyleKit.drawMinute(canvas, color);

        return imageOfMinute;
    }

    public static Bitmap imageOfYear(int color) {
        Bitmap imageOfYear = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfYear);
        WireStyleKit.drawYear(canvas, color);

        return imageOfYear;
    }

    public static Bitmap imageOfWeek(int color) {
        Bitmap imageOfWeek = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfWeek);
        WireStyleKit.drawWeek(canvas, color);

        return imageOfWeek;
    }

    public static Bitmap imageOfHour(int color) {
        Bitmap imageOfHour = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfHour);
        WireStyleKit.drawHour(canvas, color);

        return imageOfHour;
    }

    public static Bitmap imageOfDay(int color) {
        Bitmap imageOfDay = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDay);
        WireStyleKit.drawDay(canvas, color);

        return imageOfDay;
    }

    public static Bitmap imageOfSecond(int color) {
        Bitmap imageOfSecond = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSecond);
        WireStyleKit.drawSecond(canvas, color);

        return imageOfSecond;
    }

    public static Bitmap imageOfMonth(int color) {
        Bitmap imageOfMonth = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMonth);
        WireStyleKit.drawMonth(canvas, color);

        return imageOfMonth;
    }

    public static Bitmap imageOfTimedMessages(int color) {
        Bitmap imageOfTimedMessages = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfTimedMessages);
        WireStyleKit.drawTimedMessages(canvas, color);

        return imageOfTimedMessages;
    }

    public static Bitmap imageOfMentions(int color) {
        Bitmap imageOfMentions = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMentions);
        WireStyleKit.drawMentions(canvas, color);

        return imageOfMentions;
    }

    public static Bitmap imageOfCamera(int color) {
        Bitmap imageOfCamera = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfCamera);
        WireStyleKit.drawCamera(canvas, color);

        return imageOfCamera;
    }

    public static Bitmap imageOfSketch(int color) {
        Bitmap imageOfSketch = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSketch);
        WireStyleKit.drawSketch(canvas, color);

        return imageOfSketch;
    }

    public static Bitmap imageOfGIF(int color) {
        Bitmap imageOfGIF = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGIF);
        WireStyleKit.drawGIF(canvas, color);

        return imageOfGIF;
    }

    public static Bitmap imageOfVoiceMemo(int color) {
        Bitmap imageOfVoiceMemo = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfVoiceMemo);
        WireStyleKit.drawVoiceMemo(canvas, color);

        return imageOfVoiceMemo;
    }

    public static Bitmap imageOfMore(int color) {
        Bitmap imageOfMore = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMore);
        WireStyleKit.drawMore(canvas, color);

        return imageOfMore;
    }

    public static Bitmap imageOfPing(int color) {
        Bitmap imageOfPing = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfPing);
        WireStyleKit.drawPing(canvas, color);

        return imageOfPing;
    }

    public static Bitmap imageOfAttachement(int color) {
        Bitmap imageOfAttachement = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAttachement);
        WireStyleKit.drawAttachement(canvas, color);

        return imageOfAttachement;
    }

    public static Bitmap imageOfLocation(int color) {
        Bitmap imageOfLocation = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLocation);
        WireStyleKit.drawLocation(canvas, color);

        return imageOfLocation;
    }

    public static Bitmap imageOfVideoMessage(int color) {
        Bitmap imageOfVideoMessage = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfVideoMessage);
        WireStyleKit.drawVideoMessage(canvas, color);

        return imageOfVideoMessage;
    }

    public static Bitmap imageOfSend(int color) {
        Bitmap imageOfSend = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSend);
        WireStyleKit.drawSend(canvas, color);

        return imageOfSend;
    }

    public static Bitmap imageOfText(int color) {
        Bitmap imageOfText = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfText);
        WireStyleKit.drawText(canvas, color);

        return imageOfText;
    }

    public static Bitmap imageOfEmoji(int color) {
        Bitmap imageOfEmoji = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfEmoji);
        WireStyleKit.drawEmoji(canvas, color);

        return imageOfEmoji;
    }

    public static Bitmap imageOfMuteAlerts(int color) {
        Bitmap imageOfMuteAlerts = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMuteAlerts);
        WireStyleKit.drawMuteAlerts(canvas, color);

        return imageOfMuteAlerts;
    }

    public static Bitmap imageOfAlerts(int color) {
        Bitmap imageOfAlerts = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAlerts);
        WireStyleKit.drawAlerts(canvas, color);

        return imageOfAlerts;
    }

    public static Bitmap imageOfImage(int color) {
        Bitmap imageOfImage = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfImage);
        WireStyleKit.drawImage(canvas, color);

        return imageOfImage;
    }

    public static Bitmap imageOfEdit(int color) {
        Bitmap imageOfEdit = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfEdit);
        WireStyleKit.drawEdit(canvas, color);

        return imageOfEdit;
    }

    public static Bitmap imageOfReply(int color) {
        Bitmap imageOfReply = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfReply);
        WireStyleKit.drawReply(canvas, color);

        return imageOfReply;
    }

    public static Bitmap imageOfCopied(int color) {
        Bitmap imageOfCopied = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfCopied);
        WireStyleKit.drawCopied(canvas, color);

        return imageOfCopied;
    }

    public static Bitmap imageOfLiked(int color) {
        Bitmap imageOfLiked = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLiked);
        WireStyleKit.drawLiked(canvas, color);

        return imageOfLiked;
    }

    public static Bitmap imageOfLike(int color) {
        Bitmap imageOfLike = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLike);
        WireStyleKit.drawLike(canvas, color);

        return imageOfLike;
    }

    public static Bitmap imageOfShare(int color) {
        Bitmap imageOfShare = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfShare);
        WireStyleKit.drawShare(canvas, color);

        return imageOfShare;
    }

    public static Bitmap imageOfSave(int color) {
        Bitmap imageOfSave = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSave);
        WireStyleKit.drawSave(canvas, color);

        return imageOfSave;
    }

    public static Bitmap imageOfDelete(int color) {
        Bitmap imageOfDelete = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDelete);
        WireStyleKit.drawDelete(canvas, color);

        return imageOfDelete;
    }

    public static Bitmap imageOfDeleteforme(int color) {
        Bitmap imageOfDeleteforme = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDeleteforme);
        WireStyleKit.drawDeleteforme(canvas, color);

        return imageOfDeleteforme;
    }

    public static Bitmap imageOfDeleteforeveryone(int color) {
        Bitmap imageOfDeleteforeveryone = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDeleteforeveryone);
        WireStyleKit.drawDeleteforeveryone(canvas, color);

        return imageOfDeleteforeveryone;
    }

    public static Bitmap imageOfArchive(int color) {
        Bitmap imageOfArchive = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfArchive);
        WireStyleKit.drawArchive(canvas, color);

        return imageOfArchive;
    }

    public static Bitmap imageOfLeave(int color) {
        Bitmap imageOfLeave = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLeave);
        WireStyleKit.drawLeave(canvas, color);

        return imageOfLeave;
    }

    public static Bitmap imageOfReveal(int color) {
        Bitmap imageOfReveal = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfReveal);
        WireStyleKit.drawReveal(canvas, color);

        return imageOfReveal;
    }

    public static Bitmap imageOfFile(int color) {
        Bitmap imageOfFile = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfFile);
        WireStyleKit.drawFile(canvas, color);

        return imageOfFile;
    }

    public static Bitmap imageOfBlock(int color) {
        Bitmap imageOfBlock = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfBlock);
        WireStyleKit.drawBlock(canvas, color);

        return imageOfBlock;
    }

    public static Bitmap imageOfView(int color) {
        Bitmap imageOfView = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfView);
        WireStyleKit.drawView(canvas, color);

        return imageOfView;
    }

    public static Bitmap imageOfDropdown(int color) {
        Bitmap imageOfDropdown = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDropdown);
        WireStyleKit.drawDropdown(canvas, color);

        return imageOfDropdown;
    }

    public static Bitmap imageOfInfo(int color) {
        Bitmap imageOfInfo = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfInfo);
        WireStyleKit.drawInfo(canvas, color);

        return imageOfInfo;
    }

    public static Bitmap imageOfRemove(int color) {
        Bitmap imageOfRemove = Bitmap.createBitmap(64, 64, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfRemove);
        WireStyleKit.drawRemove(canvas, color);

        return imageOfRemove;
    }

    // Indicators and logos

    public static Bitmap imageOfShield(int color) {
        Bitmap imageOfShield = Bitmap.createBitmap(300, 388, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfShield);
        WireStyleKit.drawShield(canvas, color);

        return imageOfShield;
    }

    public static Bitmap imageOfRestore(int color) {
        Bitmap imageOfRestore = Bitmap.createBitmap(48, 48, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfRestore);
        WireStyleKit.drawRestore(canvas, color);

        return imageOfRestore;
    }


    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }

        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }

        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;

        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }

        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
                target.centerY() - newHeight / 2,
                target.centerX() + newWidth / 2,
                target.centerY() + newHeight / 2);
    }


}