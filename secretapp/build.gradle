apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jp.leafytree.android-scala'
apply plugin: 'com.mutualmobile.gradle.plugins.dexinfo'



repositories {
    flatDir {
        dirs 'libs', 'jniLibs', '../app/libs', '../app/jniLibs'
    }
}

if (project.file('user.gradle').exists()) {
    apply from: "user.gradle"
}

android {

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '28.0.0'
                }
            }
        }
    }
    //Trigger the licenseFormat task at least once in any compile phase
    applicationVariants.all { variant ->
        JavaCompile javaCompile = null
        if (variant.hasProperty('javaCompileProvider')) {
            //gradle 4.10.1 +
            TaskProvider<JavaCompile> provider = variant.javaCompileProvider
            javaCompile = provider.get()
        } else {
            javaCompile = variant.hasProperty('javaCompiler') ? variant.javaCompiler : variant.javaCompile
        }
    }

    compileSdkVersion = Config.compileSdkVersion
    buildToolsVersion = Config.buildToolsVersion

    defaultConfig {
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
        applicationId "com.jsy.secret"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
            customURLScheme: config.custom_url_scheme
        ]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        vectorDrawables.useSupportLibrary = true
    }

    packagingOptions {
        // Need to exclude all armeabi/mips libs
        // as not all of our libs support these architectures
        exclude 'lib/armeabi/libgnustl_shared.so'
        exclude 'lib/armeabi/libspotify_embedded_shared.so'
        exclude 'lib/armeabi/libspotify_sdk.so'
        exclude 'lib/mips/librs.blur.so'
        exclude 'lib/mips/librs.decode.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/armeabi/libjnidispatch.so'
        exclude 'lib/mips/libjnidispatch.so'
        exclude 'lib/mips64/libjnidispatch.so'
    }


    dexOptions {
        preDexLibraries false
        javaMaxHeapSize '4g'
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android-optimize-wire.txt', 'proguard-rules.txt', 'proguard-rules.pro', 'proguard-tencent.txt'
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            manifestPlaceholders = [applicationVmSafeMode: "false"]

            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }

        debug {
            // To get debugging properly working again - https://code.google.com/p/android/issues/detail?id=177480
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android-optimize-wire.txt', 'proguard-rules.txt', 'proguard-rules.pro', 'proguard-tencent.txt'
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            manifestPlaceholders = [applicationVmSafeMode: "true"]

            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a","x86"
            }
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            applicationId "com.jsy.secret.dev"
            versionName android.defaultConfig.versionName + android.defaultConfig.versionCode + "-dev"
            manifestPlaceholders = [applicationLabel : "Dev Secret",
                                    applicationIcon  : "@drawable/ic_launcher_wire_dev",
                                    sharedUserId     : "",
                                    internal_features: "true"]
        }

        prod {
            applicationId "com.jsy.secret"
            manifestPlaceholders = [applicationLabel : "@string/app_name",
                                    applicationIcon  : "@drawable/ic_launcher_wire",
                                    sharedUserId     : "com.jsy.secret.userid",
                                    internal_features: "false"]
        }

        googleplay {
            applicationId "com.jsy.secret"
            manifestPlaceholders = [applicationLabel : "@string/app_name",
                                    applicationIcon  : "@drawable/ic_launcher_wire",
                                    sharedUserId     : "com.jsy.secret.userid",
                                    internal_features: "false"]
        }
    }


    /* to ignore error where multiple libs have this file */
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'APK_LICENSE.txt'
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility Config.sourceCompatibilityVersion
        targetCompatibility Config.targetCompatibilityVersion
    }
}

dexinfo {
    maxDepth 2
}

dependencies {
    implementation project(':app')
    implementation project(':swipbackactivity')
    annotationProcessor BuildDependencies.alibabaCompiler
}


static def getDate() {
    def date = new Date()
    def formattedDate = date.format('MM-dd HH-mm-ss')
    return formattedDate
}

//add pretty naming to apk filename
android.applicationVariants.all { variant ->
    def assembleTask=tasks.findByName("assemble${variant.name.capitalize()}")
    assembleTask.dependsOn(":zmessaging:messagesProto")
    if (variant.buildType.name == "release") {
        def appName
        //Check if an applicationName property is supplied; if not use the name of the parent project.
        if (project.hasProperty("applicationName")) {
            appName = applicationName
        } else {
            appName = "Secret"
        }

        variant.outputs.each { output ->
            def newApkName = "${appName}-${output.baseName}-[${android.defaultConfig.versionName}]-[${android.defaultConfig.versionCode}]-${getDate()}.apk"

            output.outputFileName = new File("../${output.baseName}", newApkName)
        }
    }
}
